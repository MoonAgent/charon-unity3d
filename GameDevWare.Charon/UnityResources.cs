/*
	Copyright (c) 2015 Denis Zykov

	This is part of Charon Game Data Editor Unity Plugin.

	Charon Game Data Editor Unity Plugin is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see http://www.gnu.org/licenses.
*/
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable once CheckNamespace
// ReSharper disable once EmptyNamespace
namespace Assets.Editor.GameDevWare.Charon {
	using System;
	using System.Collections.Generic;

	public static class Resources
	{
		private readonly static string[] supportedLanguages = new string[] { "ru", "en" };
		private static string currentLanguageIdx;
		
		public static string[] SupportedLanguages { get { return (string[])supportedLanguages.Clone(); } }
		public static string CurrentLanguage 
		{ 
			get { return supportedLanguages[currentLanguageIdx]; } 
			set 
			{ 
				if (value == null) throw new ArgumentNullException("value");
				var langIndex = Array.IndexOf(supportedLanguages, value);
				if (langIndex < 0) throw new ArgumentException("Unsupported language '" + value + "'.", "value");

				currentLanguageIdx = langIndex;
			}
		}


		public static string UI_UNITYPLUGIN_REPORTBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Report";
					case 1: return "Report";
					default: return "UI_UNITYPLUGIN_REPORTBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWUPDATETOOLSTITLE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Tools Update";
					case 1: return "Tools Update";
					default: return "UI_UNITYPLUGIN_WINDOWUPDATETOOLSTITLE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MIGRATERUNMIGRATIONFOR 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Running migration tools for {0}";
					case 1: return "Running migration tools for {0}";
					default: return "UI_UNITYPLUGIN_MIGRATERUNMIGRATIONFOR";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWREPORTISSUETITLE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Report an Issue";
					case 1: return "Report an Issue";
					default: return "UI_UNITYPLUGIN_WINDOWREPORTISSUETITLE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWDOWNLOADMONO 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "b) If it doesn't exists you can press 'Download Mono' button below and try again.";
					case 1: return "b) If it doesn't exists you can press 'Download Mono' button below and try again.";
					default: return "UI_UNITYPLUGIN_WINDOWDOWNLOADMONO";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWVALIDATEBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Validate";
					case 1: return "Validate";
					default: return "UI_UNITYPLUGIN_WINDOWVALIDATEBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_UPDATEAVAILABLEMESSAGE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "A new vesion '{1}' of tools available. Current version is '{0}'.";
					case 1: return "A new vesion '{1}' of tools available. Current version is '{0}'.";
					default: return "UI_UNITYPLUGIN_UPDATEAVAILABLEMESSAGE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCODEGENERATIONPATH 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Code Generation Path";
					case 1: return "Code Generation Path";
					default: return "UI_UNITYPLUGIN_WINDOWCODEGENERATIONPATH";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWHELPBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Help";
					case 1: return "Help";
					default: return "UI_UNITYPLUGIN_WINDOWHELPBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWBROWSERPATHTITLE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Path to browser application";
					case 1: return "Path to browser application";
					default: return "UI_UNITYPLUGIN_WINDOWBROWSERPATHTITLE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWUPDATERUNTIMETITLE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return ".NET Runtime Update";
					case 1: return ".NET Runtime Update";
					default: return "UI_UNITYPLUGIN_WINDOWUPDATERUNTIMETITLE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWPASSWORDSDOESNMATCHMESSAGE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Password does not match.";
					case 1: return "Password does not match.";
					default: return "UI_UNITYPLUGIN_WINDOWPASSWORDSDOESNMATCHMESSAGE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_SCANCOMPLETE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Scan complete: {0} files are located. Total {1} files are tracked.";
					case 1: return "Scan complete: {0} files are located. Total {1} files are tracked.";
					default: return "UI_UNITYPLUGIN_SCANCOMPLETE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWRUNGENERATORBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Run Generator";
					case 1: return "Run Generator";
					default: return "UI_UNITYPLUGIN_WINDOWRUNGENERATORBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENUABOUT 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "About...";
					case 1: return "About...";
					default: return "UI_UNITYPLUGIN_MENUABOUT";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWASSETSTOREINVOICENUMBER 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Asset Store Invoice Number";
					case 1: return "Asset Store Invoice Number";
					default: return "UI_UNITYPLUGIN_WINDOWASSETSTOREINVOICENUMBER";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWRUNTIMEREQUIRED 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "To run Game Data Editor and related tools you need a installed .NET Runtime or Mono Runtime.";
					case 1: return "To run Game Data Editor and related tools you need a installed .NET Runtime or Mono Runtime.";
					default: return "UI_UNITYPLUGIN_WINDOWRUNTIMEREQUIRED";
				}
			}
		}
		public static string UI_UNITYPLUGIN_PROGRESSCHECKINGTOOLSVERSION 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Checking current tools version...";
					case 1: return "Checking current tools version...";
					default: return "UI_UNITYPLUGIN_PROGRESSCHECKINGTOOLSVERSION";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWOKBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Ok";
					case 1: return "Ok";
					default: return "UI_UNITYPLUGIN_WINDOWOKBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCHECKINGVERSION 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Checking...";
					case 1: return "Checking...";
					default: return "UI_UNITYPLUGIN_WINDOWCHECKINGVERSION";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWASSETGENERATIONPATH 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Asset Generation Path";
					case 1: return "Asset Generation Path";
					default: return "UI_UNITYPLUGIN_WINDOWASSETGENERATIONPATH";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCHECKRESULTMISSINGMONOORDOTNET 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Missing .NET Runtime!";
					case 1: return "Missing .NET Runtime!";
					default: return "UI_UNITYPLUGIN_WINDOWCHECKRESULTMISSINGMONOORDOTNET";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENUEXTRACTT4TEMPLATES 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Extract T4 Templates";
					case 1: return "Extract T4 Templates";
					default: return "UI_UNITYPLUGIN_MENUEXTRACTT4TEMPLATES";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWSELECTLICENSELABEL 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Select License";
					case 1: return "Select License";
					default: return "UI_UNITYPLUGIN_WINDOWSELECTLICENSELABEL";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWLASTTOOLSVERSIONLABEL 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Last Tools Version";
					case 1: return "Last Tools Version";
					default: return "UI_UNITYPLUGIN_WINDOWLASTTOOLSVERSIONLABEL";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCODENAMESPACE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Code Namespace";
					case 1: return "Code Namespace";
					default: return "UI_UNITYPLUGIN_WINDOWCODENAMESPACE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWLASTNAME 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Last Name";
					case 1: return "Last Name";
					default: return "UI_UNITYPLUGIN_WINDOWLASTNAME";
				}
			}
		}
		public static string UI_UNITYPLUGIN_GENERATEREFRESHINGASSETS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Refreshing assets";
					case 1: return "Refreshing assets";
					default: return "UI_UNITYPLUGIN_GENERATEREFRESHINGASSETS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWLICENSEACTIVATIONTITLE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Charon License Activation";
					case 1: return "Charon License Activation";
					default: return "UI_UNITYPLUGIN_WINDOWLICENSEACTIVATIONTITLE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWAUTOGENERATION 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Auto-Generation";
					case 1: return "Auto-Generation";
					default: return "UI_UNITYPLUGIN_WINDOWAUTOGENERATION";
				}
			}
		}
		public static string UI_UNITYPLUGIN_OPERATIONCANCELLED 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Operation was cancelled by user.";
					case 1: return "Operation was cancelled by user.";
					default: return "UI_UNITYPLUGIN_OPERATIONCANCELLED";
				}
			}
		}
		public static string UI_UNITYPLUGIN_PROGRESSDOWNLOADINGS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Downloading assets ({0:F2}/{1:F2}Mib)...";
					case 1: return "Downloading assets ({0:F2}/{1:F2}Mib)...";
					default: return "UI_UNITYPLUGIN_PROGRESSDOWNLOADINGS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWUNTRACTBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Untrack";
					case 1: return "Untrack";
					default: return "UI_UNITYPLUGIN_WINDOWUNTRACTBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENUOPENLOGS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Open Logs";
					case 1: return "Open Logs";
					default: return "UI_UNITYPLUGIN_MENUOPENLOGS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWEDITORCOPYINGEXECUTABLE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Copying executable to Temp directory...";
					case 1: return "Copying executable to Temp directory...";
					default: return "UI_UNITYPLUGIN_WINDOWEDITORCOPYINGEXECUTABLE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWBROWSERPATH 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Browser Path";
					case 1: return "Browser Path";
					default: return "UI_UNITYPLUGIN_WINDOWBROWSERPATH";
				}
			}
		}
		public static string UI_UNITYPLUGIN_CHANGEBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Change...";
					case 1: return "Change...";
					default: return "UI_UNITYPLUGIN_CHANGEBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWEDITBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Edit";
					case 1: return "Edit";
					default: return "UI_UNITYPLUGIN_WINDOWEDITBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENUCHECKRUNTIME 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Check Runtime Version...";
					case 1: return "Check Runtime Version...";
					default: return "UI_UNITYPLUGIN_MENUCHECKRUNTIME";
				}
			}
		}
		public static string UI_UNITYPLUGIN_GENERATINGCODEANDASSETS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Generating Code and Assets...";
					case 1: return "Generating Code and Assets...";
					default: return "UI_UNITYPLUGIN_GENERATINGCODEANDASSETS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWNOAVAILABLELICENSESMESSAGE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "No available licenses.";
					case 1: return "No available licenses.";
					default: return "UI_UNITYPLUGIN_WINDOWNOAVAILABLELICENSESMESSAGE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWPATHTOMONO 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Path to Mono (bin)";
					case 1: return "Path to Mono (bin)";
					default: return "UI_UNITYPLUGIN_WINDOWPATHTOMONO";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWFINDMONOMANUALLY 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "a) You can manually locate Mono Runtime by pressing 'Browse...' button.";
					case 1: return "a) You can manually locate Mono Runtime by pressing 'Browse...' button.";
					default: return "UI_UNITYPLUGIN_WINDOWFINDMONOMANUALLY";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWPRESSHELP 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "If you need a help with .NET Runtime installation press 'Help' button.";
					case 1: return "If you need a help with .NET Runtime installation press 'Help' button.";
					default: return "UI_UNITYPLUGIN_WINDOWPRESSHELP";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWLICENSEHOLDER 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "License Holder";
					case 1: return "License Holder";
					default: return "UI_UNITYPLUGIN_WINDOWLICENSEHOLDER";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWSERIALNUMBER 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Serial Number";
					case 1: return "Serial Number";
					default: return "UI_UNITYPLUGIN_WINDOWSERIALNUMBER";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWTOOLSVERSIONLABEL 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Tools Version";
					case 1: return "Tools Version";
					default: return "UI_UNITYPLUGIN_WINDOWTOOLSVERSIONLABEL";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWTOOLSPORT 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Tools Port";
					case 1: return "Tools Port";
					default: return "UI_UNITYPLUGIN_WINDOWTOOLSPORT";
				}
			}
		}
		public static string UI_UNITYPLUGIN_SCANASSETSKIPPED 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "TextAsset '{0}' is skipped because of validation error.";
					case 1: return "TextAsset '{0}' is skipped because of validation error.";
					default: return "UI_UNITYPLUGIN_SCANASSETSKIPPED";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWINFOGROUP 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Info:";
					case 1: return "Info:";
					default: return "UI_UNITYPLUGIN_WINDOWINFOGROUP";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWREGISTERBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Register";
					case 1: return "Register";
					default: return "UI_UNITYPLUGIN_WINDOWREGISTERBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWSIGNINBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Sign In";
					case 1: return "Sign In";
					default: return "UI_UNITYPLUGIN_WINDOWSIGNINBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENUGENERATECODEANDASSETS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Generate Code and Assets";
					case 1: return "Generate Code and Assets";
					default: return "UI_UNITYPLUGIN_MENUGENERATECODEANDASSETS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCHECKINGMONO 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Checking Mono...";
					case 1: return "Checking Mono...";
					default: return "UI_UNITYPLUGIN_WINDOWCHECKINGMONO";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCHECKRESULTMISSINGTOOLS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Missing Tools!";
					case 1: return "Missing Tools!";
					default: return "UI_UNITYPLUGIN_WINDOWCHECKRESULTMISSINGTOOLS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWACTIONSGROUP 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Actions";
					case 1: return "Actions";
					default: return "UI_UNITYPLUGIN_WINDOWACTIONSGROUP";
				}
			}
		}
		public static string UI_UNITYPLUGIN_GENERATECODEFOR 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Running generation tools for {0}";
					case 1: return "Running generation tools for {0}";
					default: return "UI_UNITYPLUGIN_GENERATECODEFOR";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWSETTINGSGROUP 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Settings:";
					case 1: return "Settings:";
					default: return "UI_UNITYPLUGIN_WINDOWSETTINGSGROUP";
				}
			}
		}
		public static string UI_UNITYPLUGIN_PROGRESSCURRENTTARGETIS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Current target is {0}";
					case 1: return "Current target is {0}";
					default: return "UI_UNITYPLUGIN_PROGRESSCURRENTTARGETIS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWEXPIRATION 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Expiration";
					case 1: return "Expiration";
					default: return "UI_UNITYPLUGIN_WINDOWEXPIRATION";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWBROWSER 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Browser";
					case 1: return "Browser";
					default: return "UI_UNITYPLUGIN_WINDOWBROWSER";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENURECOVERYSCRIPTS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Recovery Scripts";
					case 1: return "Recovery Scripts";
					default: return "UI_UNITYPLUGIN_MENURECOVERYSCRIPTS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWATTACHFILECHECKBOX 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Attach '{0}' file ({1:F2}Mb)";
					case 1: return "Attach '{0}' file ({1:F2}Mb)";
					default: return "UI_UNITYPLUGIN_WINDOWATTACHFILECHECKBOX";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENUSCANFORNEWASSETS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Scan for new Assets";
					case 1: return "Scan for new Assets";
					default: return "UI_UNITYPLUGIN_MENUSCANFORNEWASSETS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWIMPORTLICENSEBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Import";
					case 1: return "Import";
					default: return "UI_UNITYPLUGIN_WINDOWIMPORTLICENSEBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWBROWSEBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Browse...";
					case 1: return "Browse...";
					default: return "UI_UNITYPLUGIN_WINDOWBROWSEBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCODELINEENDINGS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Line endings";
					case 1: return "Line endings";
					default: return "UI_UNITYPLUGIN_WINDOWCODELINEENDINGS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCODEGAMEDATACLASSNAME 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Code GameData class";
					case 1: return "Code GameData class";
					default: return "UI_UNITYPLUGIN_WINDOWCODEGAMEDATACLASSNAME";
				}
			}
		}
		public static string UI_UNITYPLUGIN_UPDATEAVAILABLETITLE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Update Charon";
					case 1: return "Update Charon";
					default: return "UI_UNITYPLUGIN_UPDATEAVAILABLETITLE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWORGANIZATIONID 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Organization Id";
					case 1: return "Organization Id";
					default: return "UI_UNITYPLUGIN_WINDOWORGANIZATIONID";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENUVERBOSELOGS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Verbose Logs";
					case 1: return "Verbose Logs";
					default: return "UI_UNITYPLUGIN_MENUVERBOSELOGS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCODEIDENTATION 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Identation";
					case 1: return "Identation";
					default: return "UI_UNITYPLUGIN_WINDOWCODEIDENTATION";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWTYPELABEL 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Type";
					case 1: return "Type";
					default: return "UI_UNITYPLUGIN_WINDOWTYPELABEL";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWDOWNLOADMONOBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Download Mono";
					case 1: return "Download Mono";
					default: return "UI_UNITYPLUGIN_WINDOWDOWNLOADMONOBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_SPECIFYEXTRACTIONLOCTITLE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Specify extraction location...";
					case 1: return "Specify extraction location...";
					default: return "UI_UNITYPLUGIN_SPECIFYEXTRACTIONLOCTITLE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWRECIPIENTID 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Recipient Id";
					case 1: return "Recipient Id";
					default: return "UI_UNITYPLUGIN_WINDOWRECIPIENTID";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENUVALIDATEASSETS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Validate Assets";
					case 1: return "Validate Assets";
					default: return "UI_UNITYPLUGIN_MENUVALIDATEASSETS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_T4EXTRACTIONCOMPLETE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "T4 Template extracted successfully.";
					case 1: return "T4 Template extracted successfully.";
					default: return "UI_UNITYPLUGIN_T4EXTRACTIONCOMPLETE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCHECKINGMONOFAILED 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Mono doesn't return any version information. Exit code: {0}";
					case 1: return "Mono doesn't return any version information. Exit code: {0}";
					default: return "UI_UNITYPLUGIN_WINDOWCHECKINGMONOFAILED";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWRUNTIMEVERSIONUNKNOWN 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Unknown";
					case 1: return "Unknown";
					default: return "UI_UNITYPLUGIN_WINDOWRUNTIMEVERSIONUNKNOWN";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWEDITORLAUNCHINGEXECUTABLE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Launching editor's executable...";
					case 1: return "Launching editor's executable...";
					default: return "UI_UNITYPLUGIN_WINDOWEDITORLAUNCHINGEXECUTABLE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWRESUMECODERECOMPILATION 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Resume code re-compilation?";
					case 1: return "Resume code re-compilation?";
					default: return "UI_UNITYPLUGIN_WINDOWRESUMECODERECOMPILATION";
				}
			}
		}
		public static string UI_UNITYPLUGIN_GENERATEREFORMATCODE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Re-formatting generated code for {0}";
					case 1: return "Re-formatting generated code for {0}";
					default: return "UI_UNITYPLUGIN_GENERATEREFORMATCODE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_GENERATEASSETCANTFINDGAMEDATACLASS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Asset generation failed: unable to find GameData's type in CSharp assemblies. Make sure there is no compilation errors.";
					case 1: return "Asset generation failed: unable to find GameData's type in CSharp assemblies. Make sure there is no compilation errors.";
					default: return "UI_UNITYPLUGIN_GENERATEASSETCANTFINDGAMEDATACLASS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWVALIDATIONPREFIX 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Validation:";
					case 1: return "Validation:";
					default: return "UI_UNITYPLUGIN_WINDOWVALIDATIONPREFIX";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWBACKBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Back";
					case 1: return "Back";
					default: return "UI_UNITYPLUGIN_WINDOWBACKBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWRETYPEPASSWORD 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Re-Type Password";
					case 1: return "Re-Type Password";
					default: return "UI_UNITYPLUGIN_WINDOWRETYPEPASSWORD";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWPASSWORD 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Password";
					case 1: return "Password";
					default: return "UI_UNITYPLUGIN_WINDOWPASSWORD";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENUSCANNINGASSETS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Scanning Assets...";
					case 1: return "Scanning Assets...";
					default: return "UI_UNITYPLUGIN_MENUSCANNINGASSETS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWEDITOROPENINGBROWSER 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Opening brower...";
					case 1: return "Opening brower...";
					default: return "UI_UNITYPLUGIN_WINDOWEDITOROPENINGBROWSER";
				}
			}
		}
		public static string UI_UNITYPLUGIN_SELECTFILETOATTACHTITLE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Select file to attach";
					case 1: return "Select file to attach";
					default: return "UI_UNITYPLUGIN_SELECTFILETOATTACHTITLE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_SCANRUNVALIDATIONFOR 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Running validation tool for {0}";
					case 1: return "Running validation tool for {0}";
					default: return "UI_UNITYPLUGIN_SCANRUNVALIDATIONFOR";
				}
			}
		}
		public static string UI_UNITYPLUGIN_VALIDATINGASSETS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Validating Assets...";
					case 1: return "Validating Assets...";
					default: return "UI_UNITYPLUGIN_VALIDATINGASSETS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWREPORTTHANKSMESSAGE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Thank you for your feedback!";
					case 1: return "Thank you for your feedback!";
					default: return "UI_UNITYPLUGIN_WINDOWREPORTTHANKSMESSAGE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_ATTACHFILEBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Attach...";
					case 1: return "Attach...";
					default: return "UI_UNITYPLUGIN_ATTACHFILEBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_DOWNLOADBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Update (~12 MiB)";
					case 1: return "Update (~12 MiB)";
					default: return "UI_UNITYPLUGIN_DOWNLOADBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_GENERATEFAILEDDUEERRORS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Code generation for '{0}' failed due errors: {1}.";
					case 1: return "Code generation for '{0}' failed due errors: {1}.";
					default: return "UI_UNITYPLUGIN_GENERATEFAILEDDUEERRORS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWFAILEDTOSTARTEDITOR 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Failed to start Game Data editor due errors:";
					case 1: return "Failed to start Game Data editor due errors:";
					default: return "UI_UNITYPLUGIN_WINDOWFAILEDTOSTARTEDITOR";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWGENERATIONPREFIX 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Generation:";
					case 1: return "Generation:";
					default: return "UI_UNITYPLUGIN_WINDOWGENERATIONPREFIX";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWREPORTERLABEL 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Your E-Mail or Name";
					case 1: return "Your E-Mail or Name";
					default: return "UI_UNITYPLUGIN_WINDOWREPORTERLABEL";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWFIRSTNAME 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "First Name";
					case 1: return "First Name";
					default: return "UI_UNITYPLUGIN_WINDOWFIRSTNAME";
				}
			}
		}
		public static string UI_UNITYPLUGIN_PROGRESSDONE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Done";
					case 1: return "Done";
					default: return "UI_UNITYPLUGIN_PROGRESSDONE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_VALIDATEFAILEDDUEERRORS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Validation of '{0}' has failed due errors: {1}.";
					case 1: return "Validation of '{0}' has failed due errors: {1}.";
					default: return "UI_UNITYPLUGIN_VALIDATEFAILEDDUEERRORS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWEDITORCHECKINGRUNTIME 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Checking runtime and executable...";
					case 1: return "Checking runtime and executable...";
					default: return "UI_UNITYPLUGIN_WINDOWEDITORCHECKINGRUNTIME";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWFAILEDTOSTARTEDITORTIMEOUT 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Failed to start Game Data editor due errors: Aborted by timeout.";
					case 1: return "Failed to start Game Data editor due errors: Aborted by timeout.";
					default: return "UI_UNITYPLUGIN_WINDOWFAILEDTOSTARTEDITORTIMEOUT";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWEDITORCHECKINGLICENSE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Checking license...";
					case 1: return "Checking license...";
					default: return "UI_UNITYPLUGIN_WINDOWEDITORCHECKINGLICENSE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWDOWNLOADDOTNET 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "c) Or you can download  .NET 4.5 by pressing 'Download .NET 4.5'.";
					case 1: return "c) Or you can download  .NET 4.5 by pressing 'Download .NET 4.5'.";
					default: return "UI_UNITYPLUGIN_WINDOWDOWNLOADDOTNET";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWDOWNLOADDOTNETBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Download .NET 4.5";
					case 1: return "Download .NET 4.5";
					default: return "UI_UNITYPLUGIN_WINDOWDOWNLOADDOTNETBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_PROGRESSGETTINGAVAILABLEBUILDS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Getting list of public releases...";
					case 1: return "Getting list of public releases...";
					default: return "UI_UNITYPLUGIN_PROGRESSGETTINGAVAILABLEBUILDS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENUTROUBLESHOOTING 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Troubleshooting";
					case 1: return "Troubleshooting";
					default: return "UI_UNITYPLUGIN_MENUTROUBLESHOOTING";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENUREPORTISSUE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Report an Issue...";
					case 1: return "Report an Issue...";
					default: return "UI_UNITYPLUGIN_MENUREPORTISSUE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_VALIDATERUNFOR 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Running validation tool for {0}";
					case 1: return "Running validation tool for {0}";
					default: return "UI_UNITYPLUGIN_VALIDATERUNFOR";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWABOUTCHARONTITLE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Charon: Game Data Editor";
					case 1: return "Charon: Game Data Editor";
					default: return "UI_UNITYPLUGIN_WINDOWABOUTCHARONTITLE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWEDITORTITLE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Editor";
					case 1: return "Editor";
					default: return "UI_UNITYPLUGIN_WINDOWEDITORTITLE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWLOADINGFAILEDWITHERROR 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Loading failed with error: {0}";
					case 1: return "Loading failed with error: {0}";
					default: return "UI_UNITYPLUGIN_WINDOWLOADINGFAILEDWITHERROR";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCODEOPTIONS 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Options";
					case 1: return "Options";
					default: return "UI_UNITYPLUGIN_WINDOWCODEOPTIONS";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWTYPE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Type";
					case 1: return "Type";
					default: return "UI_UNITYPLUGIN_WINDOWTYPE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_T4EXTRACTIONFAILED 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "T4 Template extraction failed due errors: {0}";
					case 1: return "T4 Template extraction failed due errors: {0}";
					default: return "UI_UNITYPLUGIN_T4EXTRACTIONFAILED";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWRECHECKBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Re-check";
					case 1: return "Re-check";
					default: return "UI_UNITYPLUGIN_WINDOWRECHECKBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWRELOADBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Reload";
					case 1: return "Reload";
					default: return "UI_UNITYPLUGIN_WINDOWRELOADBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_VALIDATECOMPLETE 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Validation of '{0}' is complete. Result: {1}, Errors: {2}.";
					case 1: return "Validation of '{0}' is complete. Result: {1}, Errors: {2}.";
					default: return "UI_UNITYPLUGIN_VALIDATECOMPLETE";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWEMAIL 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Email";
					case 1: return "Email";
					default: return "UI_UNITYPLUGIN_WINDOWEMAIL";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWLICENSEKEY 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "License Key";
					case 1: return "License Key";
					default: return "UI_UNITYPLUGIN_WINDOWLICENSEKEY";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWTOOLSPATH 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Tools Path";
					case 1: return "Tools Path";
					default: return "UI_UNITYPLUGIN_WINDOWTOOLSPATH";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCANCELBUTTON 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Cancel";
					case 1: return "Cancel";
					default: return "UI_UNITYPLUGIN_WINDOWCANCELBUTTON";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWORGANIZATION 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Organization";
					case 1: return "Organization";
					default: return "UI_UNITYPLUGIN_WINDOWORGANIZATION";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCODEGENERATOR 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Code Generator";
					case 1: return "Code Generator";
					default: return "UI_UNITYPLUGIN_WINDOWCODEGENERATOR";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWRUNTIMEVERSION 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Runtime Version";
					case 1: return "Runtime Version";
					default: return "UI_UNITYPLUGIN_WINDOWRUNTIMEVERSION";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWRUNTIMEVERSIONERROR 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Error";
					case 1: return "Error";
					default: return "UI_UNITYPLUGIN_WINDOWRUNTIMEVERSIONERROR";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENUCHECKUPDATES 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Check for Updates";
					case 1: return "Check for Updates";
					default: return "UI_UNITYPLUGIN_MENUCHECKUPDATES";
				}
			}
		}
		public static string UI_UNITYPLUGIN_MENUDOCUMENTATION 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Documentation (website)";
					case 1: return "Documentation (website)";
					default: return "UI_UNITYPLUGIN_MENUDOCUMENTATION";
				}
			}
		}
		public static string UI_UNITYPLUGIN_WINDOWCODEENTRYCLASSNAME 
		{
			get 
			{
				switch (currentLanguageIdx)
				{
					case 0: return "Code Entry class";
					case 1: return "Code Entry class";
					default: return "UI_UNITYPLUGIN_WINDOWCODEENTRYCLASSNAME";
				}
			}
		}
	}
}

