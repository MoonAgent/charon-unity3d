






//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using GameDevWare.Dynamic.Expressions;
using System.Linq.Expressions;

namespace Assets
{

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class ItemTemplate : GameData.Document, IEquatable<ItemTemplate>, IComparable, IComparable<ItemTemplate>
	{
		private int hashCode;


		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private GameData.LocalizedString _DisplayName;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public GameData.LocalizedString _Localized_DisplayName
		{
			get { return this._DisplayName; }
			set { this.ThrowIfReadOnly(); this._DisplayName = value; }
		}

		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string DisplayName
		{
			get
			{
				if (this._DisplayName == null)
					return null;
				else
					return this._DisplayName.Value;
			}
		}



		private GameData.LocalizedString _Description;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public GameData.LocalizedString _Localized_Description
		{
			get { return this._Description; }
			set { this.ThrowIfReadOnly(); this._Description = value; }
		}

		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Description
		{
			get
			{
				if (this._Description == null)
					return null;
				else
					return this._Description.Value;
			}
		}



		private ItemType _Type;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public ItemType Type
		{
			get { return this._Type; }
			set { this.ThrowIfReadOnly(); this._Type = value; }
		}



		private Single? _Durability;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Single? Durability
		{
			get { return this._Durability; }
			set { this.ThrowIfReadOnly(); this._Durability = value; }
		}



		private ItemRarity _Rarity;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ItemRarity Rarity
		{
			get { return this._Rarity; }
			set { this.ThrowIfReadOnly(); this._Rarity = value; }
		}



		private ItemFlags _InitialFlags;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ItemFlags InitialFlags
		{
			get { return this._InitialFlags; }
			set { this.ThrowIfReadOnly(); this._InitialFlags = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


		}

		internal void SetLanguage(string language)
		{

			if (this._DisplayName != null)
				this._DisplayName.SetLanguage(language);

			if (this._Description != null)
				this._Description.SetLanguage(language);

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			if (this._DisplayName != null)
				this._DisplayName.SetReadOnly();

			if (this._Description != null)
				this._Description.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(ItemTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is ItemTemplate == false)
				return false;

			var other = (ItemTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._DisplayName, other._DisplayName)

				&& AreEqual(this._Description, other._Description)

				&& AreEqual(this._Type, other._Type)

				&& AreEqual(this._Durability, other._Durability)

				&& AreEqual(this._Rarity, other._Rarity)

				&& AreEqual(this._InitialFlags, other._InitialFlags)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as ItemTemplate);
		}

		public int CompareTo(ItemTemplate other)
		{
			if (other == null)
				return 1;

			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);

		}

		public static bool operator ==(ItemTemplate value1, ItemTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(ItemTemplate value1, ItemTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._DisplayName)

				+ GetHashCodeFor(this._Description)

				+ GetHashCodeFor(this._Type)

				+ GetHashCodeFor(this._Durability)

				+ GetHashCodeFor(this._Rarity)

				+ GetHashCodeFor(this._InitialFlags)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("DisplayName: ").Append(this.DisplayName).Append(", ");

				sb.Append("Description: ").Append(this.Description).Append(", ");

				sb.Append("Type: ").Append(this.Type).Append(", ");

				sb.Append("Durability: ").Append(this.Durability).Append(", ");

				sb.Append("Rarity: ").Append(this.Rarity).Append(", ");

				sb.Append("InitialFlags: ").Append(this.InitialFlags).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class Reward : GameData.Document, IEquatable<Reward>, IComparable, IComparable<Reward>
	{
		private int hashCode;


		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private GameData.Reference<ItemTemplate> _Item;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public GameData.Reference<ItemTemplate> _ReferenceTo_Item
		{
			get { return this._Item; }
			set { this.ThrowIfReadOnly(); this._Item = value; }
		}

		[NonSerialized]
		private ItemTemplate _ValueOfItem;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public ItemTemplate Item
		{
			get
			{
				if (this._Item == null)
					return null;
				else if (this.isReadOnly && this._ValueOfItem != null)
					return this._ValueOfItem;
				else if (this.isReadOnly)
					return this._ValueOfItem = GameData.Utils.Defererence(this._Item);
				else
					return GameData.Utils.Defererence(this._Item);
			}
		}



		private Int32 _QuantityMin;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 QuantityMin
		{
			get { return this._QuantityMin; }
			set { this.ThrowIfReadOnly(); this._QuantityMin = value; }
		}



		private Int32 _QuantityMax;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 QuantityMax
		{
			get { return this._QuantityMax; }
			set { this.ThrowIfReadOnly(); this._QuantityMax = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			if (this._Item != null)
			{
				this._Item.Resolve(refResolver);
			}

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Reward other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Reward == false)
				return false;

			var other = (Reward)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Item, other._Item)

				&& AreEqual(this._QuantityMin, other._QuantityMin)

				&& AreEqual(this._QuantityMax, other._QuantityMax)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Reward);
		}

		public int CompareTo(Reward other)
		{
			if (other == null)
				return 1;

			return this.Id.CompareTo(other.Id);

		}

		public static bool operator ==(Reward value1, Reward value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Reward value1, Reward value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Item)

				+ GetHashCodeFor(this._QuantityMin)

				+ GetHashCodeFor(this._QuantityMax)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Item: ").Append(this.Item).Append(", ");

				sb.Append("QuantityMin: ").Append(this.QuantityMin).Append(", ");

				sb.Append("QuantityMax: ").Append(this.QuantityMax).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class Requirement : GameData.Document, IEquatable<Requirement>, IComparable, IComparable<Requirement>
	{
		private int hashCode;


		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private GameData.Reference<ItemTemplate> _Item;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public GameData.Reference<ItemTemplate> _ReferenceTo_Item
		{
			get { return this._Item; }
			set { this.ThrowIfReadOnly(); this._Item = value; }
		}

		[NonSerialized]
		private ItemTemplate _ValueOfItem;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public ItemTemplate Item
		{
			get
			{
				if (this._Item == null)
					return null;
				else if (this.isReadOnly && this._ValueOfItem != null)
					return this._ValueOfItem;
				else if (this.isReadOnly)
					return this._ValueOfItem = GameData.Utils.Defererence(this._Item);
				else
					return GameData.Utils.Defererence(this._Item);
			}
		}



		private Int32 _Quantity;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Quantity
		{
			get { return this._Quantity; }
			set { this.ThrowIfReadOnly(); this._Quantity = value; }
		}



		private Boolean _IsConsumed;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Boolean IsConsumed
		{
			get { return this._IsConsumed; }
			set { this.ThrowIfReadOnly(); this._IsConsumed = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			if (this._Item != null)
			{
				this._Item.Resolve(refResolver);
			}

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Requirement other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Requirement == false)
				return false;

			var other = (Requirement)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Item, other._Item)

				&& AreEqual(this._Quantity, other._Quantity)

				&& AreEqual(this._IsConsumed, other._IsConsumed)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Requirement);
		}

		public int CompareTo(Requirement other)
		{
			if (other == null)
				return 1;

			return this.Id.CompareTo(other.Id);

		}

		public static bool operator ==(Requirement value1, Requirement value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Requirement value1, Requirement value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Item)

				+ GetHashCodeFor(this._Quantity)

				+ GetHashCodeFor(this._IsConsumed)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Item: ").Append(this.Item).Append(", ");

				sb.Append("Quantity: ").Append(this.Quantity).Append(", ");

				sb.Append("IsConsumed: ").Append(this.IsConsumed).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class StageTemplate : GameData.Document, IEquatable<StageTemplate>, IComparable, IComparable<StageTemplate>
	{
		private int hashCode;


		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private GameData.LocalizedString _Name;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public GameData.LocalizedString _Localized_Name
		{
			get { return this._Name; }
			set { this.ThrowIfReadOnly(); this._Name = value; }
		}

		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Name
		{
			get
			{
				if (this._Name == null)
					return null;
				else
					return this._Name.Value;
			}
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


		}

		internal void SetLanguage(string language)
		{

			if (this._Name != null)
				this._Name.SetLanguage(language);

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			if (this._Name != null)
				this._Name.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(StageTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is StageTemplate == false)
				return false;

			var other = (StageTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Name, other._Name)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as StageTemplate);
		}

		public int CompareTo(StageTemplate other)
		{
			if (other == null)
				return 1;

			return this.Id.CompareTo(other.Id);

		}

		public static bool operator ==(StageTemplate value1, StageTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(StageTemplate value1, StageTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Name)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Name: ").Append(this.Name).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class AssignmentTemplate : GameData.Document, IEquatable<AssignmentTemplate>, IComparable, IComparable<AssignmentTemplate>
	{
		private int hashCode;


		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private AssignmentType _Type;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public AssignmentType Type
		{
			get { return this._Type; }
			set { this.ThrowIfReadOnly(); this._Type = value; }
		}



		private ReadOnlyCollection<Requirement> _ItemRequirements;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public ReadOnlyCollection<Requirement> ItemRequirements
		{
			get { return this._ItemRequirements; }
			set { this.ThrowIfReadOnly(); this._ItemRequirements = value; }
		}



		private ReadOnlyCollection<AssignmentResolution> _Resolutions;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ReadOnlyCollection<AssignmentResolution> Resolutions
		{
			get { return this._Resolutions; }
			set { this.ThrowIfReadOnly(); this._Resolutions = value; }
		}



		private TimeSpan _ExpirationPeriod;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public TimeSpan ExpirationPeriod
		{
			get { return this._ExpirationPeriod; }
			set { this.ThrowIfReadOnly(); this._ExpirationPeriod = value; }
		}



		private Restrictions _SpawnRestrictions;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Restrictions SpawnRestrictions
		{
			get { return this._SpawnRestrictions; }
			set { this.ThrowIfReadOnly(); this._SpawnRestrictions = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


			if (this._ItemRequirements == null)
				this._ItemRequirements = GameData.Utils.Empty(this._ItemRequirements);

			foreach(var item in this._ItemRequirements)
			{
				visit.Visit(item);
			}

			if (this._Resolutions == null)
				this._Resolutions = GameData.Utils.Empty(this._Resolutions);

			foreach(var item in this._Resolutions)
			{
				visit.Visit(item);
			}

			if (this._SpawnRestrictions != null)
				visit.Visit(this._SpawnRestrictions);


		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(AssignmentTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is AssignmentTemplate == false)
				return false;

			var other = (AssignmentTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Type, other._Type)

				&& AreEqual(this._ItemRequirements, other._ItemRequirements)

				&& AreEqual(this._Resolutions, other._Resolutions)

				&& AreEqual(this._ExpirationPeriod, other._ExpirationPeriod)

				&& AreEqual(this._SpawnRestrictions, other._SpawnRestrictions)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as AssignmentTemplate);
		}

		public int CompareTo(AssignmentTemplate other)
		{
			if (other == null)
				return 1;

			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);

		}

		public static bool operator ==(AssignmentTemplate value1, AssignmentTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(AssignmentTemplate value1, AssignmentTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Type)

				+ GetHashCodeFor(this._ItemRequirements)

				+ GetHashCodeFor(this._Resolutions)

				+ GetHashCodeFor(this._ExpirationPeriod)

				+ GetHashCodeFor(this._SpawnRestrictions)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Type: ").Append(this.Type).Append(", ");

				sb.Append("ItemRequirements: ").Append(this.ItemRequirements).Append(", ");

				sb.Append("Resolutions: ").Append(this.Resolutions).Append(", ");

				sb.Append("ExpirationPeriod: ").Append(this.ExpirationPeriod).Append(", ");

				sb.Append("SpawnRestrictions: ").Append(this.SpawnRestrictions).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class AssignmentResolution : GameData.Document, IEquatable<AssignmentResolution>, IComparable, IComparable<AssignmentResolution>
	{
		private int hashCode;


		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private Single _RollChance;
		/// <summary>
		/// Roll chance relative to other resolutions. Not null.
		/// </summary>
		
		public Single RollChance
		{
			get { return this._RollChance; }
			set { this.ThrowIfReadOnly(); this._RollChance = value; }
		}



		private ReadOnlyCollection<Reward> _RewardItems;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public ReadOnlyCollection<Reward> RewardItems
		{
			get { return this._RewardItems; }
			set { this.ThrowIfReadOnly(); this._RewardItems = value; }
		}



		private ReadOnlyCollection<Reward> _BonusRewardItems;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public ReadOnlyCollection<Reward> BonusRewardItems
		{
			get { return this._BonusRewardItems; }
			set { this.ThrowIfReadOnly(); this._BonusRewardItems = value; }
		}



		private Boolean _IsBadResolution;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Boolean IsBadResolution
		{
			get { return this._IsBadResolution; }
			set { this.ThrowIfReadOnly(); this._IsBadResolution = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


			if (this._RewardItems == null)
				this._RewardItems = GameData.Utils.Empty(this._RewardItems);

			foreach(var item in this._RewardItems)
			{
				visit.Visit(item);
			}

			if (this._BonusRewardItems == null)
				this._BonusRewardItems = GameData.Utils.Empty(this._BonusRewardItems);

			foreach(var item in this._BonusRewardItems)
			{
				visit.Visit(item);
			}

		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(AssignmentResolution other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is AssignmentResolution == false)
				return false;

			var other = (AssignmentResolution)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._RollChance, other._RollChance)

				&& AreEqual(this._RewardItems, other._RewardItems)

				&& AreEqual(this._BonusRewardItems, other._BonusRewardItems)

				&& AreEqual(this._IsBadResolution, other._IsBadResolution)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as AssignmentResolution);
		}

		public int CompareTo(AssignmentResolution other)
		{
			if (other == null)
				return 1;

			return this.Id.CompareTo(other.Id);

		}

		public static bool operator ==(AssignmentResolution value1, AssignmentResolution value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(AssignmentResolution value1, AssignmentResolution value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._RollChance)

				+ GetHashCodeFor(this._RewardItems)

				+ GetHashCodeFor(this._BonusRewardItems)

				+ GetHashCodeFor(this._IsBadResolution)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("RollChance: ").Append(this.RollChance).Append(", ");

				sb.Append("RewardItems: ").Append(this.RewardItems).Append(", ");

				sb.Append("BonusRewardItems: ").Append(this.BonusRewardItems).Append(", ");

				sb.Append("IsBadResolution: ").Append(this.IsBadResolution).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class CashPointTemplate : GameData.Document, IEquatable<CashPointTemplate>, IComparable, IComparable<CashPointTemplate>
	{
		private int hashCode;


		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private CashPointType _Type;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public CashPointType Type
		{
			get { return this._Type; }
			set { this.ThrowIfReadOnly(); this._Type = value; }
		}



		private Int32 _SpawnOrder;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 SpawnOrder
		{
			get { return this._SpawnOrder; }
			set { this.ThrowIfReadOnly(); this._SpawnOrder = value; }
		}



		private TimeSpan _ProductionPeriod;
		/// <summary>
		/// Time to produce cash.. Not null.
		/// </summary>
		
		public TimeSpan ProductionPeriod
		{
			get { return this._ProductionPeriod; }
			set { this.ThrowIfReadOnly(); this._ProductionPeriod = value; }
		}



		private Int32 _ProductionAmount;
		/// <summary>
		/// Amount of produced cash . Not null.
		/// </summary>
		
		public Int32 ProductionAmount
		{
			get { return this._ProductionAmount; }
			set { this.ThrowIfReadOnly(); this._ProductionAmount = value; }
		}



		private Restrictions _SpawnRestrictions;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Restrictions SpawnRestrictions
		{
			get { return this._SpawnRestrictions; }
			set { this.ThrowIfReadOnly(); this._SpawnRestrictions = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


			if (this._SpawnRestrictions != null)
				visit.Visit(this._SpawnRestrictions);


		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(CashPointTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is CashPointTemplate == false)
				return false;

			var other = (CashPointTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Type, other._Type)

				&& AreEqual(this._SpawnOrder, other._SpawnOrder)

				&& AreEqual(this._ProductionPeriod, other._ProductionPeriod)

				&& AreEqual(this._ProductionAmount, other._ProductionAmount)

				&& AreEqual(this._SpawnRestrictions, other._SpawnRestrictions)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as CashPointTemplate);
		}

		public int CompareTo(CashPointTemplate other)
		{
			if (other == null)
				return 1;

			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);

		}

		public static bool operator ==(CashPointTemplate value1, CashPointTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(CashPointTemplate value1, CashPointTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Type)

				+ GetHashCodeFor(this._SpawnOrder)

				+ GetHashCodeFor(this._ProductionPeriod)

				+ GetHashCodeFor(this._ProductionAmount)

				+ GetHashCodeFor(this._SpawnRestrictions)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Type: ").Append(this.Type).Append(", ");

				sb.Append("SpawnOrder: ").Append(this.SpawnOrder).Append(", ");

				sb.Append("ProductionPeriod: ").Append(this.ProductionPeriod).Append(", ");

				sb.Append("ProductionAmount: ").Append(this.ProductionAmount).Append(", ");

				sb.Append("SpawnRestrictions: ").Append(this.SpawnRestrictions).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class Restrictions : GameData.Document, IEquatable<Restrictions>, IComparable, IComparable<Restrictions>
	{
		private int hashCode;


		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private GameData.Reference<StageTemplate> _StageMin;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public GameData.Reference<StageTemplate> _ReferenceTo_StageMin
		{
			get { return this._StageMin; }
			set { this.ThrowIfReadOnly(); this._StageMin = value; }
		}

		[NonSerialized]
		private StageTemplate _ValueOfStageMin;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		public StageTemplate StageMin
		{
			get
			{
				if (this._StageMin == null)
					return null;
				else if (this.isReadOnly && this._ValueOfStageMin != null)
					return this._ValueOfStageMin;
				else if (this.isReadOnly)
					return this._ValueOfStageMin = GameData.Utils.Defererence(this._StageMin);
				else
					return GameData.Utils.Defererence(this._StageMin);
			}
		}



		private GameData.Reference<StageTemplate> _StageMax;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public GameData.Reference<StageTemplate> _ReferenceTo_StageMax
		{
			get { return this._StageMax; }
			set { this.ThrowIfReadOnly(); this._StageMax = value; }
		}

		[NonSerialized]
		private StageTemplate _ValueOfStageMax;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		public StageTemplate StageMax
		{
			get
			{
				if (this._StageMax == null)
					return null;
				else if (this.isReadOnly && this._ValueOfStageMax != null)
					return this._ValueOfStageMax;
				else if (this.isReadOnly)
					return this._ValueOfStageMax = GameData.Utils.Defererence(this._StageMax);
				else
					return GameData.Utils.Defererence(this._StageMax);
			}
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			if (this._StageMin != null)
			{
				this._StageMin.Resolve(refResolver);
			}

			if (this._StageMax != null)
			{
				this._StageMax.Resolve(refResolver);
			}

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Restrictions other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Restrictions == false)
				return false;

			var other = (Restrictions)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._StageMin, other._StageMin)

				&& AreEqual(this._StageMax, other._StageMax)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Restrictions);
		}

		public int CompareTo(Restrictions other)
		{
			if (other == null)
				return 1;

			return this.Id.CompareTo(other.Id);

		}

		public static bool operator ==(Restrictions value1, Restrictions value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Restrictions value1, Restrictions value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._StageMin)

				+ GetHashCodeFor(this._StageMax)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("StageMin: ").Append(this.StageMin).Append(", ");

				sb.Append("StageMax: ").Append(this.StageMax).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class Global : GameData.Document, IEquatable<Global>, IComparable, IComparable<Global>
	{
		private int hashCode;


		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private String _GameDataVersion;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String GameDataVersion
		{
			get { return this._GameDataVersion; }
			set { this.ThrowIfReadOnly(); this._GameDataVersion = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Global other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Global == false)
				return false;

			var other = (Global)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._GameDataVersion, other._GameDataVersion)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Global);
		}

		public int CompareTo(Global other)
		{
			if (other == null)
				return 1;

			return this.Id.CompareTo(other.Id);

		}

		public static bool operator ==(Global value1, Global value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Global value1, Global value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._GameDataVersion)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("GameDataVersion: ").Append(this.GameDataVersion).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class GunShopLot : GameData.Document, IEquatable<GunShopLot>, IComparable, IComparable<GunShopLot>
	{
		private int hashCode;


		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private GameData.Reference<ItemTemplate> _Item;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public GameData.Reference<ItemTemplate> _ReferenceTo_Item
		{
			get { return this._Item; }
			set { this.ThrowIfReadOnly(); this._Item = value; }
		}

		[NonSerialized]
		private ItemTemplate _ValueOfItem;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public ItemTemplate Item
		{
			get
			{
				if (this._Item == null)
					return null;
				else if (this.isReadOnly && this._ValueOfItem != null)
					return this._ValueOfItem;
				else if (this.isReadOnly)
					return this._ValueOfItem = GameData.Utils.Defererence(this._Item);
				else
					return GameData.Utils.Defererence(this._Item);
			}
		}



		private Int32 _Quantity;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Quantity
		{
			get { return this._Quantity; }
			set { this.ThrowIfReadOnly(); this._Quantity = value; }
		}



		private Requirement _Cost;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Requirement Cost
		{
			get { return this._Cost; }
			set { this.ThrowIfReadOnly(); this._Cost = value; }
		}



		private Restrictions _Restrictions;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Restrictions Restrictions
		{
			get { return this._Restrictions; }
			set { this.ThrowIfReadOnly(); this._Restrictions = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			if (this._Item != null)
			{
				this._Item.Resolve(refResolver);
			}

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


			if (this._Cost != null)
				visit.Visit(this._Cost);


			if (this._Restrictions != null)
				visit.Visit(this._Restrictions);


		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(GunShopLot other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is GunShopLot == false)
				return false;

			var other = (GunShopLot)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Item, other._Item)

				&& AreEqual(this._Quantity, other._Quantity)

				&& AreEqual(this._Cost, other._Cost)

				&& AreEqual(this._Restrictions, other._Restrictions)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as GunShopLot);
		}

		public int CompareTo(GunShopLot other)
		{
			if (other == null)
				return 1;

			return this.Id.CompareTo(other.Id);

		}

		public static bool operator ==(GunShopLot value1, GunShopLot value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(GunShopLot value1, GunShopLot value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Item)

				+ GetHashCodeFor(this._Quantity)

				+ GetHashCodeFor(this._Cost)

				+ GetHashCodeFor(this._Restrictions)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Item: ").Append(this.Item).Append(", ");

				sb.Append("Quantity: ").Append(this.Quantity).Append(", ");

				sb.Append("Cost: ").Append(this.Cost).Append(", ");

				sb.Append("Restrictions: ").Append(this.Restrictions).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class TrainingTemplate : GameData.Document, IEquatable<TrainingTemplate>, IComparable, IComparable<TrainingTemplate>
	{
		private int hashCode;


		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private WeaponType _WeaponType;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public WeaponType WeaponType
		{
			get { return this._WeaponType; }
			set { this.ThrowIfReadOnly(); this._WeaponType = value; }
		}



		private Int32 _Level;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Level
		{
			get { return this._Level; }
			set { this.ThrowIfReadOnly(); this._Level = value; }
		}



		private Requirement _Cost;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Requirement Cost
		{
			get { return this._Cost; }
			set { this.ThrowIfReadOnly(); this._Cost = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


			if (this._Cost != null)
				visit.Visit(this._Cost);


		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(TrainingTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is TrainingTemplate == false)
				return false;

			var other = (TrainingTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._WeaponType, other._WeaponType)

				&& AreEqual(this._Level, other._Level)

				&& AreEqual(this._Cost, other._Cost)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as TrainingTemplate);
		}

		public int CompareTo(TrainingTemplate other)
		{
			if (other == null)
				return 1;

			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);

		}

		public static bool operator ==(TrainingTemplate value1, TrainingTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(TrainingTemplate value1, TrainingTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._WeaponType)

				+ GetHashCodeFor(this._Level)

				+ GetHashCodeFor(this._Cost)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("WeaponType: ").Append(this.WeaponType).Append(", ");

				sb.Append("Level: ").Append(this.Level).Append(", ");

				sb.Append("Cost: ").Append(this.Cost).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class AbilityTemplate : GameData.Document, IEquatable<AbilityTemplate>, IComparable, IComparable<AbilityTemplate>
	{
		private int hashCode;


		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private AbilityTemplateType _Type;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public AbilityTemplateType Type
		{
			get { return this._Type; }
			set { this.ThrowIfReadOnly(); this._Type = value; }
		}



		private Single _Parameter1;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Single Parameter1
		{
			get { return this._Parameter1; }
			set { this.ThrowIfReadOnly(); this._Parameter1 = value; }
		}



		private String _Parameter2;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public String Parameter2
		{
			get { return this._Parameter2; }
			set { this.ThrowIfReadOnly(); this._Parameter2 = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(AbilityTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is AbilityTemplate == false)
				return false;

			var other = (AbilityTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Type, other._Type)

				&& AreEqual(this._Parameter1, other._Parameter1)

				&& AreEqual(this._Parameter2, other._Parameter2)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as AbilityTemplate);
		}

		public int CompareTo(AbilityTemplate other)
		{
			if (other == null)
				return 1;

			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);

		}

		public static bool operator ==(AbilityTemplate value1, AbilityTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(AbilityTemplate value1, AbilityTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Type)

				+ GetHashCodeFor(this._Parameter1)

				+ GetHashCodeFor(this._Parameter2)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Type: ").Append(this.Type).Append(", ");

				sb.Append("Parameter1: ").Append(this.Parameter1).Append(", ");

				sb.Append("Parameter2: ").Append(this.Parameter2).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class CarTemplate : GameData.Document, IEquatable<CarTemplate>, IComparable, IComparable<CarTemplate>
	{
		private int hashCode;


		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private GameData.LocalizedString _DisplayName;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public GameData.LocalizedString _Localized_DisplayName
		{
			get { return this._DisplayName; }
			set { this.ThrowIfReadOnly(); this._DisplayName = value; }
		}

		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string DisplayName
		{
			get
			{
				if (this._DisplayName == null)
					return null;
				else
					return this._DisplayName.Value;
			}
		}



		private ReadOnlyCollection<AbilityRollTemplate> _Bonuses;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ReadOnlyCollection<AbilityRollTemplate> Bonuses
		{
			get { return this._Bonuses; }
			set { this.ThrowIfReadOnly(); this._Bonuses = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


			if (this._Bonuses == null)
				this._Bonuses = GameData.Utils.Empty(this._Bonuses);

			foreach(var item in this._Bonuses)
			{
				visit.Visit(item);
			}

		}

		internal void SetLanguage(string language)
		{

			if (this._DisplayName != null)
				this._DisplayName.SetLanguage(language);

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			if (this._DisplayName != null)
				this._DisplayName.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(CarTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is CarTemplate == false)
				return false;

			var other = (CarTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._DisplayName, other._DisplayName)

				&& AreEqual(this._Bonuses, other._Bonuses)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as CarTemplate);
		}

		public int CompareTo(CarTemplate other)
		{
			if (other == null)
				return 1;

			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);

		}

		public static bool operator ==(CarTemplate value1, CarTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(CarTemplate value1, CarTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._DisplayName)

				+ GetHashCodeFor(this._Bonuses)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("DisplayName: ").Append(this.DisplayName).Append(", ");

				sb.Append("Bonuses: ").Append(this.Bonuses).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class WeaponModificationTemplate : GameData.Document, IEquatable<WeaponModificationTemplate>, IComparable, IComparable<WeaponModificationTemplate>
	{
		private int hashCode;


		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private GameData.Reference<AbilityTemplate> _Ability;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public GameData.Reference<AbilityTemplate> _ReferenceTo_Ability
		{
			get { return this._Ability; }
			set { this.ThrowIfReadOnly(); this._Ability = value; }
		}

		[NonSerialized]
		private AbilityTemplate _ValueOfAbility;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public AbilityTemplate Ability
		{
			get
			{
				if (this._Ability == null)
					return null;
				else if (this.isReadOnly && this._ValueOfAbility != null)
					return this._ValueOfAbility;
				else if (this.isReadOnly)
					return this._ValueOfAbility = GameData.Utils.Defererence(this._Ability);
				else
					return GameData.Utils.Defererence(this._Ability);
			}
		}



		private Int32? _Parameter1Override;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Int32? Parameter1Override
		{
			get { return this._Parameter1Override; }
			set { this.ThrowIfReadOnly(); this._Parameter1Override = value; }
		}



		private Int32? _Parameter2Override;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Int32? Parameter2Override
		{
			get { return this._Parameter2Override; }
			set { this.ThrowIfReadOnly(); this._Parameter2Override = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			if (this._Ability != null)
			{
				this._Ability.Resolve(refResolver);
			}

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(WeaponModificationTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is WeaponModificationTemplate == false)
				return false;

			var other = (WeaponModificationTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Ability, other._Ability)

				&& AreEqual(this._Parameter1Override, other._Parameter1Override)

				&& AreEqual(this._Parameter2Override, other._Parameter2Override)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as WeaponModificationTemplate);
		}

		public int CompareTo(WeaponModificationTemplate other)
		{
			if (other == null)
				return 1;

			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);

		}

		public static bool operator ==(WeaponModificationTemplate value1, WeaponModificationTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(WeaponModificationTemplate value1, WeaponModificationTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Ability)

				+ GetHashCodeFor(this._Parameter1Override)

				+ GetHashCodeFor(this._Parameter2Override)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Ability: ").Append(this.Ability).Append(", ");

				sb.Append("Parameter1Override: ").Append(this.Parameter1Override).Append(", ");

				sb.Append("Parameter2Override: ").Append(this.Parameter2Override).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class WeaponTemplate : GameData.Document, IEquatable<WeaponTemplate>, IComparable, IComparable<WeaponTemplate>
	{
		private int hashCode;


		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private WeaponType _Type;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public WeaponType Type
		{
			get { return this._Type; }
			set { this.ThrowIfReadOnly(); this._Type = value; }
		}



		private Int32 _DamageHitPoints;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 DamageHitPoints
		{
			get { return this._DamageHitPoints; }
			set { this.ThrowIfReadOnly(); this._DamageHitPoints = value; }
		}



		private String _DamageArmorPoints;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public String DamageArmorPoints
		{
			get { return this._DamageArmorPoints; }
			set { this.ThrowIfReadOnly(); this._DamageArmorPoints = value; }
		}



		private Int32? _MagazineSize;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Int32? MagazineSize
		{
			get { return this._MagazineSize; }
			set { this.ThrowIfReadOnly(); this._MagazineSize = value; }
		}



		private Int32 _ModificationSlotCount;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 ModificationSlotCount
		{
			get { return this._ModificationSlotCount; }
			set { this.ThrowIfReadOnly(); this._ModificationSlotCount = value; }
		}



		private ReadOnlyCollection<WeaponModificationTemplate> _Modifications;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public ReadOnlyCollection<WeaponModificationTemplate> Modifications
		{
			get { return this._Modifications; }
			set { this.ThrowIfReadOnly(); this._Modifications = value; }
		}



		private WeaponAttackType _AttackZone;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public WeaponAttackType AttackZone
		{
			get { return this._AttackZone; }
			set { this.ThrowIfReadOnly(); this._AttackZone = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


			if (this._Modifications == null)
				this._Modifications = GameData.Utils.Empty(this._Modifications);

			foreach(var item in this._Modifications)
			{
				visit.Visit(item);
			}

		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(WeaponTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is WeaponTemplate == false)
				return false;

			var other = (WeaponTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Type, other._Type)

				&& AreEqual(this._DamageHitPoints, other._DamageHitPoints)

				&& AreEqual(this._DamageArmorPoints, other._DamageArmorPoints)

				&& AreEqual(this._MagazineSize, other._MagazineSize)

				&& AreEqual(this._ModificationSlotCount, other._ModificationSlotCount)

				&& AreEqual(this._Modifications, other._Modifications)

				&& AreEqual(this._AttackZone, other._AttackZone)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as WeaponTemplate);
		}

		public int CompareTo(WeaponTemplate other)
		{
			if (other == null)
				return 1;

			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);

		}

		public static bool operator ==(WeaponTemplate value1, WeaponTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(WeaponTemplate value1, WeaponTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Type)

				+ GetHashCodeFor(this._DamageHitPoints)

				+ GetHashCodeFor(this._DamageArmorPoints)

				+ GetHashCodeFor(this._MagazineSize)

				+ GetHashCodeFor(this._ModificationSlotCount)

				+ GetHashCodeFor(this._Modifications)

				+ GetHashCodeFor(this._AttackZone)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Type: ").Append(this.Type).Append(", ");

				sb.Append("DamageHitPoints: ").Append(this.DamageHitPoints).Append(", ");

				sb.Append("DamageArmorPoints: ").Append(this.DamageArmorPoints).Append(", ");

				sb.Append("MagazineSize: ").Append(this.MagazineSize).Append(", ");

				sb.Append("ModificationSlotCount: ").Append(this.ModificationSlotCount).Append(", ");

				sb.Append("Modifications: ").Append(this.Modifications).Append(", ");

				sb.Append("AttackZone: ").Append(this.AttackZone).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class UtilityItemBonusTemplate : GameData.Document, IEquatable<UtilityItemBonusTemplate>, IComparable, IComparable<UtilityItemBonusTemplate>
	{
		private int hashCode;


		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private GameData.Reference<AbilityTemplate> _Ability;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public GameData.Reference<AbilityTemplate> _ReferenceTo_Ability
		{
			get { return this._Ability; }
			set { this.ThrowIfReadOnly(); this._Ability = value; }
		}

		[NonSerialized]
		private AbilityTemplate _ValueOfAbility;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public AbilityTemplate Ability
		{
			get
			{
				if (this._Ability == null)
					return null;
				else if (this.isReadOnly && this._ValueOfAbility != null)
					return this._ValueOfAbility;
				else if (this.isReadOnly)
					return this._ValueOfAbility = GameData.Utils.Defererence(this._Ability);
				else
					return GameData.Utils.Defererence(this._Ability);
			}
		}



		private Int32? _Parameter1Override;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Int32? Parameter1Override
		{
			get { return this._Parameter1Override; }
			set { this.ThrowIfReadOnly(); this._Parameter1Override = value; }
		}



		private Int32? _Parameter2Override;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Int32? Parameter2Override
		{
			get { return this._Parameter2Override; }
			set { this.ThrowIfReadOnly(); this._Parameter2Override = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			if (this._Ability != null)
			{
				this._Ability.Resolve(refResolver);
			}

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(UtilityItemBonusTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is UtilityItemBonusTemplate == false)
				return false;

			var other = (UtilityItemBonusTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Ability, other._Ability)

				&& AreEqual(this._Parameter1Override, other._Parameter1Override)

				&& AreEqual(this._Parameter2Override, other._Parameter2Override)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as UtilityItemBonusTemplate);
		}

		public int CompareTo(UtilityItemBonusTemplate other)
		{
			if (other == null)
				return 1;

			return this.Id.CompareTo(other.Id);

		}

		public static bool operator ==(UtilityItemBonusTemplate value1, UtilityItemBonusTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(UtilityItemBonusTemplate value1, UtilityItemBonusTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Ability)

				+ GetHashCodeFor(this._Parameter1Override)

				+ GetHashCodeFor(this._Parameter2Override)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Ability: ").Append(this.Ability).Append(", ");

				sb.Append("Parameter1Override: ").Append(this.Parameter1Override).Append(", ");

				sb.Append("Parameter2Override: ").Append(this.Parameter2Override).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class UtilityItemTemplate : GameData.Document, IEquatable<UtilityItemTemplate>, IComparable, IComparable<UtilityItemTemplate>
	{
		private int hashCode;


		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private ItemSlot _Slot;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ItemSlot Slot
		{
			get { return this._Slot; }
			set { this.ThrowIfReadOnly(); this._Slot = value; }
		}



		private ReadOnlyCollection<UtilityItemBonusTemplate> _Bonuses;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ReadOnlyCollection<UtilityItemBonusTemplate> Bonuses
		{
			get { return this._Bonuses; }
			set { this.ThrowIfReadOnly(); this._Bonuses = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


			if (this._Bonuses == null)
				this._Bonuses = GameData.Utils.Empty(this._Bonuses);

			foreach(var item in this._Bonuses)
			{
				visit.Visit(item);
			}

		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(UtilityItemTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is UtilityItemTemplate == false)
				return false;

			var other = (UtilityItemTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Slot, other._Slot)

				&& AreEqual(this._Bonuses, other._Bonuses)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as UtilityItemTemplate);
		}

		public int CompareTo(UtilityItemTemplate other)
		{
			if (other == null)
				return 1;

			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);

		}

		public static bool operator ==(UtilityItemTemplate value1, UtilityItemTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(UtilityItemTemplate value1, UtilityItemTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Slot)

				+ GetHashCodeFor(this._Bonuses)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Slot: ").Append(this.Slot).Append(", ");

				sb.Append("Bonuses: ").Append(this.Bonuses).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class AbilityRollTemplate : GameData.Document, IEquatable<AbilityRollTemplate>, IComparable, IComparable<AbilityRollTemplate>
	{
		private int hashCode;


		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private GameData.Reference<AbilityTemplate> _Ability;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public GameData.Reference<AbilityTemplate> _ReferenceTo_Ability
		{
			get { return this._Ability; }
			set { this.ThrowIfReadOnly(); this._Ability = value; }
		}

		[NonSerialized]
		private AbilityTemplate _ValueOfAbility;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public AbilityTemplate Ability
		{
			get
			{
				if (this._Ability == null)
					return null;
				else if (this.isReadOnly && this._ValueOfAbility != null)
					return this._ValueOfAbility;
				else if (this.isReadOnly)
					return this._ValueOfAbility = GameData.Utils.Defererence(this._Ability);
				else
					return GameData.Utils.Defererence(this._Ability);
			}
		}



		private Single _RollChance;
		/// <summary>
		/// relative to other. Not null.
		/// </summary>
		
		public Single RollChance
		{
			get { return this._RollChance; }
			set { this.ThrowIfReadOnly(); this._RollChance = value; }
		}



		private Single? _Parameter1Min;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Single? Parameter1Min
		{
			get { return this._Parameter1Min; }
			set { this.ThrowIfReadOnly(); this._Parameter1Min = value; }
		}



		private Single? _Parameter1Max;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Single? Parameter1Max
		{
			get { return this._Parameter1Max; }
			set { this.ThrowIfReadOnly(); this._Parameter1Max = value; }
		}



		private Single? _Parameter2Min;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Single? Parameter2Min
		{
			get { return this._Parameter2Min; }
			set { this.ThrowIfReadOnly(); this._Parameter2Min = value; }
		}



		private Single? _Parameter2Max;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Single? Parameter2Max
		{
			get { return this._Parameter2Max; }
			set { this.ThrowIfReadOnly(); this._Parameter2Max = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			if (this._Ability != null)
			{
				this._Ability.Resolve(refResolver);
			}

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(AbilityRollTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is AbilityRollTemplate == false)
				return false;

			var other = (AbilityRollTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Ability, other._Ability)

				&& AreEqual(this._RollChance, other._RollChance)

				&& AreEqual(this._Parameter1Min, other._Parameter1Min)

				&& AreEqual(this._Parameter1Max, other._Parameter1Max)

				&& AreEqual(this._Parameter2Min, other._Parameter2Min)

				&& AreEqual(this._Parameter2Max, other._Parameter2Max)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as AbilityRollTemplate);
		}

		public int CompareTo(AbilityRollTemplate other)
		{
			if (other == null)
				return 1;

			return this.Id.CompareTo(other.Id);

		}

		public static bool operator ==(AbilityRollTemplate value1, AbilityRollTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(AbilityRollTemplate value1, AbilityRollTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Ability)

				+ GetHashCodeFor(this._RollChance)

				+ GetHashCodeFor(this._Parameter1Min)

				+ GetHashCodeFor(this._Parameter1Max)

				+ GetHashCodeFor(this._Parameter2Min)

				+ GetHashCodeFor(this._Parameter2Max)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Ability: ").Append(this.Ability).Append(", ");

				sb.Append("RollChance: ").Append(this.RollChance).Append(", ");

				sb.Append("Parameter1Min: ").Append(this.Parameter1Min).Append(", ");

				sb.Append("Parameter1Max: ").Append(this.Parameter1Max).Append(", ");

				sb.Append("Parameter2Min: ").Append(this.Parameter2Min).Append(", ");

				sb.Append("Parameter2Max: ").Append(this.Parameter2Max).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class PlaycardTemplate : GameData.Document, IEquatable<PlaycardTemplate>, IComparable, IComparable<PlaycardTemplate>
	{
		private int hashCode;


		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private ItemRarity _Rarity;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ItemRarity Rarity
		{
			get { return this._Rarity; }
			set { this.ThrowIfReadOnly(); this._Rarity = value; }
		}



		private Int32 _HitPoints;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 HitPoints
		{
			get { return this._HitPoints; }
			set { this.ThrowIfReadOnly(); this._HitPoints = value; }
		}



		private Int32 _Level;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Level
		{
			get { return this._Level; }
			set { this.ThrowIfReadOnly(); this._Level = value; }
		}



		private Single _Accuracy;
		/// <summary>
		/// от 0 до 100 в %. Not null.
		/// </summary>
		
		public Single Accuracy
		{
			get { return this._Accuracy; }
			set { this.ThrowIfReadOnly(); this._Accuracy = value; }
		}



		private Int32 _MeleeDamage;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 MeleeDamage
		{
			get { return this._MeleeDamage; }
			set { this.ThrowIfReadOnly(); this._MeleeDamage = value; }
		}



		private Single _MeleeCriticalStrikeChance;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Single MeleeCriticalStrikeChance
		{
			get { return this._MeleeCriticalStrikeChance; }
			set { this.ThrowIfReadOnly(); this._MeleeCriticalStrikeChance = value; }
		}



		private Single _RangeCriticalStrikeChance;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Single RangeCriticalStrikeChance
		{
			get { return this._RangeCriticalStrikeChance; }
			set { this.ThrowIfReadOnly(); this._RangeCriticalStrikeChance = value; }
		}



		private ReadOnlyCollection<AbilityRollTemplate> _Abilities;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public ReadOnlyCollection<AbilityRollTemplate> Abilities
		{
			get { return this._Abilities; }
			set { this.ThrowIfReadOnly(); this._Abilities = value; }
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


			if (this._Abilities == null)
				this._Abilities = GameData.Utils.Empty(this._Abilities);

			foreach(var item in this._Abilities)
			{
				visit.Visit(item);
			}

		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(PlaycardTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is PlaycardTemplate == false)
				return false;

			var other = (PlaycardTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Rarity, other._Rarity)

				&& AreEqual(this._HitPoints, other._HitPoints)

				&& AreEqual(this._Level, other._Level)

				&& AreEqual(this._Accuracy, other._Accuracy)

				&& AreEqual(this._MeleeDamage, other._MeleeDamage)

				&& AreEqual(this._MeleeCriticalStrikeChance, other._MeleeCriticalStrikeChance)

				&& AreEqual(this._RangeCriticalStrikeChance, other._RangeCriticalStrikeChance)

				&& AreEqual(this._Abilities, other._Abilities)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as PlaycardTemplate);
		}

		public int CompareTo(PlaycardTemplate other)
		{
			if (other == null)
				return 1;

			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);

		}

		public static bool operator ==(PlaycardTemplate value1, PlaycardTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(PlaycardTemplate value1, PlaycardTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Rarity)

				+ GetHashCodeFor(this._HitPoints)

				+ GetHashCodeFor(this._Level)

				+ GetHashCodeFor(this._Accuracy)

				+ GetHashCodeFor(this._MeleeDamage)

				+ GetHashCodeFor(this._MeleeCriticalStrikeChance)

				+ GetHashCodeFor(this._RangeCriticalStrikeChance)

				+ GetHashCodeFor(this._Abilities)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Rarity: ").Append(this.Rarity).Append(", ");

				sb.Append("HitPoints: ").Append(this.HitPoints).Append(", ");

				sb.Append("Level: ").Append(this.Level).Append(", ");

				sb.Append("Accuracy: ").Append(this.Accuracy).Append(", ");

				sb.Append("MeleeDamage: ").Append(this.MeleeDamage).Append(", ");

				sb.Append("MeleeCriticalStrikeChance: ").Append(this.MeleeCriticalStrikeChance).Append(", ");

				sb.Append("RangeCriticalStrikeChance: ").Append(this.RangeCriticalStrikeChance).Append(", ");

				sb.Append("Abilities: ").Append(this.Abilities).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	/// <summary>
	/// No description is provided.
	/// </summary>
	
	public sealed partial class NonPlayerPlaycardTemplate : GameData.Document, IEquatable<NonPlayerPlaycardTemplate>, IComparable, IComparable<NonPlayerPlaycardTemplate>
	{
		private int hashCode;


		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}



		private GameData.Reference<PlaycardTemplate> _Playcard;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public GameData.Reference<PlaycardTemplate> _ReferenceTo_Playcard
		{
			get { return this._Playcard; }
			set { this.ThrowIfReadOnly(); this._Playcard = value; }
		}

		[NonSerialized]
		private PlaycardTemplate _ValueOfPlaycard;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public PlaycardTemplate Playcard
		{
			get
			{
				if (this._Playcard == null)
					return null;
				else if (this.isReadOnly && this._ValueOfPlaycard != null)
					return this._ValueOfPlaycard;
				else if (this.isReadOnly)
					return this._ValueOfPlaycard = GameData.Utils.Defererence(this._Playcard);
				else
					return GameData.Utils.Defererence(this._Playcard);
			}
		}



		private GameData.Reference<UtilityItemTemplate> _Helmet;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public GameData.Reference<UtilityItemTemplate> _ReferenceTo_Helmet
		{
			get { return this._Helmet; }
			set { this.ThrowIfReadOnly(); this._Helmet = value; }
		}

		[NonSerialized]
		private UtilityItemTemplate _ValueOfHelmet;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		public UtilityItemTemplate Helmet
		{
			get
			{
				if (this._Helmet == null)
					return null;
				else if (this.isReadOnly && this._ValueOfHelmet != null)
					return this._ValueOfHelmet;
				else if (this.isReadOnly)
					return this._ValueOfHelmet = GameData.Utils.Defererence(this._Helmet);
				else
					return GameData.Utils.Defererence(this._Helmet);
			}
		}



		private GameData.Reference<UtilityItemTemplate> _Armor;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public GameData.Reference<UtilityItemTemplate> _ReferenceTo_Armor
		{
			get { return this._Armor; }
			set { this.ThrowIfReadOnly(); this._Armor = value; }
		}

		[NonSerialized]
		private UtilityItemTemplate _ValueOfArmor;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		public UtilityItemTemplate Armor
		{
			get
			{
				if (this._Armor == null)
					return null;
				else if (this.isReadOnly && this._ValueOfArmor != null)
					return this._ValueOfArmor;
				else if (this.isReadOnly)
					return this._ValueOfArmor = GameData.Utils.Defererence(this._Armor);
				else
					return GameData.Utils.Defererence(this._Armor);
			}
		}



		private GameData.Reference<UtilityItemTemplate> _UtilityItem;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public GameData.Reference<UtilityItemTemplate> _ReferenceTo_UtilityItem
		{
			get { return this._UtilityItem; }
			set { this.ThrowIfReadOnly(); this._UtilityItem = value; }
		}

		[NonSerialized]
		private UtilityItemTemplate _ValueOfUtilityItem;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		public UtilityItemTemplate UtilityItem
		{
			get
			{
				if (this._UtilityItem == null)
					return null;
				else if (this.isReadOnly && this._ValueOfUtilityItem != null)
					return this._ValueOfUtilityItem;
				else if (this.isReadOnly)
					return this._ValueOfUtilityItem = GameData.Utils.Defererence(this._UtilityItem);
				else
					return GameData.Utils.Defererence(this._UtilityItem);
			}
		}



		private GameData.Reference<WeaponTemplate> _Weapon;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public GameData.Reference<WeaponTemplate> _ReferenceTo_Weapon
		{
			get { return this._Weapon; }
			set { this.ThrowIfReadOnly(); this._Weapon = value; }
		}

		[NonSerialized]
		private WeaponTemplate _ValueOfWeapon;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public WeaponTemplate Weapon
		{
			get
			{
				if (this._Weapon == null)
					return null;
				else if (this.isReadOnly && this._ValueOfWeapon != null)
					return this._ValueOfWeapon;
				else if (this.isReadOnly)
					return this._ValueOfWeapon = GameData.Utils.Defererence(this._Weapon);
				else
					return GameData.Utils.Defererence(this._Weapon);
			}
		}



		internal void Init(Func<string, object, GameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			if (this._Playcard != null)
			{
				this._Playcard.Resolve(refResolver);
			}

			if (this._Helmet != null)
			{
				this._Helmet.Resolve(refResolver);
			}

			if (this._Armor != null)
			{
				this._Armor.Resolve(refResolver);
			}

			if (this._UtilityItem != null)
			{
				this._UtilityItem.Resolve(refResolver);
			}

			if (this._Weapon != null)
			{
				this._Weapon.Resolve(refResolver);
			}

			this.OnInitialize();
		}

		partial void OnInitialize();

		internal void Visit(GameData.Visitor visit)
		{
			if (visit == null) throw new ArgumentNullException("visit");


		}

		internal void SetLanguage(string language)
		{

			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();

			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(NonPlayerPlaycardTemplate other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is NonPlayerPlaycardTemplate == false)
				return false;

			var other = (NonPlayerPlaycardTemplate)value;
			return this.GetHashCode() == other.GetHashCode()

				&& AreEqual(this._Id, other._Id)

				&& AreEqual(this._Playcard, other._Playcard)

				&& AreEqual(this._Helmet, other._Helmet)

				&& AreEqual(this._Armor, other._Armor)

				&& AreEqual(this._UtilityItem, other._UtilityItem)

				&& AreEqual(this._Weapon, other._Weapon)

			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as NonPlayerPlaycardTemplate);
		}

		public int CompareTo(NonPlayerPlaycardTemplate other)
		{
			if (other == null)
				return 1;

			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);

		}

		public static bool operator ==(NonPlayerPlaycardTemplate value1, NonPlayerPlaycardTemplate value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(NonPlayerPlaycardTemplate value1, NonPlayerPlaycardTemplate value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()

				+ GetHashCodeFor(this._Id)

				+ GetHashCodeFor(this._Playcard)

				+ GetHashCodeFor(this._Helmet)

				+ GetHashCodeFor(this._Armor)

				+ GetHashCodeFor(this._UtilityItem)

				+ GetHashCodeFor(this._Weapon)

			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();

				sb.Append("Id: ").Append(this.Id).Append(", ");

				sb.Append("Playcard: ").Append(this.Playcard).Append(", ");

				sb.Append("Helmet: ").Append(this.Helmet).Append(", ");

				sb.Append("Armor: ").Append(this.Armor).Append(", ");

				sb.Append("UtilityItem: ").Append(this.UtilityItem).Append(", ");

				sb.Append("Weapon: ").Append(this.Weapon).Append(", ");

			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}


	
	public enum ItemType: sbyte
	{

		None = 0,

		Special = 1,

		Weapon = 2,

		WeaponModification = 3,

		UtilityItem = 4,

		Car = 5,

		Goods = 10,

	}


	
	public enum ItemRarity: int
	{

		Common = 1,

		Rare = 2,

		Legendary = 3,

	}


	[Flags]
	public enum ItemFlags: int
	{

		None = 0,

		NotTradeable = 1,

	}


	
	public enum AssignmentType: int
	{

		Task = 1,

		Raid = 2,

	}


	
	public enum CashPointType: int
	{

		Legal = 1,

		Illegal = 2,

	}


	
	public enum WeaponType: int
	{

		Melee = 1,

		Pistols = 2,

		MachineGuns = 3,

		Shotguns = 4,

		SniperRifles = 5,

	}


	
	public enum AbilityTemplateType: int
	{

		Active = 1,

		Passive = 2,

	}


	
	public enum WeaponAttackType: int
	{

		Melee = 1,

		Pistols = 2,

		Rifles = 3,

	}


	
	public enum ItemSlot: int
	{

		Headwear = 1,

		Body = 2,

		Utility = 3,

	}




	public partial class GameData
	{
		private class Structure
		{
			public sealed class CollectionList
			{

				public List<ItemTemplate> ItemTemplate;

				public List<Reward> Reward;

				public List<Requirement> Requirement;

				public List<StageTemplate> StageTemplate;

				public List<AssignmentTemplate> AssignmentTemplate;

				public List<AssignmentResolution> AssignmentResolution;

				public List<CashPointTemplate> CashPointTemplate;

				public List<Restrictions> Restrictions;

				public List<Global> Global;

				public List<GunShopLot> GunShopLot;

				public List<TrainingTemplate> TrainingTemplate;

				public List<AbilityTemplate> AbilityTemplate;

				public List<CarTemplate> CarTemplate;

				public List<WeaponModificationTemplate> WeaponModificationTemplate;

				public List<WeaponTemplate> WeaponTemplate;

				public List<UtilityItemBonusTemplate> UtilityItemBonusTemplate;

				public List<UtilityItemTemplate> UtilityItemTemplate;

				public List<AbilityRollTemplate> AbilityRollTemplate;

				public List<PlaycardTemplate> PlaycardTemplate;

				public List<NonPlayerPlaycardTemplate> NonPlayerPlaycardTemplate;

			}

			public CollectionList Collections;
		}


		private List<ItemTemplate> allItemTemplate;

		private Dictionary<String, ItemTemplate> allItemTemplateById;

		private List<Reward> allReward;

		private Dictionary<Int32, Reward> allRewardById;

		private List<Requirement> allRequirement;

		private Dictionary<Int32, Requirement> allRequirementById;

		private List<StageTemplate> allStageTemplate;

		private Dictionary<Int32, StageTemplate> allStageTemplateById;

		private List<AssignmentTemplate> allAssignmentTemplate;

		private Dictionary<String, AssignmentTemplate> allAssignmentTemplateById;

		private List<AssignmentResolution> allAssignmentResolution;

		private Dictionary<Int32, AssignmentResolution> allAssignmentResolutionById;

		private List<CashPointTemplate> allCashPointTemplate;

		private Dictionary<String, CashPointTemplate> allCashPointTemplateById;

		private List<Restrictions> allRestrictions;

		private Dictionary<Int32, Restrictions> allRestrictionsById;

		private List<Global> allGlobal;

		private Dictionary<Int32, Global> allGlobalById;

		private List<GunShopLot> allGunShopLot;

		private Dictionary<Int32, GunShopLot> allGunShopLotById;

		private List<TrainingTemplate> allTrainingTemplate;

		private Dictionary<String, TrainingTemplate> allTrainingTemplateById;

		private List<AbilityTemplate> allAbilityTemplate;

		private Dictionary<String, AbilityTemplate> allAbilityTemplateById;

		private List<CarTemplate> allCarTemplate;

		private Dictionary<String, CarTemplate> allCarTemplateById;

		private List<WeaponModificationTemplate> allWeaponModificationTemplate;

		private Dictionary<String, WeaponModificationTemplate> allWeaponModificationTemplateById;

		private List<WeaponTemplate> allWeaponTemplate;

		private Dictionary<String, WeaponTemplate> allWeaponTemplateById;

		private List<UtilityItemBonusTemplate> allUtilityItemBonusTemplate;

		private Dictionary<Int32, UtilityItemBonusTemplate> allUtilityItemBonusTemplateById;

		private List<UtilityItemTemplate> allUtilityItemTemplate;

		private Dictionary<String, UtilityItemTemplate> allUtilityItemTemplateById;

		private List<AbilityRollTemplate> allAbilityRollTemplate;

		private Dictionary<Int32, AbilityRollTemplate> allAbilityRollTemplateById;

		private List<PlaycardTemplate> allPlaycardTemplate;

		private Dictionary<String, PlaycardTemplate> allPlaycardTemplateById;

		private List<NonPlayerPlaycardTemplate> allNonPlayerPlaycardTemplate;

		private Dictionary<String, NonPlayerPlaycardTemplate> allNonPlayerPlaycardTemplateById;


#pragma warning disable 0414 // The private field `structure' is assigned but its value is never used
		private readonly Structure structure;
#pragma warning restore 0168
		private readonly ReadOnlyCollection<string> languages = new ReadOnlyCollection<string>(new string[] { "en-CA", "en-US" });

		public ReadOnlyCollection<string> SupportedLanguages { get { return this.languages; } }


		public GameData(TextReader textReader)
		{
			if (textReader == null) throw new ArgumentNullException("textReader");
			this.structure = this.ReadStructure(textReader);

			this.Initialize();
		}


		private void Initialize()
		{
#pragma warning disable 0168 // The variable `resolver' is declared but never used
			var resolver = (Func<string, object, Document>)this.Resolve;
#pragma warning restore 0168


			if (this.structure.Collections.ItemTemplate == null) this.structure.Collections.ItemTemplate = new List<ItemTemplate>();
			if (this.allItemTemplate == null) this.allItemTemplate = new List<ItemTemplate>();

			if (this.structure.Collections.Reward == null) this.structure.Collections.Reward = new List<Reward>();
			if (this.allReward == null) this.allReward = new List<Reward>();

			if (this.structure.Collections.Requirement == null) this.structure.Collections.Requirement = new List<Requirement>();
			if (this.allRequirement == null) this.allRequirement = new List<Requirement>();

			if (this.structure.Collections.StageTemplate == null) this.structure.Collections.StageTemplate = new List<StageTemplate>();
			if (this.allStageTemplate == null) this.allStageTemplate = new List<StageTemplate>();

			if (this.structure.Collections.AssignmentTemplate == null) this.structure.Collections.AssignmentTemplate = new List<AssignmentTemplate>();
			if (this.allAssignmentTemplate == null) this.allAssignmentTemplate = new List<AssignmentTemplate>();

			if (this.structure.Collections.AssignmentResolution == null) this.structure.Collections.AssignmentResolution = new List<AssignmentResolution>();
			if (this.allAssignmentResolution == null) this.allAssignmentResolution = new List<AssignmentResolution>();

			if (this.structure.Collections.CashPointTemplate == null) this.structure.Collections.CashPointTemplate = new List<CashPointTemplate>();
			if (this.allCashPointTemplate == null) this.allCashPointTemplate = new List<CashPointTemplate>();

			if (this.structure.Collections.Restrictions == null) this.structure.Collections.Restrictions = new List<Restrictions>();
			if (this.allRestrictions == null) this.allRestrictions = new List<Restrictions>();

			if (this.structure.Collections.Global == null) this.structure.Collections.Global = new List<Global>();
			if (this.allGlobal == null) this.allGlobal = new List<Global>();

			if (this.structure.Collections.GunShopLot == null) this.structure.Collections.GunShopLot = new List<GunShopLot>();
			if (this.allGunShopLot == null) this.allGunShopLot = new List<GunShopLot>();

			if (this.structure.Collections.TrainingTemplate == null) this.structure.Collections.TrainingTemplate = new List<TrainingTemplate>();
			if (this.allTrainingTemplate == null) this.allTrainingTemplate = new List<TrainingTemplate>();

			if (this.structure.Collections.AbilityTemplate == null) this.structure.Collections.AbilityTemplate = new List<AbilityTemplate>();
			if (this.allAbilityTemplate == null) this.allAbilityTemplate = new List<AbilityTemplate>();

			if (this.structure.Collections.CarTemplate == null) this.structure.Collections.CarTemplate = new List<CarTemplate>();
			if (this.allCarTemplate == null) this.allCarTemplate = new List<CarTemplate>();

			if (this.structure.Collections.WeaponModificationTemplate == null) this.structure.Collections.WeaponModificationTemplate = new List<WeaponModificationTemplate>();
			if (this.allWeaponModificationTemplate == null) this.allWeaponModificationTemplate = new List<WeaponModificationTemplate>();

			if (this.structure.Collections.WeaponTemplate == null) this.structure.Collections.WeaponTemplate = new List<WeaponTemplate>();
			if (this.allWeaponTemplate == null) this.allWeaponTemplate = new List<WeaponTemplate>();

			if (this.structure.Collections.UtilityItemBonusTemplate == null) this.structure.Collections.UtilityItemBonusTemplate = new List<UtilityItemBonusTemplate>();
			if (this.allUtilityItemBonusTemplate == null) this.allUtilityItemBonusTemplate = new List<UtilityItemBonusTemplate>();

			if (this.structure.Collections.UtilityItemTemplate == null) this.structure.Collections.UtilityItemTemplate = new List<UtilityItemTemplate>();
			if (this.allUtilityItemTemplate == null) this.allUtilityItemTemplate = new List<UtilityItemTemplate>();

			if (this.structure.Collections.AbilityRollTemplate == null) this.structure.Collections.AbilityRollTemplate = new List<AbilityRollTemplate>();
			if (this.allAbilityRollTemplate == null) this.allAbilityRollTemplate = new List<AbilityRollTemplate>();

			if (this.structure.Collections.PlaycardTemplate == null) this.structure.Collections.PlaycardTemplate = new List<PlaycardTemplate>();
			if (this.allPlaycardTemplate == null) this.allPlaycardTemplate = new List<PlaycardTemplate>();

			if (this.structure.Collections.NonPlayerPlaycardTemplate == null) this.structure.Collections.NonPlayerPlaycardTemplate = new List<NonPlayerPlaycardTemplate>();
			if (this.allNonPlayerPlaycardTemplate == null) this.allNonPlayerPlaycardTemplate = new List<NonPlayerPlaycardTemplate>();


			this.FlattenStructure();


			this.allItemTemplate.Sort();
			this.allItemTemplateById = Utils.WhereNotNull(this.allItemTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allReward.Sort();
			this.allRewardById = Utils.WhereNotNull(this.allReward, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allRequirement.Sort();
			this.allRequirementById = Utils.WhereNotNull(this.allRequirement, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allStageTemplate.Sort();
			this.allStageTemplateById = Utils.WhereNotNull(this.allStageTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allAssignmentTemplate.Sort();
			this.allAssignmentTemplateById = Utils.WhereNotNull(this.allAssignmentTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allAssignmentResolution.Sort();
			this.allAssignmentResolutionById = Utils.WhereNotNull(this.allAssignmentResolution, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allCashPointTemplate.Sort();
			this.allCashPointTemplateById = Utils.WhereNotNull(this.allCashPointTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allRestrictions.Sort();
			this.allRestrictionsById = Utils.WhereNotNull(this.allRestrictions, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allGlobal.Sort();
			this.allGlobalById = Utils.WhereNotNull(this.allGlobal, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allGunShopLot.Sort();
			this.allGunShopLotById = Utils.WhereNotNull(this.allGunShopLot, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allTrainingTemplate.Sort();
			this.allTrainingTemplateById = Utils.WhereNotNull(this.allTrainingTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allAbilityTemplate.Sort();
			this.allAbilityTemplateById = Utils.WhereNotNull(this.allAbilityTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allCarTemplate.Sort();
			this.allCarTemplateById = Utils.WhereNotNull(this.allCarTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allWeaponModificationTemplate.Sort();
			this.allWeaponModificationTemplateById = Utils.WhereNotNull(this.allWeaponModificationTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allWeaponTemplate.Sort();
			this.allWeaponTemplateById = Utils.WhereNotNull(this.allWeaponTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allUtilityItemBonusTemplate.Sort();
			this.allUtilityItemBonusTemplateById = Utils.WhereNotNull(this.allUtilityItemBonusTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allUtilityItemTemplate.Sort();
			this.allUtilityItemTemplateById = Utils.WhereNotNull(this.allUtilityItemTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allAbilityRollTemplate.Sort();
			this.allAbilityRollTemplateById = Utils.WhereNotNull(this.allAbilityRollTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allPlaycardTemplate.Sort();
			this.allPlaycardTemplateById = Utils.WhereNotNull(this.allPlaycardTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);

			this.allNonPlayerPlaycardTemplate.Sort();
			this.allNonPlayerPlaycardTemplateById = Utils.WhereNotNull(this.allNonPlayerPlaycardTemplate, entry => entry.Id).ToDictionary(entry => entry.Id);


			foreach(var entry in this.allItemTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allReward)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allRequirement)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allStageTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allAssignmentTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allAssignmentResolution)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allCashPointTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allRestrictions)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allGlobal)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allGunShopLot)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allTrainingTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allAbilityTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allCarTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allWeaponModificationTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allWeaponTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allUtilityItemBonusTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allUtilityItemTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allAbilityRollTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allPlaycardTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			foreach(var entry in this.allNonPlayerPlaycardTemplate)
			{
				entry.Init(resolver);
				entry.SetReadOnly();
			}

			this.OnInitialize();
		}

		partial void OnInitialize();


		// ItemTemplate -> Id
		public ItemTemplate GetItemTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(ItemTemplate);
			if (this.allItemTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find ItemTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasItemTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allItemTemplateById.ContainsKey(id);
		}
		public ItemTemplate FindItemTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(ItemTemplate);
			this.allItemTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetItemTemplate(String id, out ItemTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allItemTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<ItemTemplate> GetItemTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<ItemTemplate>(this.structure.Collections.ItemTemplate);
			else
				return new ReadOnlyList<ItemTemplate>(this.allItemTemplate);
		}

		// Reward -> Id
		public Reward GetReward(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(Reward);
			if (this.allRewardById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Reward with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasReward(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allRewardById.ContainsKey(id);
		}
		public Reward FindReward(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(Reward);
			this.allRewardById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetReward(Int32 id, out Reward value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allRewardById.TryGetValue(id, out value);
		}

		public ReadOnlyList<Reward> GetRewards(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<Reward>(this.structure.Collections.Reward);
			else
				return new ReadOnlyList<Reward>(this.allReward);
		}

		// Requirement -> Id
		public Requirement GetRequirement(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(Requirement);
			if (this.allRequirementById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Requirement with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasRequirement(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allRequirementById.ContainsKey(id);
		}
		public Requirement FindRequirement(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(Requirement);
			this.allRequirementById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetRequirement(Int32 id, out Requirement value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allRequirementById.TryGetValue(id, out value);
		}

		public ReadOnlyList<Requirement> GetRequirements(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<Requirement>(this.structure.Collections.Requirement);
			else
				return new ReadOnlyList<Requirement>(this.allRequirement);
		}

		// StageTemplate -> Id
		public StageTemplate GetStageTemplate(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(StageTemplate);
			if (this.allStageTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find StageTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasStageTemplate(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allStageTemplateById.ContainsKey(id);
		}
		public StageTemplate FindStageTemplate(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(StageTemplate);
			this.allStageTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetStageTemplate(Int32 id, out StageTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allStageTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<StageTemplate> GetStageTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<StageTemplate>(this.structure.Collections.StageTemplate);
			else
				return new ReadOnlyList<StageTemplate>(this.allStageTemplate);
		}

		// AssignmentTemplate -> Id
		public AssignmentTemplate GetAssignmentTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(AssignmentTemplate);
			if (this.allAssignmentTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find AssignmentTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasAssignmentTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allAssignmentTemplateById.ContainsKey(id);
		}
		public AssignmentTemplate FindAssignmentTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(AssignmentTemplate);
			this.allAssignmentTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetAssignmentTemplate(String id, out AssignmentTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allAssignmentTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<AssignmentTemplate> GetAssignmentTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<AssignmentTemplate>(this.structure.Collections.AssignmentTemplate);
			else
				return new ReadOnlyList<AssignmentTemplate>(this.allAssignmentTemplate);
		}

		// AssignmentResolution -> Id
		public AssignmentResolution GetAssignmentResolution(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(AssignmentResolution);
			if (this.allAssignmentResolutionById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find AssignmentResolution with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasAssignmentResolution(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allAssignmentResolutionById.ContainsKey(id);
		}
		public AssignmentResolution FindAssignmentResolution(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(AssignmentResolution);
			this.allAssignmentResolutionById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetAssignmentResolution(Int32 id, out AssignmentResolution value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allAssignmentResolutionById.TryGetValue(id, out value);
		}

		public ReadOnlyList<AssignmentResolution> GetAssignmentResolutions(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<AssignmentResolution>(this.structure.Collections.AssignmentResolution);
			else
				return new ReadOnlyList<AssignmentResolution>(this.allAssignmentResolution);
		}

		// CashPointTemplate -> Id
		public CashPointTemplate GetCashPointTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(CashPointTemplate);
			if (this.allCashPointTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find CashPointTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasCashPointTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allCashPointTemplateById.ContainsKey(id);
		}
		public CashPointTemplate FindCashPointTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(CashPointTemplate);
			this.allCashPointTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetCashPointTemplate(String id, out CashPointTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allCashPointTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<CashPointTemplate> GetCashPointTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<CashPointTemplate>(this.structure.Collections.CashPointTemplate);
			else
				return new ReadOnlyList<CashPointTemplate>(this.allCashPointTemplate);
		}

		// Restrictions -> Id
		public Restrictions GetRestrictions(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(Restrictions);
			if (this.allRestrictionsById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Restrictions with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasRestrictions(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allRestrictionsById.ContainsKey(id);
		}
		public Restrictions FindRestrictions(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(Restrictions);
			this.allRestrictionsById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetRestrictions(Int32 id, out Restrictions value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allRestrictionsById.TryGetValue(id, out value);
		}

		public ReadOnlyList<Restrictions> GetRestrictions(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<Restrictions>(this.structure.Collections.Restrictions);
			else
				return new ReadOnlyList<Restrictions>(this.allRestrictions);
		}

		// Global -> Id
		public Global GetGlobal(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(Global);
			if (this.allGlobalById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Global with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasGlobal(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allGlobalById.ContainsKey(id);
		}
		public Global FindGlobal(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(Global);
			this.allGlobalById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetGlobal(Int32 id, out Global value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allGlobalById.TryGetValue(id, out value);
		}

		public ReadOnlyList<Global> GetGlobals(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<Global>(this.structure.Collections.Global);
			else
				return new ReadOnlyList<Global>(this.allGlobal);
		}

		// Global -> Instance
		private Global theGlobal;
		public Global Global { get { return this.theGlobal ?? (this.theGlobal = this.allGlobalById.Values.Single()); } }

		// GunShopLot -> Id
		public GunShopLot GetGunShopLot(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(GunShopLot);
			if (this.allGunShopLotById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find GunShopLot with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasGunShopLot(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allGunShopLotById.ContainsKey(id);
		}
		public GunShopLot FindGunShopLot(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(GunShopLot);
			this.allGunShopLotById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetGunShopLot(Int32 id, out GunShopLot value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allGunShopLotById.TryGetValue(id, out value);
		}

		public ReadOnlyList<GunShopLot> GetGunShopLots(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<GunShopLot>(this.structure.Collections.GunShopLot);
			else
				return new ReadOnlyList<GunShopLot>(this.allGunShopLot);
		}

		// TrainingTemplate -> Id
		public TrainingTemplate GetTrainingTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(TrainingTemplate);
			if (this.allTrainingTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find TrainingTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasTrainingTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allTrainingTemplateById.ContainsKey(id);
		}
		public TrainingTemplate FindTrainingTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(TrainingTemplate);
			this.allTrainingTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetTrainingTemplate(String id, out TrainingTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allTrainingTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<TrainingTemplate> GetTrainingTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<TrainingTemplate>(this.structure.Collections.TrainingTemplate);
			else
				return new ReadOnlyList<TrainingTemplate>(this.allTrainingTemplate);
		}

		// AbilityTemplate -> Id
		public AbilityTemplate GetAbilityTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(AbilityTemplate);
			if (this.allAbilityTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find AbilityTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasAbilityTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allAbilityTemplateById.ContainsKey(id);
		}
		public AbilityTemplate FindAbilityTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(AbilityTemplate);
			this.allAbilityTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetAbilityTemplate(String id, out AbilityTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allAbilityTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<AbilityTemplate> GetAbilityTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<AbilityTemplate>(this.structure.Collections.AbilityTemplate);
			else
				return new ReadOnlyList<AbilityTemplate>(this.allAbilityTemplate);
		}

		// CarTemplate -> Id
		public CarTemplate GetCarTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(CarTemplate);
			if (this.allCarTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find CarTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasCarTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allCarTemplateById.ContainsKey(id);
		}
		public CarTemplate FindCarTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(CarTemplate);
			this.allCarTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetCarTemplate(String id, out CarTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allCarTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<CarTemplate> GetCarTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<CarTemplate>(this.structure.Collections.CarTemplate);
			else
				return new ReadOnlyList<CarTemplate>(this.allCarTemplate);
		}

		// WeaponModificationTemplate -> Id
		public WeaponModificationTemplate GetWeaponModificationTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(WeaponModificationTemplate);
			if (this.allWeaponModificationTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find WeaponModificationTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasWeaponModificationTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allWeaponModificationTemplateById.ContainsKey(id);
		}
		public WeaponModificationTemplate FindWeaponModificationTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(WeaponModificationTemplate);
			this.allWeaponModificationTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetWeaponModificationTemplate(String id, out WeaponModificationTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allWeaponModificationTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<WeaponModificationTemplate> GetWeaponModificationTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<WeaponModificationTemplate>(this.structure.Collections.WeaponModificationTemplate);
			else
				return new ReadOnlyList<WeaponModificationTemplate>(this.allWeaponModificationTemplate);
		}

		// WeaponTemplate -> Id
		public WeaponTemplate GetWeaponTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(WeaponTemplate);
			if (this.allWeaponTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find WeaponTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasWeaponTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allWeaponTemplateById.ContainsKey(id);
		}
		public WeaponTemplate FindWeaponTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(WeaponTemplate);
			this.allWeaponTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetWeaponTemplate(String id, out WeaponTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allWeaponTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<WeaponTemplate> GetWeaponTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<WeaponTemplate>(this.structure.Collections.WeaponTemplate);
			else
				return new ReadOnlyList<WeaponTemplate>(this.allWeaponTemplate);
		}

		// UtilityItemBonusTemplate -> Id
		public UtilityItemBonusTemplate GetUtilityItemBonusTemplate(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(UtilityItemBonusTemplate);
			if (this.allUtilityItemBonusTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find UtilityItemBonusTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasUtilityItemBonusTemplate(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allUtilityItemBonusTemplateById.ContainsKey(id);
		}
		public UtilityItemBonusTemplate FindUtilityItemBonusTemplate(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(UtilityItemBonusTemplate);
			this.allUtilityItemBonusTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetUtilityItemBonusTemplate(Int32 id, out UtilityItemBonusTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allUtilityItemBonusTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<UtilityItemBonusTemplate> GetUtilityItemBonusTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<UtilityItemBonusTemplate>(this.structure.Collections.UtilityItemBonusTemplate);
			else
				return new ReadOnlyList<UtilityItemBonusTemplate>(this.allUtilityItemBonusTemplate);
		}

		// UtilityItemTemplate -> Id
		public UtilityItemTemplate GetUtilityItemTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(UtilityItemTemplate);
			if (this.allUtilityItemTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find UtilityItemTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasUtilityItemTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allUtilityItemTemplateById.ContainsKey(id);
		}
		public UtilityItemTemplate FindUtilityItemTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(UtilityItemTemplate);
			this.allUtilityItemTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetUtilityItemTemplate(String id, out UtilityItemTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allUtilityItemTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<UtilityItemTemplate> GetUtilityItemTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<UtilityItemTemplate>(this.structure.Collections.UtilityItemTemplate);
			else
				return new ReadOnlyList<UtilityItemTemplate>(this.allUtilityItemTemplate);
		}

		// AbilityRollTemplate -> Id
		public AbilityRollTemplate GetAbilityRollTemplate(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(AbilityRollTemplate);
			if (this.allAbilityRollTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find AbilityRollTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasAbilityRollTemplate(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allAbilityRollTemplateById.ContainsKey(id);
		}
		public AbilityRollTemplate FindAbilityRollTemplate(Int32 id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(AbilityRollTemplate);
			this.allAbilityRollTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetAbilityRollTemplate(Int32 id, out AbilityRollTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allAbilityRollTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<AbilityRollTemplate> GetAbilityRollTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<AbilityRollTemplate>(this.structure.Collections.AbilityRollTemplate);
			else
				return new ReadOnlyList<AbilityRollTemplate>(this.allAbilityRollTemplate);
		}

		// PlaycardTemplate -> Id
		public PlaycardTemplate GetPlaycardTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(PlaycardTemplate);
			if (this.allPlaycardTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find PlaycardTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasPlaycardTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allPlaycardTemplateById.ContainsKey(id);
		}
		public PlaycardTemplate FindPlaycardTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(PlaycardTemplate);
			this.allPlaycardTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetPlaycardTemplate(String id, out PlaycardTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allPlaycardTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<PlaycardTemplate> GetPlaycardTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<PlaycardTemplate>(this.structure.Collections.PlaycardTemplate);
			else
				return new ReadOnlyList<PlaycardTemplate>(this.allPlaycardTemplate);
		}

		// NonPlayerPlaycardTemplate -> Id
		public NonPlayerPlaycardTemplate GetNonPlayerPlaycardTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(NonPlayerPlaycardTemplate);
			if (this.allNonPlayerPlaycardTemplateById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find NonPlayerPlaycardTemplate with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasNonPlayerPlaycardTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allNonPlayerPlaycardTemplateById.ContainsKey(id);
		}
		public NonPlayerPlaycardTemplate FindNonPlayerPlaycardTemplate(String id)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			var value = default(NonPlayerPlaycardTemplate);
			this.allNonPlayerPlaycardTemplateById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetNonPlayerPlaycardTemplate(String id, out NonPlayerPlaycardTemplate value)
		{
			Utils.CheckKeyIsNotNull(id, "id");

			return this.allNonPlayerPlaycardTemplateById.TryGetValue(id, out value);
		}

		public ReadOnlyList<NonPlayerPlaycardTemplate> GetNonPlayerPlaycardTemplates(bool onlyRoot = false)
		{
			if(onlyRoot)
				return new ReadOnlyList<NonPlayerPlaycardTemplate>(this.structure.Collections.NonPlayerPlaycardTemplate);
			else
				return new ReadOnlyList<NonPlayerPlaycardTemplate>(this.allNonPlayerPlaycardTemplate);
		}



		public IEnumerable<Document> GetAllDocuments()
		{

			foreach (var entry in this.allItemTemplate) yield return entry;

			foreach (var entry in this.allReward) yield return entry;

			foreach (var entry in this.allRequirement) yield return entry;

			foreach (var entry in this.allStageTemplate) yield return entry;

			foreach (var entry in this.allAssignmentTemplate) yield return entry;

			foreach (var entry in this.allAssignmentResolution) yield return entry;

			foreach (var entry in this.allCashPointTemplate) yield return entry;

			foreach (var entry in this.allRestrictions) yield return entry;

			foreach (var entry in this.allGlobal) yield return entry;

			foreach (var entry in this.allGunShopLot) yield return entry;

			foreach (var entry in this.allTrainingTemplate) yield return entry;

			foreach (var entry in this.allAbilityTemplate) yield return entry;

			foreach (var entry in this.allCarTemplate) yield return entry;

			foreach (var entry in this.allWeaponModificationTemplate) yield return entry;

			foreach (var entry in this.allWeaponTemplate) yield return entry;

			foreach (var entry in this.allUtilityItemBonusTemplate) yield return entry;

			foreach (var entry in this.allUtilityItemTemplate) yield return entry;

			foreach (var entry in this.allAbilityRollTemplate) yield return entry;

			foreach (var entry in this.allPlaycardTemplate) yield return entry;

			foreach (var entry in this.allNonPlayerPlaycardTemplate) yield return entry;


			yield break;
		}

		public void SetLanguage(string language)
		{
			if (language == null) throw new ArgumentNullException("language");


			foreach(var entry in this.allItemTemplate)
				entry.SetLanguage(language);

			foreach(var entry in this.allReward)
				entry.SetLanguage(language);

			foreach(var entry in this.allRequirement)
				entry.SetLanguage(language);

			foreach(var entry in this.allStageTemplate)
				entry.SetLanguage(language);

			foreach(var entry in this.allAssignmentTemplate)
				entry.SetLanguage(language);

			foreach(var entry in this.allAssignmentResolution)
				entry.SetLanguage(language);

			foreach(var entry in this.allCashPointTemplate)
				entry.SetLanguage(language);

			foreach(var entry in this.allRestrictions)
				entry.SetLanguage(language);

			foreach(var entry in this.allGlobal)
				entry.SetLanguage(language);

			foreach(var entry in this.allGunShopLot)
				entry.SetLanguage(language);

			foreach(var entry in this.allTrainingTemplate)
				entry.SetLanguage(language);

			foreach(var entry in this.allAbilityTemplate)
				entry.SetLanguage(language);

			foreach(var entry in this.allCarTemplate)
				entry.SetLanguage(language);

			foreach(var entry in this.allWeaponModificationTemplate)
				entry.SetLanguage(language);

			foreach(var entry in this.allWeaponTemplate)
				entry.SetLanguage(language);

			foreach(var entry in this.allUtilityItemBonusTemplate)
				entry.SetLanguage(language);

			foreach(var entry in this.allUtilityItemTemplate)
				entry.SetLanguage(language);

			foreach(var entry in this.allAbilityRollTemplate)
				entry.SetLanguage(language);

			foreach(var entry in this.allPlaycardTemplate)
				entry.SetLanguage(language);

			foreach(var entry in this.allNonPlayerPlaycardTemplate)
				entry.SetLanguage(language);

		}

		private Document Resolve(string entityId, object id)
		{
			if (entityId == null) throw new ArgumentNullException("entityId");

#pragma warning disable 1522 // Empty switch block
			switch (entityId)
			{

				case "ItemTemplate":
				case "55427d5b3302cf167418545e": return this.GetItemTemplate((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));

				case "Reward":
				case "55452ac53302cf19dc675581": return this.GetReward((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));

				case "Requirement":
				case "554608d73302cf0914d92ae0": return this.GetRequirement((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));

				case "StageTemplate":
				case "56cc0cec3302cd17e4d79d3c": return this.GetStageTemplate((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));

				case "AssignmentTemplate":
				case "56cc0ea13302cd17e4d79d3f": return this.GetAssignmentTemplate((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));

				case "AssignmentResolution":
				case "56cc0fbc3302cd17e4d79d46": return this.GetAssignmentResolution((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));

				case "CashPointTemplate":
				case "56ced9233302cd2e146fdffb": return this.GetCashPointTemplate((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));

				case "Restrictions":
				case "56ced9aa3302cd2e146fe000": return this.GetRestrictions((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));

				case "Global":
				case "56cedc0c3302cd2e146fe007": return this.GetGlobal((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));

				case "GunShopLot":
				case "56cede233302cd2e146fe00a": return this.GetGunShopLot((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));

				case "TrainingTemplate":
				case "56cee1fa3302cd15c48e4985": return this.GetTrainingTemplate((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));

				case "AbilityTemplate":
				case "56cee4de3302cd3048236b66": return this.GetAbilityTemplate((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));

				case "CarTemplate":
				case "56cee6013302cd3048236b73": return this.GetCarTemplate((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));

				case "WeaponModificationTemplate":
				case "56cee9003302cd3048236b77": return this.GetWeaponModificationTemplate((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));

				case "WeaponTemplate":
				case "56cee9e23302cd3048236b7c": return this.GetWeaponTemplate((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));

				case "UtilityItemBonusTemplate":
				case "56ceef6a3302cd2bfc35cd03": return this.GetUtilityItemBonusTemplate((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));

				case "UtilityItemTemplate":
				case "56ceefaf3302cd2bfc35cd08": return this.GetUtilityItemTemplate((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));

				case "AbilityRollTemplate":
				case "56cf121a3302cd2bfc35cd0d": return this.GetAbilityRollTemplate((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));

				case "PlaycardTemplate":
				case "56cf126e3302cd2bfc35cd15": return this.GetPlaycardTemplate((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));

				case "NonPlayerPlaycardTemplate":
				case "56cf14913302cd2bfc35cd20": return this.GetNonPlayerPlaycardTemplate((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));

			}
#pragma warning restore 1522
			throw new System.ArgumentException(string.Format("Unable find Entity with id '{0}'.", entityId) ,"entityId");
		}

		private object ChangeType(object value, Type toType, IFormatProvider format)
		{
			if (toType.IsEnum && Enum.GetUnderlyingType(toType) == typeof(ulong))
				return Enum.ToObject(toType, Convert.ToUInt64(value, format));
			if (toType.IsEnum)
				return Enum.ToObject(toType, Convert.ToInt64(value, format));
			else
				return System.Convert.ChangeType(value, toType, format);
		}

		public void ApplyVisitor(Visitor visitor)
		{
			foreach(var document in this.structure.Collections.ItemTemplate)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.Reward)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.Requirement)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.StageTemplate)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.AssignmentTemplate)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.AssignmentResolution)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.CashPointTemplate)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.Restrictions)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.Global)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.GunShopLot)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.TrainingTemplate)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.AbilityTemplate)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.CarTemplate)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.WeaponModificationTemplate)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.WeaponTemplate)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.UtilityItemBonusTemplate)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.UtilityItemTemplate)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.AbilityRollTemplate)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.PlaycardTemplate)
				visitor.Visit(document);
			foreach(var document in this.structure.Collections.NonPlayerPlaycardTemplate)
				visitor.Visit(document);
		}

		private void FlattenStructure()
		{
			var flatteningStructureVisitor = new FlatteningStructureVisitor(this);
			this.ApplyVisitor(flatteningStructureVisitor);
		}

		public class Visitor
		{
			public virtual void Visit(ItemTemplate value) { if(value != null) value.Visit(this); }
			public virtual void Visit(Reward value) { if(value != null) value.Visit(this); }
			public virtual void Visit(Requirement value) { if(value != null) value.Visit(this); }
			public virtual void Visit(StageTemplate value) { if(value != null) value.Visit(this); }
			public virtual void Visit(AssignmentTemplate value) { if(value != null) value.Visit(this); }
			public virtual void Visit(AssignmentResolution value) { if(value != null) value.Visit(this); }
			public virtual void Visit(CashPointTemplate value) { if(value != null) value.Visit(this); }
			public virtual void Visit(Restrictions value) { if(value != null) value.Visit(this); }
			public virtual void Visit(Global value) { if(value != null) value.Visit(this); }
			public virtual void Visit(GunShopLot value) { if(value != null) value.Visit(this); }
			public virtual void Visit(TrainingTemplate value) { if(value != null) value.Visit(this); }
			public virtual void Visit(AbilityTemplate value) { if(value != null) value.Visit(this); }
			public virtual void Visit(CarTemplate value) { if(value != null) value.Visit(this); }
			public virtual void Visit(WeaponModificationTemplate value) { if(value != null) value.Visit(this); }
			public virtual void Visit(WeaponTemplate value) { if(value != null) value.Visit(this); }
			public virtual void Visit(UtilityItemBonusTemplate value) { if(value != null) value.Visit(this); }
			public virtual void Visit(UtilityItemTemplate value) { if(value != null) value.Visit(this); }
			public virtual void Visit(AbilityRollTemplate value) { if(value != null) value.Visit(this); }
			public virtual void Visit(PlaycardTemplate value) { if(value != null) value.Visit(this); }
			public virtual void Visit(NonPlayerPlaycardTemplate value) { if(value != null) value.Visit(this); }
		}

		private class FlatteningStructureVisitor : Visitor
		{
			private GameData gameData;

			public FlatteningStructureVisitor(GameData gameData)
			{
				if (gameData == null) throw new System.ArgumentNullException("gameData");

				this.gameData = gameData;
			}

			public override void Visit(ItemTemplate value) { this.gameData.allItemTemplate.Add(value); base.Visit(value); }
			public override void Visit(Reward value) { this.gameData.allReward.Add(value); base.Visit(value); }
			public override void Visit(Requirement value) { this.gameData.allRequirement.Add(value); base.Visit(value); }
			public override void Visit(StageTemplate value) { this.gameData.allStageTemplate.Add(value); base.Visit(value); }
			public override void Visit(AssignmentTemplate value) { this.gameData.allAssignmentTemplate.Add(value); base.Visit(value); }
			public override void Visit(AssignmentResolution value) { this.gameData.allAssignmentResolution.Add(value); base.Visit(value); }
			public override void Visit(CashPointTemplate value) { this.gameData.allCashPointTemplate.Add(value); base.Visit(value); }
			public override void Visit(Restrictions value) { this.gameData.allRestrictions.Add(value); base.Visit(value); }
			public override void Visit(Global value) { this.gameData.allGlobal.Add(value); base.Visit(value); }
			public override void Visit(GunShopLot value) { this.gameData.allGunShopLot.Add(value); base.Visit(value); }
			public override void Visit(TrainingTemplate value) { this.gameData.allTrainingTemplate.Add(value); base.Visit(value); }
			public override void Visit(AbilityTemplate value) { this.gameData.allAbilityTemplate.Add(value); base.Visit(value); }
			public override void Visit(CarTemplate value) { this.gameData.allCarTemplate.Add(value); base.Visit(value); }
			public override void Visit(WeaponModificationTemplate value) { this.gameData.allWeaponModificationTemplate.Add(value); base.Visit(value); }
			public override void Visit(WeaponTemplate value) { this.gameData.allWeaponTemplate.Add(value); base.Visit(value); }
			public override void Visit(UtilityItemBonusTemplate value) { this.gameData.allUtilityItemBonusTemplate.Add(value); base.Visit(value); }
			public override void Visit(UtilityItemTemplate value) { this.gameData.allUtilityItemTemplate.Add(value); base.Visit(value); }
			public override void Visit(AbilityRollTemplate value) { this.gameData.allAbilityRollTemplate.Add(value); base.Visit(value); }
			public override void Visit(PlaycardTemplate value) { this.gameData.allPlaycardTemplate.Add(value); base.Visit(value); }
			public override void Visit(NonPlayerPlaycardTemplate value) { this.gameData.allNonPlayerPlaycardTemplate.Add(value); base.Visit(value); }
		}

		// Build-in JSON deserialization
		private Structure ReadStructure(TextReader textReader)
		{
			var jsonReader = new JsonReader(textReader);
			return jsonReader.ReadStructure();
		}

		private sealed partial class JsonReader
		{
			private const int DefaultBufferSize = 1024;
			private static readonly IFormatProvider FormatProvider = System.Globalization.CultureInfo.InvariantCulture;
			private static readonly string[] DateTimeFormats = {
				"yyyy-MM-ddTHH:mm:ss.fffzzz", // ISO 8601, with timezone
				"yyyy-MM-ddTHH:mm:ss.ffzzz",
				"yyyy-MM-ddTHH:mm:ss.fzzz",
				"yyyy-MM-ddTHH:mm:ssZ", // also ISO 8601, without timezone and without microseconds
				"yyyy-MM-ddTHH:mm:ss.fZ", // also ISO 8601, without timezone
				"yyyy-MM-ddTHH:mm:ss.ffZ",
				"yyyy-MM-ddTHH:mm:ss.fffZ",
				"yyyy-MM-ddTHH:mm:ss.ffffZ",
				"yyyy-MM-ddTHH:mm:ss.fffffZ",
				"yyyy-MM-ddTHH:mm:ss.ffffffZ",
				"yyyy-MM-ddTHH:mm:ss.fffffffZ"
			};

			const int LEXER_STATE_COMPLETE = -1;
			const int LEXER_STATE_START = 0;
			const int LEXER_STATE_LEXEME = 1;
			const int LEXER_STATE_QUOTED = 2;
			const int LEXER_STATE_QUOTED_ESCAPE = 3;
			const int LEXER_STATE_COMMENT_BEGINING = 4;
			const int LEXER_STATE_COMMENT_SINGLELINE = 5;
			const int LEXER_STATE_COMMENT_MULTILINE = 6;
			const int LEXER_STATE_COMMENT_MULTILINE_ENDING = 7;

			private readonly ArraySegment<char> LexemeTrue = new ArraySegment<char>(JsonNotation.True.ToCharArray(), 0, 4);
			private readonly ArraySegment<char> LexemeFalse = new ArraySegment<char>(JsonNotation.False.ToCharArray(), 0, 5);
			private readonly ArraySegment<char> LexemeNull = new ArraySegment<char>(JsonNotation.Null.ToCharArray(), 0, 4);

			private const int NumberNot = -1;
			private const int NumberInteger = 0;
			private const int NumberFloat = 1;
			private const int NumberFloatWithExp = 2;

			private readonly TextReader textReader;

			// tokenizing
			private ArraySegment<char> buffer;
			private ulong charactersReaded;
			private int lineNum = 1;
			private int colNum = 1;

			// parsing
			private JsonNode node;
			private ArraySegment<char> rawJson;

			private StrongBox<bool> trueBox;
			private StrongBox<bool> falseBox;
			private StrongBox<int> intBox;
			private StrongBox<DateTime> dateBox;
			private JsonValueBox jsonValueBox;

			private JsonNode Node { get { if (this.node.Token == JsonToken.None) this.NextToken(); return this.node; } }

			// statistics
			public ulong CharactersReaded { get { return this.charactersReaded; } }
			public int LineNumber { get { return this.lineNum; } }
			public int ColumnNumber { get { return this.colNum; } }

			public JsonReader(TextReader textReader, int bufferSize = DefaultBufferSize)
			{
				if (textReader == null) throw new ArgumentNullException("textReader");
				if (bufferSize <= 0) throw new ArgumentOutOfRangeException("bufferSize");

				this.buffer = new ArraySegment<char>(new char[bufferSize], 0, 0);
				this.textReader = textReader;
			}

			private bool NextToken()
			{
				this.rawJson = default(ArraySegment<char>);
				this.node = default(JsonNode);

				var fragments = default(ArraySegment<char>[]);
				var state = LEXER_STATE_COMPLETE;
				var lexemeSize = 0;

				var lexeme = this.NextLexeme(ref state);
				if (lexeme.Count == 0)
				{
					this.node = new JsonNode(JsonToken.EndOfStream);
					return false;
				}
				if (state != LEXER_STATE_COMPLETE)
				{
					var firstFragment = lexeme;
					var secondFragment = this.NextLexeme(ref state);

					if (state == LEXER_STATE_COMPLETE)
					{
						if (secondFragment.Count == 0)
						{
							lexeme = firstFragment;
							lexemeSize = lexeme.Count;
						}
						else
						{
							fragments = new ArraySegment<char>[2] { firstFragment, secondFragment };
							lexemeSize = firstFragment.Count + secondFragment.Count;
						}
					}
					else
					{
						var f = 0;
						fragments = new ArraySegment<char>[8];
						fragments[f++] = firstFragment;
						fragments[f++] = secondFragment;
						lexemeSize = firstFragment.Count + secondFragment.Count;

						do
						{
							lexeme = this.NextLexeme(ref state);

							if (lexeme.Count == 0) break;
							if (f == fragments.Length) Array.Resize(ref fragments, fragments.Length * 2);

							fragments[f++] = lexeme;
							lexemeSize += lexeme.Count;

						} while (state != LEXER_STATE_COMPLETE);
					}
				}
				else
				{
					lexemeSize = lexeme.Count;
				}

				if (lexemeSize == 1)
				{
					this.rawJson = fragments != null ? fragments[0] : lexeme;
					switch (rawJson.Array[rawJson.Offset])
					{
						case JsonNotation.Const0: this.node = new JsonNode(JsonToken.Value, this.Box(0)); return true;
						case JsonNotation.Const1: this.node = new JsonNode(JsonToken.Value, this.Box(1)); return true;
						case JsonNotation.Const2: this.node = new JsonNode(JsonToken.Value, this.Box(2)); return true;
						case JsonNotation.Const3: this.node = new JsonNode(JsonToken.Value, this.Box(3)); return true;
						case JsonNotation.Const4: this.node = new JsonNode(JsonToken.Value, this.Box(4)); return true;
						case JsonNotation.Const5: this.node = new JsonNode(JsonToken.Value, this.Box(5)); return true;
						case JsonNotation.Const6: this.node = new JsonNode(JsonToken.Value, this.Box(6)); return true;
						case JsonNotation.Const7: this.node = new JsonNode(JsonToken.Value, this.Box(7)); return true;
						case JsonNotation.Const8: this.node = new JsonNode(JsonToken.Value, this.Box(8)); return true;
						case JsonNotation.Const9: this.node = new JsonNode(JsonToken.Value, this.Box(9)); return true;
						case JsonNotation.BeginArray: this.node = new JsonNode(JsonToken.BeginArray); return true;
						case JsonNotation.BeginObject: this.node = new JsonNode(JsonToken.BeginObject); return true;
						case JsonNotation.EndArray: this.node = new JsonNode(JsonToken.EndOfArray); return true;
						case JsonNotation.EndObject: this.node = new JsonNode(JsonToken.EndOfObject); return true;
						default: throw JsonSerializationException.UnknownJsonNotation(this, new string(this.rawJson.Array, this.rawJson.Offset, this.rawJson.Count));
					}
				}
				if (lexemeSize == 4)
				{
					if (this.Match(lexeme, fragments, 0, LexemeTrue))
					{
						this.rawJson = LexemeTrue;
						this.node = new JsonNode(JsonToken.Value, this.Box(true));
						return true;
					}
					if (this.Match(lexeme, fragments, 0, LexemeNull))
					{
						this.rawJson = LexemeNull;
						this.node = new JsonNode(JsonToken.Null);
						return true;
					}
				}
				if (lexemeSize == 5 && this.Match(lexeme, fragments, 0, LexemeFalse))
				{
					this.rawJson = LexemeFalse;
					this.node = new JsonNode(JsonToken.Value, this.Box(false));
					return true;
				}

				// combine fragments into one lexeme
				if (fragments != null)
				{
					var combined = new char[lexemeSize];
					var offset = 0;
					foreach (var fragment in fragments)
					{
						if (fragment.Array == null) break;
						Buffer.BlockCopy(fragment.Array, fragment.Offset * 2, combined, offset * 2, fragment.Count * 2);
						offset += fragment.Count;
					}
					lexeme = new ArraySegment<char>(combined, 0, offset);
					//fragments = null;
				}

				this.rawJson = lexeme;
				if (lexeme.Array[lexeme.Offset] == JsonNotation.Quote) // start with quote
				{
					if (lexeme.Array[lexeme.Offset + lexeme.Count - 1] != JsonNotation.Quote) // not ending with quote
						throw JsonSerializationException.UnterminatedStringLiteral(this);

					if (lexemeSize == 2)
					{
						this.node = new JsonNode(JsonToken.Value, string.Empty);
						return true;
					}

					this.node = new JsonNode(JsonToken.Value, this.Box(lexeme));
					return true;
				}

				switch (this.ClasssifyNumber(lexeme))
				{
					case NumberInteger:
						this.node = new JsonNode(JsonToken.Value, this.Box(lexeme, typeof(long)));
						return true;
					case NumberFloat:
					case NumberFloatWithExp:
						this.node = new JsonNode(JsonToken.Value, this.Box(lexeme, typeof(double)));
						return true;
				}

				throw JsonSerializationException.UnknownJsonNotation(this, new string(this.rawJson.Array, this.rawJson.Offset, this.rawJson.Count));
			}

			private void ReadArrayBegin(bool advance = true)
			{
				if (this.Node.Token != JsonToken.BeginArray)
					throw JsonSerializationException.UnexpectedToken(this, JsonToken.BeginArray);
				if (this.IsEndOfStream())
					throw JsonSerializationException.UnexpectedToken(this, JsonToken.EndOfArray);

				if (advance)
					this.NextToken();
			}
			private void ReadArrayEnd(bool advance = true)
			{
				if (this.Node.Token != JsonToken.EndOfArray)
					throw JsonSerializationException.UnexpectedToken(this, JsonToken.EndOfArray);

				if (!this.IsEndOfStream() && advance)
					this.NextToken();
			}
			private void ReadObjectBegin(bool advance = true)
			{
				if (this.Node.Token != JsonToken.BeginObject)
					throw JsonSerializationException.UnexpectedToken(this, JsonToken.BeginObject);
				if (this.IsEndOfStream())
					throw JsonSerializationException.UnexpectedToken(this, JsonToken.EndOfObject);

				if (advance)
					this.NextToken();
			}
			private void ReadObjectEnd(bool advance = true)
			{
				if (this.Node.Token != JsonToken.EndOfObject)
					throw JsonSerializationException.UnexpectedToken(this, JsonToken.EndOfObject);

				if (!this.IsEndOfStream() && advance)
					this.NextToken();
			}
			private string ReadMember(bool advance = true)
			{
				if (this.Node.Token != JsonToken.Member && this.Node.Token != JsonToken.Value)
					throw JsonSerializationException.UnexpectedToken(this, JsonToken.Member, JsonToken.Value);

				var memberName = this.Node.AsString;

				if (!this.IsEndOfStream() && advance)
					this.NextToken();

				return memberName;
			}

			public Structure ReadStructure()
			{
				this.ReadObjectBegin();
				var structure = new Structure();

				while(this.Node.Token != JsonToken.EndOfObject)
				{
					var memberName = this.ReadMember();
					switch(memberName)
					{
						case "Collections":
							structure.Collections = this.ReadCollectionList();
							return structure; // shortcut, we are not interested in anything except Collections
						default:
							this.ReadAny();
							break;
					}
				}

				this.ReadObjectEnd();
				return structure;
			}
			private Structure.CollectionList ReadCollectionList()
			{
				var collections = new Structure.CollectionList();
				this.ReadObjectBegin();
				while(this.Node.Token != JsonToken.EndOfObject)
				{
					var memberName = this.ReadMember();
					switch(memberName)
					{
						case "ItemTemplate":
						{
							collections.ItemTemplate = new List<ItemTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadItemTemplate();
								collections.ItemTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "Reward":
						{
							collections.Reward = new List<Reward>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadReward();
								collections.Reward.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "Requirement":
						{
							collections.Requirement = new List<Requirement>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadRequirement();
								collections.Requirement.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "StageTemplate":
						{
							collections.StageTemplate = new List<StageTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadStageTemplate();
								collections.StageTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "AssignmentTemplate":
						{
							collections.AssignmentTemplate = new List<AssignmentTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadAssignmentTemplate();
								collections.AssignmentTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "AssignmentResolution":
						{
							collections.AssignmentResolution = new List<AssignmentResolution>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadAssignmentResolution();
								collections.AssignmentResolution.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "CashPointTemplate":
						{
							collections.CashPointTemplate = new List<CashPointTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadCashPointTemplate();
								collections.CashPointTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "Restrictions":
						{
							collections.Restrictions = new List<Restrictions>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadRestrictions();
								collections.Restrictions.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "Global":
						{
							collections.Global = new List<Global>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadGlobal();
								collections.Global.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "GunShopLot":
						{
							collections.GunShopLot = new List<GunShopLot>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadGunShopLot();
								collections.GunShopLot.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "TrainingTemplate":
						{
							collections.TrainingTemplate = new List<TrainingTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadTrainingTemplate();
								collections.TrainingTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "AbilityTemplate":
						{
							collections.AbilityTemplate = new List<AbilityTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadAbilityTemplate();
								collections.AbilityTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "CarTemplate":
						{
							collections.CarTemplate = new List<CarTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadCarTemplate();
								collections.CarTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "WeaponModificationTemplate":
						{
							collections.WeaponModificationTemplate = new List<WeaponModificationTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadWeaponModificationTemplate();
								collections.WeaponModificationTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "WeaponTemplate":
						{
							collections.WeaponTemplate = new List<WeaponTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadWeaponTemplate();
								collections.WeaponTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "UtilityItemBonusTemplate":
						{
							collections.UtilityItemBonusTemplate = new List<UtilityItemBonusTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadUtilityItemBonusTemplate();
								collections.UtilityItemBonusTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "UtilityItemTemplate":
						{
							collections.UtilityItemTemplate = new List<UtilityItemTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadUtilityItemTemplate();
								collections.UtilityItemTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "AbilityRollTemplate":
						{
							collections.AbilityRollTemplate = new List<AbilityRollTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadAbilityRollTemplate();
								collections.AbilityRollTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "PlaycardTemplate":
						{
							collections.PlaycardTemplate = new List<PlaycardTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadPlaycardTemplate();
								collections.PlaycardTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						case "NonPlayerPlaycardTemplate":
						{
							collections.NonPlayerPlaycardTemplate = new List<NonPlayerPlaycardTemplate>();
							if (this.Node.Token == JsonToken.Null)
							{
								this.NextToken();
								break;
							}
							this.ReadArrayBegin();
							while(this.Node.Token != JsonToken.EndOfArray)
							{
								var entry = this.ReadNonPlayerPlaycardTemplate();
								collections.NonPlayerPlaycardTemplate.Add(entry);
							}
							this.ReadArrayEnd();
							break;
						}
						default:
							this.ReadAny();
							break;
					}
				}
				this.ReadObjectEnd();
				return collections;
			}
			private ItemTemplate ReadItemTemplate()
			{
				var entry = new ItemTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'ItemTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Type":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Type = (ItemType) this.Node.AsSByte;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 6:
						{
							switch (attributeName)
							{
								case "Rarity":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Rarity' in entity 'ItemTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Rarity = (ItemRarity) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 10:
						{
							switch (attributeName)
							{
								case "Durability":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Durability = (Single) this.Node.AsSingle;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 11:
						{
							switch (attributeName)
							{
								case "DisplayName":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'DisplayName' in entity 'ItemTemplate'.");
									}
									entry._Localized_DisplayName = this.ReadLocalizedString();
									break;
								}
								case "Description":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Description' in entity 'ItemTemplate'.");
									}
									entry._Localized_Description = this.ReadLocalizedString();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 12:
						{
							switch (attributeName)
							{
								case "InitialFlags":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'InitialFlags' in entity 'ItemTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.InitialFlags = (ItemFlags) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Reward ReadReward()
			{
				var entry = new Reward();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'Reward'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Item":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Reference' for required attribute 'Item' in entity 'Reward'.");
									}
									entry._ReferenceTo_Item = this.ReadReference<ItemTemplate>();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 11:
						{
							switch (attributeName)
							{
								case "QuantityMin":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'QuantityMin' in entity 'Reward'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.QuantityMin = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								case "QuantityMax":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'QuantityMax' in entity 'Reward'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.QuantityMax = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Requirement ReadRequirement()
			{
				var entry = new Requirement();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'Requirement'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Item":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Reference' for required attribute 'Item' in entity 'Requirement'.");
									}
									entry._ReferenceTo_Item = this.ReadReference<ItemTemplate>();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 8:
						{
							switch (attributeName)
							{
								case "Quantity":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Quantity' in entity 'Requirement'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Quantity = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 10:
						{
							switch (attributeName)
							{
								case "IsConsumed":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Logical' for required attribute 'IsConsumed' in entity 'Requirement'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.IsConsumed = (Boolean) this.Node.AsBoolean;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private StageTemplate ReadStageTemplate()
			{
				var entry = new StageTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'StageTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Name":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Name' in entity 'StageTemplate'.");
									}
									entry._Localized_Name = this.ReadLocalizedString();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private AssignmentTemplate ReadAssignmentTemplate()
			{
				var entry = new AssignmentTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'AssignmentTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Type":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Type' in entity 'AssignmentTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Type = (AssignmentType) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 11:
						{
							switch (attributeName)
							{
								case "Resolutions":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'ObjectList' for required attribute 'Resolutions' in entity 'AssignmentTemplate'.");
									}
									var list = new List<AssignmentResolution>();
									this.ReadArrayBegin();
									while(this.Node.Token != JsonToken.EndOfArray)
									{
										if (this.Node.Token == JsonToken.Null)
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'AssignmentResolution' in 'Resolutions' attribute in entity 'AssignmentTemplate'.");

										var value = this.ReadAssignmentResolution();
										list.Add(value);
									}
									entry.Resolutions = new ReadOnlyCollection<AssignmentResolution>(list);
									this.ReadArrayEnd();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 16:
						{
							switch (attributeName)
							{
								case "ItemRequirements":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									var list = new List<Requirement>();
									this.ReadArrayBegin();
									while(this.Node.Token != JsonToken.EndOfArray)
									{
										if (this.Node.Token == JsonToken.Null)
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'Requirement' in 'ItemRequirements' attribute in entity 'AssignmentTemplate'.");

										var value = this.ReadRequirement();
										list.Add(value);
									}
									entry.ItemRequirements = new ReadOnlyCollection<Requirement>(list);
									this.ReadArrayEnd();
									break;
								}
								case "ExpirationPeriod":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Time' for required attribute 'ExpirationPeriod' in entity 'AssignmentTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.ExpirationPeriod = (TimeSpan) this.Node.AsTimeSpan;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 17:
						{
							switch (attributeName)
							{
								case "SpawnRestrictions":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry.SpawnRestrictions = this.ReadRestrictions();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private AssignmentResolution ReadAssignmentResolution()
			{
				var entry = new AssignmentResolution();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'AssignmentResolution'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 10:
						{
							switch (attributeName)
							{
								case "RollChance":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'RollChance' in entity 'AssignmentResolution'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.RollChance = (Single) this.Node.AsSingle;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 11:
						{
							switch (attributeName)
							{
								case "RewardItems":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									var list = new List<Reward>();
									this.ReadArrayBegin();
									while(this.Node.Token != JsonToken.EndOfArray)
									{
										if (this.Node.Token == JsonToken.Null)
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'Reward' in 'RewardItems' attribute in entity 'AssignmentResolution'.");

										var value = this.ReadReward();
										list.Add(value);
									}
									entry.RewardItems = new ReadOnlyCollection<Reward>(list);
									this.ReadArrayEnd();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 15:
						{
							switch (attributeName)
							{
								case "IsBadResolution":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Logical' for required attribute 'IsBadResolution' in entity 'AssignmentResolution'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.IsBadResolution = (Boolean) this.Node.AsBoolean;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 16:
						{
							switch (attributeName)
							{
								case "BonusRewardItems":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									var list = new List<Reward>();
									this.ReadArrayBegin();
									while(this.Node.Token != JsonToken.EndOfArray)
									{
										if (this.Node.Token == JsonToken.Null)
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'Reward' in 'BonusRewardItems' attribute in entity 'AssignmentResolution'.");

										var value = this.ReadReward();
										list.Add(value);
									}
									entry.BonusRewardItems = new ReadOnlyCollection<Reward>(list);
									this.ReadArrayEnd();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private CashPointTemplate ReadCashPointTemplate()
			{
				var entry = new CashPointTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'CashPointTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Type":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Type' in entity 'CashPointTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Type = (CashPointType) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 10:
						{
							switch (attributeName)
							{
								case "SpawnOrder":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'SpawnOrder' in entity 'CashPointTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.SpawnOrder = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 16:
						{
							switch (attributeName)
							{
								case "ProductionPeriod":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Time' for required attribute 'ProductionPeriod' in entity 'CashPointTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.ProductionPeriod = (TimeSpan) this.Node.AsTimeSpan;
									this.NextToken();
									break;
								}
								case "ProductionAmount":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'ProductionAmount' in entity 'CashPointTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.ProductionAmount = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 17:
						{
							switch (attributeName)
							{
								case "SpawnRestrictions":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry.SpawnRestrictions = this.ReadRestrictions();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Restrictions ReadRestrictions()
			{
				var entry = new Restrictions();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'Restrictions'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 8:
						{
							switch (attributeName)
							{
								case "StageMin":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry._ReferenceTo_StageMin = this.ReadReference<StageTemplate>();
									break;
								}
								case "StageMax":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry._ReferenceTo_StageMax = this.ReadReference<StageTemplate>();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Global ReadGlobal()
			{
				var entry = new Global();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'Global'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 15:
						{
							switch (attributeName)
							{
								case "GameDataVersion":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'GameDataVersion' in entity 'Global'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.GameDataVersion = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private GunShopLot ReadGunShopLot()
			{
				var entry = new GunShopLot();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'GunShopLot'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Item":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Reference' for required attribute 'Item' in entity 'GunShopLot'.");
									}
									entry._ReferenceTo_Item = this.ReadReference<ItemTemplate>();
									break;
								}
								case "Cost":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry.Cost = this.ReadRequirement();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 8:
						{
							switch (attributeName)
							{
								case "Quantity":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Quantity' in entity 'GunShopLot'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Quantity = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 12:
						{
							switch (attributeName)
							{
								case "Restrictions":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry.Restrictions = this.ReadRestrictions();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private TrainingTemplate ReadTrainingTemplate()
			{
				var entry = new TrainingTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'TrainingTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Cost":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Object' for required attribute 'Cost' in entity 'TrainingTemplate'.");
									}
									entry.Cost = this.ReadRequirement();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 5:
						{
							switch (attributeName)
							{
								case "Level":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Level' in entity 'TrainingTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Level = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 10:
						{
							switch (attributeName)
							{
								case "WeaponType":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'WeaponType' in entity 'TrainingTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.WeaponType = (WeaponType) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private AbilityTemplate ReadAbilityTemplate()
			{
				var entry = new AbilityTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'AbilityTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Type":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Type' in entity 'AbilityTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Type = (AbilityTemplateType) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 10:
						{
							switch (attributeName)
							{
								case "Parameter1":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'Parameter1' in entity 'AbilityTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Parameter1 = (Single) this.Node.AsSingle;
									this.NextToken();
									break;
								}
								case "Parameter2":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Parameter2 = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private CarTemplate ReadCarTemplate()
			{
				var entry = new CarTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'CarTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 7:
						{
							switch (attributeName)
							{
								case "Bonuses":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'ObjectList' for required attribute 'Bonuses' in entity 'CarTemplate'.");
									}
									var list = new List<AbilityRollTemplate>();
									this.ReadArrayBegin();
									while(this.Node.Token != JsonToken.EndOfArray)
									{
										if (this.Node.Token == JsonToken.Null)
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'AbilityRollTemplate' in 'Bonuses' attribute in entity 'CarTemplate'.");

										var value = this.ReadAbilityRollTemplate();
										list.Add(value);
									}
									entry.Bonuses = new ReadOnlyCollection<AbilityRollTemplate>(list);
									this.ReadArrayEnd();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 11:
						{
							switch (attributeName)
							{
								case "DisplayName":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'DisplayName' in entity 'CarTemplate'.");
									}
									entry._Localized_DisplayName = this.ReadLocalizedString();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private WeaponModificationTemplate ReadWeaponModificationTemplate()
			{
				var entry = new WeaponModificationTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'WeaponModificationTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 7:
						{
							switch (attributeName)
							{
								case "Ability":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Reference' for required attribute 'Ability' in entity 'WeaponModificationTemplate'.");
									}
									entry._ReferenceTo_Ability = this.ReadReference<AbilityTemplate>();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 18:
						{
							switch (attributeName)
							{
								case "Parameter1Override":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Parameter1Override = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								case "Parameter2Override":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Parameter2Override = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private WeaponTemplate ReadWeaponTemplate()
			{
				var entry = new WeaponTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'WeaponTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Type":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Type' in entity 'WeaponTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Type = (WeaponType) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 10:
						{
							switch (attributeName)
							{
								case "AttackZone":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'AttackZone' in entity 'WeaponTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.AttackZone = (WeaponAttackType) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 12:
						{
							switch (attributeName)
							{
								case "MagazineSize":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.MagazineSize = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 13:
						{
							switch (attributeName)
							{
								case "Modifications":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									var list = new List<WeaponModificationTemplate>();
									this.ReadArrayBegin();
									while(this.Node.Token != JsonToken.EndOfArray)
									{
										if (this.Node.Token == JsonToken.Null)
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'WeaponModificationTemplate' in 'Modifications' attribute in entity 'WeaponTemplate'.");

										var value = this.ReadWeaponModificationTemplate();
										list.Add(value);
									}
									entry.Modifications = new ReadOnlyCollection<WeaponModificationTemplate>(list);
									this.ReadArrayEnd();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 15:
						{
							switch (attributeName)
							{
								case "DamageHitPoints":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'DamageHitPoints' in entity 'WeaponTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.DamageHitPoints = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 17:
						{
							switch (attributeName)
							{
								case "DamageArmorPoints":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.DamageArmorPoints = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 21:
						{
							switch (attributeName)
							{
								case "ModificationSlotCount":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'ModificationSlotCount' in entity 'WeaponTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.ModificationSlotCount = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private UtilityItemBonusTemplate ReadUtilityItemBonusTemplate()
			{
				var entry = new UtilityItemBonusTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'UtilityItemBonusTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 7:
						{
							switch (attributeName)
							{
								case "Ability":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Reference' for required attribute 'Ability' in entity 'UtilityItemBonusTemplate'.");
									}
									entry._ReferenceTo_Ability = this.ReadReference<AbilityTemplate>();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 18:
						{
							switch (attributeName)
							{
								case "Parameter1Override":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Parameter1Override = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								case "Parameter2Override":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Parameter2Override = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private UtilityItemTemplate ReadUtilityItemTemplate()
			{
				var entry = new UtilityItemTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'UtilityItemTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Slot":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Slot' in entity 'UtilityItemTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Slot = (ItemSlot) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 7:
						{
							switch (attributeName)
							{
								case "Bonuses":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'ObjectList' for required attribute 'Bonuses' in entity 'UtilityItemTemplate'.");
									}
									var list = new List<UtilityItemBonusTemplate>();
									this.ReadArrayBegin();
									while(this.Node.Token != JsonToken.EndOfArray)
									{
										if (this.Node.Token == JsonToken.Null)
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'UtilityItemBonusTemplate' in 'Bonuses' attribute in entity 'UtilityItemTemplate'.");

										var value = this.ReadUtilityItemBonusTemplate();
										list.Add(value);
									}
									entry.Bonuses = new ReadOnlyCollection<UtilityItemBonusTemplate>(list);
									this.ReadArrayEnd();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private AbilityRollTemplate ReadAbilityRollTemplate()
			{
				var entry = new AbilityRollTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'AbilityRollTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 7:
						{
							switch (attributeName)
							{
								case "Ability":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Reference' for required attribute 'Ability' in entity 'AbilityRollTemplate'.");
									}
									entry._ReferenceTo_Ability = this.ReadReference<AbilityTemplate>();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 10:
						{
							switch (attributeName)
							{
								case "RollChance":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'RollChance' in entity 'AbilityRollTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.RollChance = (Single) this.Node.AsSingle;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 13:
						{
							switch (attributeName)
							{
								case "Parameter1Min":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Parameter1Min = (Single) this.Node.AsSingle;
									this.NextToken();
									break;
								}
								case "Parameter1Max":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Parameter1Max = (Single) this.Node.AsSingle;
									this.NextToken();
									break;
								}
								case "Parameter2Min":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Parameter2Min = (Single) this.Node.AsSingle;
									this.NextToken();
									break;
								}
								case "Parameter2Max":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Parameter2Max = (Single) this.Node.AsSingle;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private PlaycardTemplate ReadPlaycardTemplate()
			{
				var entry = new PlaycardTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'PlaycardTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 5:
						{
							switch (attributeName)
							{
								case "Level":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Level' in entity 'PlaycardTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Level = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 6:
						{
							switch (attributeName)
							{
								case "Rarity":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Rarity' in entity 'PlaycardTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Rarity = (ItemRarity) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 8:
						{
							switch (attributeName)
							{
								case "Accuracy":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'Accuracy' in entity 'PlaycardTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Accuracy = (Single) this.Node.AsSingle;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 9:
						{
							switch (attributeName)
							{
								case "HitPoints":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'HitPoints' in entity 'PlaycardTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.HitPoints = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								case "Abilities":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									var list = new List<AbilityRollTemplate>();
									this.ReadArrayBegin();
									while(this.Node.Token != JsonToken.EndOfArray)
									{
										if (this.Node.Token == JsonToken.Null)
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'AbilityRollTemplate' in 'Abilities' attribute in entity 'PlaycardTemplate'.");

										var value = this.ReadAbilityRollTemplate();
										list.Add(value);
									}
									entry.Abilities = new ReadOnlyCollection<AbilityRollTemplate>(list);
									this.ReadArrayEnd();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 11:
						{
							switch (attributeName)
							{
								case "MeleeDamage":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'MeleeDamage' in entity 'PlaycardTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.MeleeDamage = (Int32) this.Node.AsInt32;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 25:
						{
							switch (attributeName)
							{
								case "MeleeCriticalStrikeChance":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'MeleeCriticalStrikeChance' in entity 'PlaycardTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.MeleeCriticalStrikeChance = (Single) this.Node.AsSingle;
									this.NextToken();
									break;
								}
								case "RangeCriticalStrikeChance":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'RangeCriticalStrikeChance' in entity 'PlaycardTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.RangeCriticalStrikeChance = (Single) this.Node.AsSingle;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private NonPlayerPlaycardTemplate ReadNonPlayerPlaycardTemplate()
			{
				var entry = new NonPlayerPlaycardTemplate();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'NonPlayerPlaycardTemplate'.");
									}
									if(this.Node.Token != JsonToken.Value)
										throw JsonSerializationException.UnexpectedToken(this, JsonToken.Value);

									entry.Id = (String) this.Node.AsString;
									this.NextToken();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 5:
						{
							switch (attributeName)
							{
								case "Armor":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry._ReferenceTo_Armor = this.ReadReference<UtilityItemTemplate>();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 6:
						{
							switch (attributeName)
							{
								case "Helmet":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry._ReferenceTo_Helmet = this.ReadReference<UtilityItemTemplate>();
									break;
								}
								case "Weapon":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Reference' for required attribute 'Weapon' in entity 'NonPlayerPlaycardTemplate'.");
									}
									entry._ReferenceTo_Weapon = this.ReadReference<WeaponTemplate>();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 8:
						{
							switch (attributeName)
							{
								case "Playcard":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Reference' for required attribute 'Playcard' in entity 'NonPlayerPlaycardTemplate'.");
									}
									entry._ReferenceTo_Playcard = this.ReadReference<PlaycardTemplate>();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 11:
						{
							switch (attributeName)
							{
								case "UtilityItem":
								{
									if (this.Node.Token == JsonToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry._ReferenceTo_UtilityItem = this.ReadReference<UtilityItemTemplate>();
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}

			private object ReadAny(bool advance = true)
			{
				switch(this.Node.Token)
				{
					case JsonToken.BeginArray: return this.ReadArray(advance);
					case JsonToken.BeginObject: return this.ReadObject(advance);
					case JsonToken.Null: if (advance) this.NextToken(); return null;
					case JsonToken.Value: var value = this.Node.AsObject; if (advance) this.NextToken(); return value;
					default: throw JsonSerializationException.UnexpectedToken(this, JsonToken.BeginArray, JsonToken.BeginObject, JsonToken.Null, JsonToken.Value);
				}
			}
			private object[] ReadArray(bool advance = true)
			{
				var list = new List<object>();
				this.ReadArrayBegin();
				while(this.Node.Token != JsonToken.EndOfArray)
				{
					var value = this.ReadAny();
					list.Add(value);
				}
				this.ReadArrayEnd(advance);
				return list.ToArray();
			}
			private Dictionary<string, object> ReadObject(bool advance = true)
			{
				var dictionary = new Dictionary<string, object>();
				this.ReadObjectBegin();
				while(this.Node.Token != JsonToken.EndOfObject)
				{
					var key = this.ReadMember();
					var value = this.ReadAny();
					dictionary[key] = value;
				}
				this.ReadObjectEnd(advance);
				return dictionary;
			}
			private LocalizedString ReadLocalizedString(bool advance = true)
			{
				var locString = new LocalizedString();
				this.ReadObjectBegin();
				while(this.Node.Token != JsonToken.EndOfObject)
				{
					var key = this.ReadMember();
					var value = Convert.ToString(this.ReadAny(), FormatProvider);
					((IDictionary<string, string>)locString)[key] = value;
				}
				this.ReadObjectEnd(advance);
				return locString;
			}
			private Reference<T> ReadReference<T>(bool advance = true) where T : Document
			{
				var reference = new Reference<T>();
				this.ReadObjectBegin();
				while (this.Node.Token != JsonToken.EndOfObject)
				{
					var key = this.ReadMember();
					if (key == "Id")
						reference.Id = this.ReadAny();
					else
						this.ReadAny();
				}
				this.ReadObjectEnd(advance);
				return reference;
			}

			private bool IsEndOfStream()
			{
				return this.Node.Token == JsonToken.EndOfStream;
			}
			private bool IsNull()
			{
				return this.Node.Token == JsonToken.Null;
			}

			private object Box(ArraySegment<char> lexeme)
			{
				if (this.jsonValueBox == null)
					this.jsonValueBox = new JsonValueBox(FormatProvider);

				this.jsonValueBox.Store(lexeme, typeof(string));

				return this.jsonValueBox;
			}
			private object Box(ArraySegment<char> lexeme, Type type)
			{
				if (type == null) throw new ArgumentNullException("type");

				if (this.jsonValueBox == null)
					this.jsonValueBox = new JsonValueBox(FormatProvider);

				this.jsonValueBox.Store(lexeme, type);
				return this.jsonValueBox;
			}
			private object Box(int value)
			{
				if (this.intBox == null)
					this.intBox = new StrongBox<int>(FormatProvider);

				this.intBox.Store(value);
				return this.intBox;
			}
			private object Box(DateTime value)
			{
				if (this.dateBox == null)
					this.dateBox = new StrongBox<DateTime>(FormatProvider);

				this.dateBox.Store(value);

				return this.intBox;
			}
			private object Box(bool value)
			{
				if (value)
				{
					if (this.trueBox == null)
						this.trueBox = new StrongBox<bool>(true, FormatProvider);
					return trueBox;
				}
				if (this.falseBox == null)
					this.falseBox = new StrongBox<bool>(false, FormatProvider);
				return falseBox;
			}

			private bool Match(ArraySegment<char> lexeme, ArraySegment<char>[] fragments, int offset, ArraySegment<char> matchTo)
			{
				var count = matchTo.Count;
				if (fragments == null)
				{
					for (int i = 0; i < count; i++)
					{
						if (lexeme.Array[lexeme.Offset + i] != matchTo.Array[matchTo.Offset + i])
							return false;
					}

					return true;
				}
				var mo = 0;
				foreach (var fg in fragments)
				{
					if (fg.Array == null) break;

					for (int i = 0; i < fg.Count; i++)
					{
						if (fg.Array[fg.Offset + i] != matchTo.Array[mo])
							return false;

						mo++;
					}
				}

				return true;
			}
			private int ClasssifyNumber(ArraySegment<char> lexeme)
			{
				const int IntPart = 0;
				const int FracPart = 1;
				const int ExpPart = 2;
				const char POINT = '.';
				const char EXP = 'E';
				const char PLUS = '+';
				const char MINUS = '-';

				var buffer = lexeme.Array;
				var offset = lexeme.Offset;
				var count = lexeme.Offset + lexeme.Count;

				var part = IntPart;

				for (int i = offset; i < count; i++)
				{
					var ch = buffer[i];

					switch (part)
					{
						case IntPart:
							if (ch == MINUS)
							{
								if (i != offset)
									return NumberNot;
							}
							else if (ch == POINT)
							{
								if (i == offset)
									return NumberNot; // decimal point as first character
								part = FracPart;
							}
							else if (Char.ToUpper(ch) == EXP)
							{
								if (i == offset)
									return NumberNot; // exp at first character
								part = ExpPart;
							}
							else if (!Char.IsDigit(ch))
								return NumberNot; // non digit character in int part
							break;
						case FracPart:
							if (Char.ToUpper(ch) == EXP)
							{
								if (i == offset)
									return NumberNot; // exp at first character
								part = ExpPart;
							}
							else if (!Char.IsDigit(ch))
								return NumberNot; // non digit character in frac part
							break;
						case ExpPart:
							if ((ch == PLUS || ch == MINUS))
							{
								if (Char.ToUpper(buffer[i - 1]) != EXP)
									return NumberNot; // sign not at start of exp part
							}
							else if (!Char.IsDigit(ch))
								return NumberNot; // non digit character in exp part
							break;
					}
				}
				return part;
			}
			private ArraySegment<char> NextLexeme(ref int state)
			{
			start:
				if (this.buffer.Count == 0 && this.EnsureBuffer() == 0)
				{
					state = LEXER_STATE_COMPLETE;
					return this.buffer; // end of stream
				}

				var array = this.buffer.Array;
				var offset = this.buffer.Offset;
				var length = offset + this.buffer.Count;

				if (state == LEXER_STATE_COMPLETE)
					state = LEXER_STATE_START;

				for (var i = offset; i < length; i++)
				{
					this.colNum++;
					this.charactersReaded++;
					switch (state)
					{
						case LEXER_STATE_START:
							switch (array[i])
							{
								case JsonNotation.Newline: this.lineNum++; this.colNum = 1; goto case JsonNotation.Space;
								case JsonNotation.Space:
								case JsonNotation.Return:
								case JsonNotation.Tab:
								case JsonNotation.IdentifierSeparator:
								case JsonNotation.ValueSeparator:
									continue; // insignificant whitespaces
								case JsonNotation.Comment:
									state = LEXER_STATE_COMMENT_BEGINING;
									continue;
								case JsonNotation.EndArray:
								case JsonNotation.EndObject:
								case JsonNotation.BeginObject:
								case JsonNotation.BeginArray:
									state = LEXER_STATE_COMPLETE;
									this.buffer = new ArraySegment<char>(array, i + 1, length - i - 1);
									return new ArraySegment<char>(array, i, 1);
								case JsonNotation.Quote:
									offset = i;
									state = LEXER_STATE_QUOTED;
									continue;
								default:
									if (Char.IsWhiteSpace(array[i]))
										goto case JsonNotation.Space;
									offset = i;
									state = LEXER_STATE_LEXEME;
									continue;
							}
						case LEXER_STATE_LEXEME:
							switch (array[i])
							{
								// lexeme terminators
								case JsonNotation.Space:
								case JsonNotation.Newline:
								case JsonNotation.Return:
								case JsonNotation.Tab:
								case JsonNotation.IdentifierSeparator:
								case JsonNotation.ValueSeparator:
								case JsonNotation.EndArray:
								case JsonNotation.EndObject:
								case JsonNotation.BeginObject:
								case JsonNotation.BeginArray:
									state = LEXER_STATE_COMPLETE;
									this.buffer = new ArraySegment<char>(array, i, length - i);
									return new ArraySegment<char>(array, offset, i - offset);
								default:
									if (Char.IsWhiteSpace(array[i]))
										goto case JsonNotation.Space;
									continue;
							}
						case LEXER_STATE_QUOTED:
						case LEXER_STATE_QUOTED_ESCAPE:
							switch (array[i])
							{
								case JsonNotation.Newline:
								case JsonNotation.Return:
									throw JsonSerializationException.UnterminatedStringLiteral(this);
								case JsonNotation.Quote:
									if (state == LEXER_STATE_QUOTED_ESCAPE)
									{
										state = LEXER_STATE_QUOTED;
										continue;
									}

									state = LEXER_STATE_COMPLETE;
									this.buffer = new ArraySegment<char>(array, i + 1, length - i - 1);
									return new ArraySegment<char>(array, offset, i - offset + 1);
								case JsonNotation.Escape:
									state = LEXER_STATE_QUOTED_ESCAPE; // skips escaped quotes - \"
									continue;
								default:
									if (state == LEXER_STATE_QUOTED_ESCAPE)
										state = LEXER_STATE_QUOTED;
									continue;
							}
						case LEXER_STATE_COMMENT_BEGINING:
							switch (array[i])
							{
								case JsonNotation.Comment:
									state = LEXER_STATE_COMMENT_SINGLELINE;
									continue;
								case JsonNotation.CommentMultiline:
									state = LEXER_STATE_COMMENT_MULTILINE;
									continue;
								default:
									throw JsonSerializationException.UnknownJsonNotation(this, JsonNotation.Comment + array[i].ToString());
							}
						case LEXER_STATE_COMMENT_SINGLELINE:
							switch (array[i])
							{
								case JsonNotation.Newline:
								case JsonNotation.Return:
									state = LEXER_STATE_START;
									continue;
								default: continue;
							}
						case LEXER_STATE_COMMENT_MULTILINE_ENDING:
						case LEXER_STATE_COMMENT_MULTILINE:
							switch (array[i])
							{
								case JsonNotation.CommentMultiline:
									state = LEXER_STATE_COMMENT_MULTILINE_ENDING;
									continue;
								case JsonNotation.Comment:
									if (state == LEXER_STATE_COMMENT_MULTILINE_ENDING)
										state = LEXER_STATE_START;
									continue;
								default: continue;
							}

					}
				}

				if (state == LEXER_STATE_START || state == LEXER_STATE_COMMENT_BEGINING || state == LEXER_STATE_COMMENT_MULTILINE || state == LEXER_STATE_COMMENT_MULTILINE_ENDING || state == LEXER_STATE_COMMENT_SINGLELINE)
				{
					// no lexemes found in current buffer
					this.buffer = new ArraySegment<char>(array, 0, 0); // empty buffer
					goto start; // restart
				}

				// allocate new buffer for next fragment
				this.buffer = new ArraySegment<char>(new char[array.Length], 0, 0);

				return new ArraySegment<char>(array, offset, length - offset);
			}
			private int EnsureBuffer()
			{
				var chars = this.buffer.Array;
				var offset = this.buffer.Offset;
				var count = this.buffer.Count;

				if (count == 0)
				{
					offset = 0;
					count = this.FillBuffer(chars, 0);
				}
				else if (offset >= chars.Length / 2)
				{
					Buffer.BlockCopy(chars, offset * 2, chars, 0, count);
					offset = 0;
					count += this.FillBuffer(chars, offset + count);
				}
				else
				{
					count += this.FillBuffer(chars, offset + count);
				}

				this.buffer = new ArraySegment<char>(chars, offset, count);
				return count;
			}

			private int FillBuffer(char[] buffer, int offset)
			{
				var count = buffer.Length - offset;
				if (count <= 0)
					return offset;

				var read = this.textReader.Read(buffer, offset, count);
				return offset + read;
			}

			private struct JsonNode
			{
				private readonly object value;

				public readonly JsonToken Token;
				public readonly Type ValueType;

				public bool HasValue { get { return this.ValueType != typeof(void); } }

				public JsonNode(JsonToken token)
				{
					this.Token = token;
					this.value = null;
					this.ValueType = typeof(void);
				}
				public JsonNode(JsonToken token, object value)
				{
					if (value == null) throw new ArgumentNullException("value");

					this.Token = token;
					this.value = value;
					this.ValueType = value is IStrongBox ? ((IStrongBox)value).ValueType : value.GetType();
				}

				public bool AsBoolean
				{
					get
					{
						if (this.value is IStrongBox) return (this.value as IStrongBox).AsBoolean;
						return Convert.ToBoolean(this.value, FormatProvider);
					}
				}
				public byte AsByte
				{
					get
					{
						if (this.value is IStrongBox) return (this.value as IStrongBox).AsByte;
						return Convert.ToByte(this.value, FormatProvider);
					}
				}
				public short AsInt16
				{
					get
					{
						if (this.value is IStrongBox) return (this.value as IStrongBox).AsInt16;
						return Convert.ToInt16(this.value, FormatProvider);
					}
				}
				public int AsInt32
				{
					get
					{
						if (this.value is IStrongBox) return (this.value as IStrongBox).AsInt32;
						return Convert.ToInt32(this.value, FormatProvider);
					}
				}
				public long AsInt64
				{
					get
					{
						if (this.value is IStrongBox) return (this.value as IStrongBox).AsInt64;
						return Convert.ToInt64(this.value, FormatProvider);
					}
				}
				public sbyte AsSByte
				{
					get
					{
						if (this.value is IStrongBox) return (this.value as IStrongBox).AsSByte;
						return Convert.ToSByte(this.value, FormatProvider);
					}
				}
				public ushort AsUInt16
				{
					get
					{
						if (this.value is IStrongBox) return (this.value as IStrongBox).AsUInt16;
						return Convert.ToUInt16(this.value, FormatProvider);
					}
				}
				public uint AsUInt32
				{
					get
					{
						if (this.value is IStrongBox) return (this.value as IStrongBox).AsUInt32;
						return Convert.ToUInt32(this.value, FormatProvider);
					}
				}
				public ulong AsUInt64
				{
					get
					{
						if (this.value is IStrongBox) return (this.value as IStrongBox).AsUInt64;
						return Convert.ToUInt64(this.value, FormatProvider);
					}
				}
				public float AsSingle
				{
					get
					{
						if (this.value is IStrongBox) return (this.value as IStrongBox).AsSingle;
						return Convert.ToSingle(this.value, FormatProvider);
					}
				}
				public double AsDouble
				{
					get
					{
						if (this.value is IStrongBox) return (this.value as IStrongBox).AsDouble;
						return Convert.ToDouble(this.value, FormatProvider);
					}
				}
				public decimal AsDecimal
				{
					get
					{
						if (this.value is IStrongBox) return (this.value as IStrongBox).AsDecimal;
						return Convert.ToDecimal(this.value, FormatProvider);
					}
				}
				public string AsString
				{
					get
					{
						var value = this.value;
						if (this.value is IStrongBox) value = (this.value as IStrongBox).AsObject;
						return Convert.ToString(value, FormatProvider);
					}
				}
				public DateTime AsDateTime
				{
					get
					{
						var dateTimeStr = this.AsString;
						var date = DateTime.ParseExact(dateTimeStr, DateTimeFormats, FormatProvider, System.Globalization.DateTimeStyles.AssumeUniversal);
						return date;
					}
				}
				public TimeSpan AsTimeSpan
				{
					get
					{
						var timeSpanStr = this.AsString;
						var timeSpan = TimeSpan.Parse(timeSpanStr);
						return timeSpan;
					}
				}
				public object AsObject
				{
					get
					{
						if (this.value is IStrongBox) return (this.value as IStrongBox).AsObject;
						return this.value;
					}
				}

				public override string ToString()
				{
					return string.Format(FormatProvider, "{0}:{1}", this.Token, this.value);
				}
			}

			private interface IStrongBox
			{
				bool AsBoolean { get; }
				byte AsByte { get; }
				short AsInt16 { get; }
				int AsInt32 { get; }
				long AsInt64 { get; }
				sbyte AsSByte { get; }
				ushort AsUInt16 { get; }
				uint AsUInt32 { get; }
				ulong AsUInt64 { get; }
				float AsSingle { get; }
				double AsDouble { get; }
				decimal AsDecimal { get; }
				Type ValueType { get; }
				object AsObject { get; }

				void Store<T>(T value);
			}

			[System.Diagnostics.DebuggerDisplay("<{ValueType}>{AsObject}")]
			private sealed class StrongBox<ValueT> : IStrongBox
			{
				private static readonly Type ValueType = typeof(ValueT);

				private readonly IFormatProvider formatProvider;

				public ValueT Value;

				public StrongBox(ValueT value, IFormatProvider formatProvider)
					: this(formatProvider)
				{
					this.Value = value;
				}
				public StrongBox(IFormatProvider formatProvider)
				{
					if (formatProvider == null) throw new ArgumentNullException("formatProvider");

					this.formatProvider = formatProvider;
				}

				Type IStrongBox.ValueType { get { return ValueType; } }
				public bool AsBoolean { get	{ return Convert.ToBoolean((object)Value, this.formatProvider);	} }
				public byte AsByte { get { return Convert.ToByte((object)Value, this.formatProvider); } }
				public short AsInt16 { get { return Convert.ToInt16((object)Value, this.formatProvider); } }
				public int AsInt32 { get { return Convert.ToInt32((object)Value, this.formatProvider); } }
				public long AsInt64 { get { return Convert.ToInt64((object)Value, this.formatProvider); } }
				public sbyte AsSByte { get { return Convert.ToSByte((object)Value, this.formatProvider); } }
				public ushort AsUInt16 { get { return Convert.ToUInt16((object)Value, this.formatProvider); } }
				public uint AsUInt32 { get { return Convert.ToUInt32((object)Value, this.formatProvider); } }
				public ulong AsUInt64 { get { return Convert.ToUInt64((object)Value, this.formatProvider); } }
				public float AsSingle { get { return Convert.ToSingle((object)Value, this.formatProvider); } }
				public double AsDouble { get { return Convert.ToDouble((object)Value, this.formatProvider); } }
				public decimal AsDecimal { get { return Convert.ToDecimal((object)Value, this.formatProvider); } }
				public object AsObject { get { return this.Value; } }

				public void Store<T>(T value)
				{
					var type = typeof(T);
					if (type != ValueType) throw new ArgumentException(string.Format("Unable to store value of type '{0}' in container of type '{1}'", typeof(ValueT), type));
					this.Value = (ValueT)(object)value;
				}

				public override string ToString()
				{
					return Convert.ToString(this.Value, this.formatProvider);
				}
			}

			private sealed class JsonValueBox : IStrongBox
			{
				private readonly IFormatProvider formatProvider;
				private ArraySegment<char> value;
				private Type valueType;

				public Type ValueType { get { return this.valueType; } }

				public bool AsBoolean { get { return Convert.ToBoolean(this.LoadString(), FormatProvider); } }
				public byte AsByte { get { return checked((byte)this.LoadUInt32()); } }
				public short AsInt16 { get { return checked((short)this.LoadInt32()); } }
				public int AsInt32 { get { return this.LoadInt32(); } }
				public long AsInt64 { get { return this.LoadInt64(); } }
				public sbyte AsSByte { get { return checked((sbyte)this.LoadInt32()); } }
				public ushort AsUInt16 { get { return checked((ushort)this.LoadUInt32()); } }
				public uint AsUInt32 { get { return this.LoadUInt32(); } }
				public ulong AsUInt64 { get { return this.LoadUInt64(); } }
				public float AsSingle { get { return Convert.ToSingle(this.LoadString(), FormatProvider); } }
				public double AsDouble { get { return Convert.ToDouble(this.LoadString(), FormatProvider); } }
				public decimal AsDecimal { get { return Convert.ToDecimal(this.LoadString(), FormatProvider); } }
				public object AsObject { get { return this.LoadString(); } }

				public JsonValueBox(IFormatProvider formatProvider)
				{
					if (formatProvider == null) throw new ArgumentNullException("formatProvider");

					this.formatProvider = formatProvider;
				}

				private uint LoadUInt32()
				{
					var array = this.value.Array;
					var offset = this.value.Offset;
					var count = this.value.Count;

					if (array[offset] == JsonNotation.Quote && array[offset + count - 1] == JsonNotation.Quote) // quoted
					{
						offset++;
						count -= 2;
					}

					return JsonUtils.StringToUInt32(array, offset, count, this.formatProvider);
				}
				private ulong LoadUInt64()
				{
					var array = this.value.Array;
					var offset = this.value.Offset;
					var count = this.value.Count;

					if (array[offset] == JsonNotation.Quote && array[offset + count - 1] == JsonNotation.Quote) // quoted
					{
						offset++;
						count -= 2;
					}

					return JsonUtils.StringToUInt64(array, offset, count, this.formatProvider);
				}
				private int LoadInt32()
				{
					var array = this.value.Array;
					var offset = this.value.Offset;
					var count = this.value.Count;

					if (array[offset] == JsonNotation.Quote && array[offset + count - 1] == JsonNotation.Quote) // quoted
					{
						offset++;
						count -= 2;
					}

					return JsonUtils.StringToInt32(array, offset, count, this.formatProvider);
				}
				private long LoadInt64()
				{
					var array = this.value.Array;
					var offset = this.value.Offset;
					var count = this.value.Count;

					if (array[offset] == JsonNotation.Quote && array[offset + count - 1] == JsonNotation.Quote) // quoted
					{
						offset++;
						count -= 2;
					}

					return JsonUtils.StringToInt64(array, offset, count, this.formatProvider);
				}
				private string LoadString()
				{
					var array = this.value.Array;
					var offset = this.value.Offset;
					var count = this.value.Count;

					if (array[offset] == JsonNotation.Quote && array[offset + count - 1] == JsonNotation.Quote) // quoted
					{
						offset++;
						count -= 2;
					}

					return JsonUtils.UnescapeBuffer(array, offset, count);
				}

				public void Store<T>(T value)
				{
					this.value = (ArraySegment<char>)(object)value;
					this.valueType = typeof(string);
				}

				public void Store(ArraySegment<char> value, Type valueType)
				{
					if (valueType == null) throw new ArgumentNullException("valueType");

					this.value = value;
					this.valueType = valueType;
				}

				public override string ToString()
				{
					return this.LoadString();
				}
			}

			private static class JsonUtils
			{
				public static string UnescapeBuffer(char[] charsToUnescape, int offset, int count)
				{
					var sb = new StringBuilder(count);
					var plainStart = offset;
					var plainLen = 0;
					var end = offset + count;
					for (int i = offset; i < end; i++)
					{

						var ch = charsToUnescape[i];
						if (ch == '\\')
						{
							var seqLength = 1;
							// append unencoded chunk
							if (plainLen != 0)
							{
								sb.Append(charsToUnescape, plainStart, plainLen);
								plainLen = 0;
							}

							var seqKind = charsToUnescape[i + 1];
							switch (seqKind)
							{
								case 'n': sb.Append('\n'); break;
								case 'r': sb.Append('\r'); break;
								case 'b': sb.Append('\b'); break;
								case 'f': sb.Append('\f'); break;
								case 't': sb.Append('\t'); break;
								case '\\': sb.Append('\\'); break;
								case '\'': sb.Append('\''); break;
								case '\"': sb.Append('\"'); break;
								// unicode symbol
								case 'u':
									sb.Append((char)HexStringToUInt32(charsToUnescape, i + 2, 4));
									seqLength = 5;
									break;
								// latin hex encoded symbol
								case 'x':
									sb.Append((char)HexStringToUInt32(charsToUnescape, i + 2, 2));
									seqLength = 3;
									break;
								// latin dec encoded symbol
								case '1':
								case '2':
								case '3':
								case '4':
								case '5':
								case '6':
								case '7':
								case '8':
								case '9':
								case '0':
									sb.Append((char)StringToInt32(charsToUnescape, i + 1, 3));
									seqLength = 3;
									break;
								default:
									throw JsonSerializationException.UnknownEscapeSequence("\\" + seqKind, null);
							}

							// set next chunk start right after this escape
							plainStart = i + seqLength + 1;
							i += seqLength;
						}
						else
							plainLen++;
					}

					// append last unencoded chunk
					if (plainLen != 0)
						sb.Append(charsToUnescape, plainStart, plainLen);

					return sb.ToString();
				}

				public static uint HexStringToUInt32(char[] buffer, int offset, int count)
				{
					const uint ZERO = (ushort)'0';
					const uint a = (ushort)'a';
					const uint A = (ushort)'A';

					var result = 0u;
					for (var i = 0; i < count; i++)
					{
						var c = buffer[offset + i];
						var d = 0u;
						if (c >= '0' && c <= '9')
							d = (c - ZERO);
						else if (c >= 'a' && c <= 'f')
							d = 10u + (c - a);
						else if (c >= 'A' && c <= 'F')
							d = 10u + (c - A);
						else
							throw new FormatException();

						result = 16u * result + d;
					}

					return result;
				}

				public static long StringToInt64(char[] buffer, int offset, int count, IFormatProvider formatProvider = null)
				{
					const ulong ZERO = (ushort)'0';

					var result = 0UL;
					var neg = false;
					for (var i = 0; i < count; i++)
					{
						var c = buffer[offset + i];
						if (i == 0 && c == '-')
						{
							neg = true;
							continue;
						}
						if (c < '0' || c > '9')
							throw new FormatException();

						result = checked(10UL * result + (c - ZERO));
					}

					if (neg)
						return -(long)(result);
					return (long)result;
				}
				public static int StringToInt32(char[] buffer, int offset, int count, IFormatProvider formatProvider = null)
				{
					const uint ZERO = (ushort)'0';

					var result = 0u;
					var neg = false;
					for (var i = 0; i < count; i++)
					{
						var c = buffer[offset + i];
						if (i == 0 && c == '-')
						{
							neg = true;
							continue;
						}
						if (c < '0' || c > '9')
							throw new FormatException();

						result = checked(10u * result + (c - ZERO));
					}

					if (neg)
						return -(int)(result);
					return (int)result;
				}
				public static ulong StringToUInt64(char[] buffer, int offset, int count, IFormatProvider formatProvider = null)
				{
					const ulong ZERO = (ushort)'0';

					var result = 0UL;
					for (var i = 0; i < count; i++)
					{
						var c = buffer[offset + i];
						if (c < '0' || c > '9')
							throw new FormatException();

						result = checked(10UL * result + (c - ZERO));
					}

					return result;
				}
				public static uint StringToUInt32(char[] buffer, int offset, int count, IFormatProvider formatProvider = null)
				{
					const uint ZERO = (ushort)'0';

					var result = 0U;
					for (var i = 0; i < count; i++)
					{
						var c = buffer[offset + i];
						if (c < '0' || c > '9')
							throw new FormatException();

						result = checked(10 * result + (c - ZERO));
					}

					return result;
				}
			}

			private static class JsonNotation
			{
				public const char Tab = '\t';
				public const char Space = ' ';
				public const char Newline = '\n';
				public const char Return = '\r';
				public const char IdentifierSeparator = ':';
				public const char ValueSeparator = ',';
				public const char BeginArray = '[';
				public const char EndArray = ']';
				public const char BeginObject = '{';
				public const char EndObject = '}';
				public const char Escape = '\\';
				public const char Comment = '/';
				public const char CommentMultiline = '*';
				public const char Quote = '\"';
				public const char Const0 = '0';
				public const char Const1 = '1';
				public const char Const2 = '2';
				public const char Const3 = '3';
				public const char Const4 = '4';
				public const char Const5 = '5';
				public const char Const6 = '6';
				public const char Const7 = '7';
				public const char Const8 = '8';
				public const char Const9 = '9';
				public const string True = "true";
				public const string False = "false";
				public const string Null = "null";
			}

			private enum JsonToken
			{
				None = 0,
				BeginArray,
				EndOfArray,
				BeginObject,
				EndOfObject,
				Member,
				Null,
				Value,
				Comment,
				EndOfStream
			}

			[Serializable]
			private class JsonSerializationException : SerializationException
			{
				public int Code { get; set; }
				public int LineNumber { get; set; }
				public int ColumnNumber { get; set; }
				public ulong CharactersReaded { get; set; }

				private JsonSerializationException(string message, JsonReader reader)
					: base(message)
				{
					if (message == null) throw new ArgumentNullException("message");

					if (reader != null)
						this.Update(reader);
				}

				protected JsonSerializationException(SerializationInfo info, StreamingContext context)
					: base(info, context)
				{
					if (info == null) throw new ArgumentNullException("info");

					this.LineNumber = info.GetInt32("LineNumber");
					this.ColumnNumber = info.GetInt32("ColumnNumber");
					this.CharactersReaded = info.GetUInt64("CharactersReaded");
				}

				private void Update(JsonReader reader)
				{
					if (reader == null) throw new ArgumentNullException("reader");

					this.LineNumber = reader.LineNumber;
					this.ColumnNumber = reader.ColumnNumber;
					this.CharactersReaded = reader.CharactersReaded;
				}

				public override void GetObjectData(SerializationInfo info, StreamingContext context)
				{
					if (info == null) throw new ArgumentNullException("info");


					info.AddValue("Code", this.Code);
					info.AddValue("LineNumber", this.LineNumber);
					info.AddValue("ColumnNumber", this.ColumnNumber);
					info.AddValue("CharactersReaded", this.CharactersReaded);

					base.GetObjectData(info, context);
				}

				public static Exception UnexpectedEndOfStream(JsonReader reader)
				{
					if (reader == null) throw new ArgumentNullException("reader");

					return new JsonSerializationException(string.Format("Unexpected end of stream."), reader);
				}
				public static Exception UnexpectedToken(JsonReader reader, params JsonToken[] expectedTokens)
				{
					if (reader == null) throw new ArgumentNullException("reader");
					if (expectedTokens == null) throw new ArgumentNullException("expectedTokens");

					var tokensStr = default(string);
					if (expectedTokens.Length == 0)
					{
						tokensStr = "<no tokens>";
					}
					else
					{
						var tokens = Array.ConvertAll(expectedTokens, c => c.ToString());
						tokensStr = String.Join(", ", tokens);
					}

					return new JsonSerializationException(string.Format("Expected one of there '{2}' but found '{0}'({1}).", reader.Node.Token, reader.Node.ValueType.Name, tokensStr), reader);
				}
				public static Exception UnknownEscapeSequence(string escape, JsonReader reader)
				{
					if (escape == null) throw new ArgumentNullException("escape");
					if (reader == null) throw new ArgumentNullException("reader");

					return new JsonSerializationException(string.Format("An unknown escape sequence '{0}'.", escape),reader);
				}
				public static Exception UnterminatedStringLiteral(JsonReader reader)
				{
					if (reader == null) throw new ArgumentNullException("reader");

					return new JsonSerializationException(string.Format("An unterminated string literal."), reader);
				}
				public static Exception UnknownJsonNotation(JsonReader reader, string notation)
				{
					if (reader == null) throw new ArgumentNullException("reader");

					return new JsonSerializationException(string.Format("An unknown json notation '{0}'.", notation), reader);
				}
			}
		}


		internal static class Utils
		{
			public static ReadOnlyCollection<T> Empty<T>(ReadOnlyCollection<T> collection)
			{
				return new ReadOnlyCollection<T>((T[])Enumerable.Empty<T>());
			}

			public static IEnumerable<T> WhereNotNull<T,V>(IEnumerable<T> enumerable, Func<T, V> selector)
			{
				if (typeof(V).IsValueType)
					return enumerable;

				return enumerable.Where(v => !Object.ReferenceEquals(selector(v), default(V)));
			}

			public static IEnumerable<T> WhereNotNull<T,V>(IEnumerable<T> enumerable, Func<T, V?> selector) where V : struct
			{
				return enumerable.Where(v => selector(v).HasValue);
			}

			public static ReadOnlyCollection<T> Defererence<T>(ReadOnlyCollection<Reference<T>> collection) where T : Document
			{
				if (collection == null) throw new ArgumentNullException("collection");
				if (collection.Count == 0) return Empty<T>(null);

				var list = new T[collection.Count];
				for(var i = 0; i < collection.Count; i++)
					list[i] = collection[i].Value;
				return new ReadOnlyCollection<T>(list);
			}

			public static T Defererence<T>(Reference<T> reference) where T : Document
			{
				return reference.Value;
			}

			public static void CheckKeyIsNotNull<T>(T value, string paramName) 
			{
				if (value == null)
					throw new ArgumentNullException(paramName);
			}
		}

		public struct ReadOnlyList<T> : IEnumerable<T>
		{
			private readonly List<T> list;

			public int Count { get { return this.list.Count; } }
			public T this[int index] { get { return this.list[index]; } }

			public ReadOnlyList(List<T> list)
			{
				this.list = list;
			}

			public bool Contains(T item)
			{
				return list.Contains(item);
			}
			public T Find(Predicate<T> match)
			{
				return list.Find(match);
			}
			public T[] ToArray()
			{
				return this.list.ToArray();
			}
			public List<T> ToList()
			{
				return new List<T>(this.list);
			}

			public List<T>.Enumerator GetEnumerator()
			{
				return list.GetEnumerator();
			}
			IEnumerator IEnumerable.GetEnumerator()
			{
				return list.GetEnumerator();
			}
			IEnumerator<T> IEnumerable<T>.GetEnumerator()
			{
				return list.GetEnumerator();
			}
		}


		public abstract partial class Document
		{
			protected bool isReadOnly;

			protected internal virtual void SetReadOnly()
			{
				this.isReadOnly = true;
			}

			protected void ThrowIfReadOnly()
			{
				if (this.isReadOnly)
					throw new InvalidOperationException("This Document is read-only and can't be changed.");
			}

			protected static bool AreEqual(object value1, object value2)
			{
				return Object.Equals(value1, value2);
			}
//			protected static bool AreEqual<T>(IEquatable<T> value1, IEquatable<T> value2)
//			{
//				if ((value1 == null) != (value2 == null))
//					return false;
//				if (value1 == null)
//					return true;
//				return value1.Equals(value2);
//			}
//			protected static bool AreEqual<T>(T? value1, T? value2)
//				where T : struct, IEquatable<T>
//			{
//				if (value1.HasValue != value2.HasValue)
//					return false;
//				if (!value1.HasValue)
//					return true;
//				return value1.Value.Equals(value2.Value);
//			}
			protected static bool AreEqual<T>(ReadOnlyCollection<T> value1, ReadOnlyCollection<T> value2)
			{
				if (Object.ReferenceEquals(value1, value2))
					return true;

				return Enumerable.SequenceEqual(value1, value2);
			}

			protected static int GetHashCodeFor(object value)
			{
				if (value == null)
					return 0;
				return value.GetHashCode();
			}
			protected static int GetHashCodeFor<T>(ReadOnlyCollection<T> value)
			{
				if (value == null)
					return 0;

				var hashCode = 0;
				foreach (var item in value)
					hashCode += item.GetHashCode();
				return hashCode;
			}
		}


		
		public sealed partial class Reference<T> where T : Document
		{
			// Uncomment it to delay reference resolution
			private const bool LazyReferences = false;

			[NonSerialized]
			private T value;
			[NonSerialized]
			private Func<string, object, Document> valueResolver;
			
			public object Id { get; set; }

			public T Value
			{
				get
				{
					if (this.value != null)
						return value;

					if (this.valueResolver != null)
						return this.value = (T)this.valueResolver(typeof(T).Name, this.Id);
					else
						throw new InvalidOperationException(string.Format("Broken {0} reference with id {1}. Consider calling Resolve() before using Value.", typeof(T).Name, this.Id));
				}
			}

			public static implicit operator T(Reference<T> reference)
			{
				return reference.Value;
			}

			internal void Resolve(Func<string, object, Document> resolver)
			{
				if (resolver == null) throw new ArgumentNullException("resolver");

	#pragma warning disable 0162 // C# Unreachable code detected
				this.value = null;
				// ReSharper disable once ConditionIsAlwaysTrueOrFalse
				if (LazyReferences)
					this.valueResolver = resolver;
				else
					this.value = (T)resolver(typeof(T).Name, this.Id);
	#pragma warning restore 0162
			}

			public override bool Equals(object value)
			{
				var other = value as Reference<T>;
				if (other == null)
					return false;

				return Object.Equals(this.Id, other.Id);
			}

			public override int GetHashCode()
			{
				var hashCode = (this.Id != null ? this.Id.GetHashCode() : 0);
				return hashCode;
			}

			public override string ToString()
			{
				return string.Format("id: {0}, entity: {1}", this.Id, typeof(T).Name);
			}
		}


		public sealed partial class LocalizedString : IDictionary<string, string>
		{
			private const string COMMENT_KEY = "$comment";

			private readonly Dictionary<string, string> valueByLang = new Dictionary<string, string>();
			private string currentValue;
			private string currentLanguage;
			private bool isReadOnly;

			public string Value { get { return this.currentValue ?? this.valueByLang.Values.FirstOrDefault(); } }
			public string CurrentLanguage { get { return this.currentLanguage; } }
			public Dictionary<string, string>.KeyCollection SupportedLanguages { get { return this.valueByLang.Keys; } }

			public void SetLanguage(string language)
			{
				if (language == null) throw new ArgumentNullException("language");

				if (this.valueByLang.TryGetValue(language, out this.currentValue) == false)
				{
					System.Diagnostics.Debug.WriteLine(string.Format("Localized string '{0}' doesn't contains text for '{1}' language.", this.valueByLang.Values.FirstOrDefault(), language));
					this.currentValue = string.Empty;
				}

				this.currentLanguage = language;
			}
			public void SetReadOnly()
			{
				this.isReadOnly = true;
			}

			public static implicit operator string(LocalizedString str)
			{
				if (str == null) return null;
				return str.Value;
			}

			public override bool Equals(object value)
			{
				var other = value as LocalizedString;
				if (other == null)
					return false;

				return Enumerable.SequenceEqual(this.valueByLang, other.valueByLang);
			}

			public override int GetHashCode()
			{
				var hashCode = 0;
				foreach(var kv in this.valueByLang)
					hashCode += (kv.Key ?? "").GetHashCode() + (kv.Value ?? "").GetHashCode();
				return hashCode;
			}

			ICollection<string> IDictionary<string, string>.Keys { get { return this.valueByLang.Keys; } }
			ICollection<string> IDictionary<string, string>.Values { get { return this.valueByLang.Values; } }
			int ICollection<KeyValuePair<string, string>>.Count { get { return this.valueByLang.Count; } }
			bool ICollection<KeyValuePair<string, string>>.IsReadOnly { get { return this.isReadOnly; } }
			string IDictionary<string, string>.this[string key]
			{
				get { return this.valueByLang[key]; }
				set
				{
					this.ThrowIfReadOnly();
					if (key == COMMENT_KEY) return; this.valueByLang[key] = value;
				}
			}

			void IDictionary<string, string>.Add(string key, string value)
			{
				this.ThrowIfReadOnly();
				if (key == COMMENT_KEY) return; // skip comment

				this.valueByLang.Add(key, value);
			}
			bool IDictionary<string, string>.ContainsKey(string key)
			{
				return this.valueByLang.ContainsKey(key);
			}
			bool IDictionary<string, string>.Remove(string key)
			{
				this.ThrowIfReadOnly();

				return this.valueByLang.Remove(key);
			}
			bool IDictionary<string, string>.TryGetValue(string key, out string value)
			{
				return this.valueByLang.TryGetValue(key, out value);
			}

			void ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string> item)
			{
				this.ThrowIfReadOnly();
				if (item.Key == COMMENT_KEY) return; // skip comment

				(this.valueByLang as ICollection<KeyValuePair<string, string>>).Add(item);
			}
			void ICollection<KeyValuePair<string, string>>.Clear()
			{
				this.ThrowIfReadOnly();

				this.valueByLang.Clear();
			}
			bool ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string> item)
			{
				this.ThrowIfReadOnly();

				return (this.valueByLang as ICollection<KeyValuePair<string, string>>).Contains(item);
			}
			void ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[] array, int arrayIndex)
			{
				(this.valueByLang as ICollection<KeyValuePair<string, string>>).CopyTo(array, arrayIndex);
			}
			bool ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string> item)
			{
				this.ThrowIfReadOnly();

				return (this.valueByLang as ICollection<KeyValuePair<string, string>>).Remove(item);
			}
			IEnumerator<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>>.GetEnumerator()
			{
				return (this.valueByLang as ICollection<KeyValuePair<string, string>>).GetEnumerator();
			}

			System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return (this.valueByLang as System.Collections.IEnumerable).GetEnumerator();
			}

			private void ThrowIfReadOnly()
			{
				if (this.isReadOnly)
					throw new InvalidOperationException("This LocalizedString is read-only and can't be changed.");
			}

			public override string ToString()
			{
				return this.Value;
			}
		}


	}
}

