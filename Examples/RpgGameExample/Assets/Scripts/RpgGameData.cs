
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using System.Runtime.InteropServices;
using System.Linq.Expressions;
using System.Xml;
using GameDevWare.Dynamic.Expressions;

namespace Assets
{
	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Parameter : RpgGameData.Document, IEquatable<Parameter>, IComparable, IComparable<Parameter>
	{
		private int hashCode;

		private ParameterId _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ParameterId Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private Single? _MinValue;
		/// <summary>
		/// Maximal value for this attribute. 
		/// </summary>
		
		public Single? MinValue
		{
			get { return this._MinValue; }
			set { this.ThrowIfReadOnly(); this._MinValue = value; }
		}

		private Single? _MaxValue;
		/// <summary>
		/// Maximal value for this attribute. 
		/// </summary>
		
		public Single? MaxValue
		{
			get { return this._MaxValue; }
			set { this.ThrowIfReadOnly(); this._MaxValue = value; }
		}

		private RpgGameData.Reference<Parameter> _MinValueParameter;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public RpgGameData.Reference<Parameter> MinValueParameter_Reference
		{
			get { return this._MinValueParameter; }
			set { this.ThrowIfReadOnly(); this._MinValueParameter = value; }
		}
		private Parameter _MinValueParameter_Dereferenced;
		private bool _MinValueParameter_Dereferenced_IsSet;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		public Parameter MinValueParameter
		{
			get
			{
				var referenceValue = default(Parameter);
				if (this.isReadOnly && this._MinValueParameter_Dereferenced_IsSet)
				{
					referenceValue = this._MinValueParameter_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._MinValueParameter_Dereferenced = this._MinValueParameter.Dereference();
					this._MinValueParameter_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._MinValueParameter.Dereference();
				}
				return referenceValue;
			}
		}

		private RpgGameData.Reference<Parameter> _MaxValueParameter;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public RpgGameData.Reference<Parameter> MaxValueParameter_Reference
		{
			get { return this._MaxValueParameter; }
			set { this.ThrowIfReadOnly(); this._MaxValueParameter = value; }
		}
		private Parameter _MaxValueParameter_Dereferenced;
		private bool _MaxValueParameter_Dereferenced_IsSet;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		public Parameter MaxValueParameter
		{
			get
			{
				var referenceValue = default(Parameter);
				if (this.isReadOnly && this._MaxValueParameter_Dereferenced_IsSet)
				{
					referenceValue = this._MaxValueParameter_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._MaxValueParameter_Dereferenced = this._MaxValueParameter.Dereference();
					this._MaxValueParameter_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._MaxValueParameter.Dereference();
				}
				return referenceValue;
			}
		}

		private ParameterValueKind _ValueKind;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ParameterValueKind ValueKind
		{
			get { return this._ValueKind; }
			set { this.ThrowIfReadOnly(); this._ValueKind = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			if (this._MinValueParameter != null)
				this._MinValueParameter.Resolve(refResolver);

			if (this._MaxValueParameter != null)
				this._MaxValueParameter.Resolve(refResolver);

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Parameter other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Parameter == false)
				return false;

			var other = (Parameter)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._MinValue, other._MinValue)
				&& AreEquals(this._MaxValue, other._MaxValue)
				&& AreEquals(this._MinValueParameter, other._MinValueParameter)
				&& AreEquals(this._MaxValueParameter, other._MaxValueParameter)
				&& AreEquals(this._ValueKind, other._ValueKind)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Parameter);
		}

		public int CompareTo(Parameter other)
		{
			if (other == null)
				return 1;
			return this.Id.CompareTo(other.Id);
		}

		public static bool operator ==(Parameter value1, Parameter value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Parameter value1, Parameter value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._MinValue)
				+ GetHashCodeFor(this._MaxValue)
				+ GetHashCodeFor(this._MinValueParameter)
				+ GetHashCodeFor(this._MaxValueParameter)
				+ GetHashCodeFor(this._ValueKind)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("MinValue: ").Append(this.MinValue).Append(", ");
				sb.Append("MaxValue: ").Append(this.MaxValue).Append(", ");
				sb.Append("MinValueParameter: ").Append(this.MinValueParameter).Append(", ");
				sb.Append("MaxValueParameter: ").Append(this.MaxValueParameter).Append(", ");
				sb.Append("ValueKind: ").Append(this.ValueKind).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class ParameterValue : RpgGameData.Document, IEquatable<ParameterValue>, IComparable, IComparable<ParameterValue>
	{
		private int hashCode;

		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private RpgGameData.Reference<Parameter> _Parameter;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.Reference<Parameter> Parameter_Reference
		{
			get { return this._Parameter; }
			set { this.ThrowIfReadOnly(); this._Parameter = value; }
		}
		private Parameter _Parameter_Dereferenced;
		private bool _Parameter_Dereferenced_IsSet;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public Parameter Parameter
		{
			get
			{
				var referenceValue = default(Parameter);
				if (this.isReadOnly && this._Parameter_Dereferenced_IsSet)
				{
					referenceValue = this._Parameter_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._Parameter_Dereferenced = this._Parameter.Dereference();
					this._Parameter_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._Parameter.Dereference();
				}
				return referenceValue;
			}
		}

		private Single _Value;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Single Value
		{
			get { return this._Value; }
			set { this.ThrowIfReadOnly(); this._Value = value; }
		}

		private RpgGameData.Reference<Conditions> _Condition;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public RpgGameData.Reference<Conditions> Condition_Reference
		{
			get { return this._Condition; }
			set { this.ThrowIfReadOnly(); this._Condition = value; }
		}
		private Conditions _Condition_Dereferenced;
		private bool _Condition_Dereferenced_IsSet;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		public Conditions Condition
		{
			get
			{
				var referenceValue = default(Conditions);
				if (this.isReadOnly && this._Condition_Dereferenced_IsSet)
				{
					referenceValue = this._Condition_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._Condition_Dereferenced = this._Condition.Dereference();
					this._Condition_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._Condition.Dereference();
				}
				return referenceValue;
			}
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			if (this._Parameter != null)
				this._Parameter.Resolve(refResolver);

			if (this._Condition != null)
				this._Condition.Resolve(refResolver);

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(ParameterValue other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is ParameterValue == false)
				return false;

			var other = (ParameterValue)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Parameter, other._Parameter)
				&& AreEquals(this._Value, other._Value)
				&& AreEquals(this._Condition, other._Condition)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as ParameterValue);
		}

		public int CompareTo(ParameterValue other)
		{
			if (other == null)
				return 1;
			return this.Id.CompareTo(other.Id);
		}

		public static bool operator ==(ParameterValue value1, ParameterValue value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(ParameterValue value1, ParameterValue value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Parameter)
				+ GetHashCodeFor(this._Value)
				+ GetHashCodeFor(this._Condition)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Parameter: ").Append(this.Parameter).Append(", ");
				sb.Append("Value: ").Append(this.Value).Append(", ");
				sb.Append("Condition: ").Append(this.Condition).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Provision : RpgGameData.Document, IEquatable<Provision>, IComparable, IComparable<Provision>
	{
		private int hashCode;

		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private Int32 _Cost;
		/// <summary>
		/// Cost of provision in gold. Not null.
		/// </summary>
		
		public Int32 Cost
		{
			get { return this._Cost; }
			set { this.ThrowIfReadOnly(); this._Cost = value; }
		}

		private Item _Item;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Item Item
		{
			get { return this._Item; }
			set { this.ThrowIfReadOnly(); this._Item = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Provision other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Provision == false)
				return false;

			var other = (Provision)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Cost, other._Cost)
				&& AreEquals(this._Item, other._Item)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Provision);
		}

		public int CompareTo(Provision other)
		{
			if (other == null)
				return 1;
			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);
		}

		public static bool operator ==(Provision value1, Provision value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Provision value1, Provision value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Cost)
				+ GetHashCodeFor(this._Item)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Cost: ").Append(this.Cost).Append(", ");
				sb.Append("Item: ").Append(this.Item).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Hero : RpgGameData.Document, IEquatable<Hero>, IComparable, IComparable<Hero>
	{
		private int hashCode;

		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private RpgGameData.LocalizedString _Name;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.LocalizedString Name_ByLanguage
		{
			get { return this._Name; }
			set { this.ThrowIfReadOnly(); this._Name = value; }
		}
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Name
		{
			get
			{
				if (this._Name == null)
					return null;
				else
					return this._Name.Value;
			}
		}

		private RpgGameData.LocalizedString _Bio;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.LocalizedString Bio_ByLanguage
		{
			get { return this._Bio; }
			set { this.ThrowIfReadOnly(); this._Bio = value; }
		}
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Bio
		{
			get
			{
				if (this._Bio == null)
					return null;
				else
					return this._Bio.Value;
			}
		}

		private Boolean _Religious;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Boolean Religious
		{
			get { return this._Religious; }
			set { this.ThrowIfReadOnly(); this._Religious = value; }
		}

		private ReadOnlyList<RpgGameData.Reference<Hero>> _DislikeHeroes;
		/// <summary>
		/// List of heroes which dislikes current hero.. 
		/// </summary>
		
		public ReadOnlyList<RpgGameData.Reference<Hero>> DislikeHeroes_Reference
		{
			get { return this._DislikeHeroes; }
			set { this.ThrowIfReadOnly(); this._DislikeHeroes = value; }
		}
		private ReadOnlyList<Hero> _DislikeHeroes_Dereferenced;
		private bool _DislikeHeroes_Dereferenced_IsSet;
		/// <summary>
		/// List of heroes which dislikes current hero.. 
		/// </summary>
		public ReadOnlyList<Hero> DislikeHeroes
		{
			get
			{
				var referenceValue = default(ReadOnlyList<Hero>);
				if (this.isReadOnly && this._DislikeHeroes_Dereferenced_IsSet)
				{
					referenceValue = this._DislikeHeroes_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._DislikeHeroes_Dereferenced = this._DislikeHeroes.Dereference();
					this._DislikeHeroes_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._DislikeHeroes.Dereference();
				}
				return referenceValue;
			}
		}

		private RpgGameData.Reference<Provision> _Provisions;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public RpgGameData.Reference<Provision> Provisions_Reference
		{
			get { return this._Provisions; }
			set { this.ThrowIfReadOnly(); this._Provisions = value; }
		}
		private Provision _Provisions_Dereferenced;
		private bool _Provisions_Dereferenced_IsSet;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		public Provision Provisions
		{
			get
			{
				var referenceValue = default(Provision);
				if (this.isReadOnly && this._Provisions_Dereferenced_IsSet)
				{
					referenceValue = this._Provisions_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._Provisions_Dereferenced = this._Provisions.Dereference();
					this._Provisions_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._Provisions.Dereference();
				}
				return referenceValue;
			}
		}

		private Int32 _ProvisionsCount;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 ProvisionsCount
		{
			get { return this._ProvisionsCount; }
			set { this.ThrowIfReadOnly(); this._ProvisionsCount = value; }
		}

		private Int32 _MovementForward;
		/// <summary>
		/// Maximum possible change in the position of the hero. Direction - forward.. Not null.
		/// </summary>
		
		public Int32 MovementForward
		{
			get { return this._MovementForward; }
			set { this.ThrowIfReadOnly(); this._MovementForward = value; }
		}

		private Int32 _MovementBackward;
		/// <summary>
		/// Maximum possible change in the position of the hero. Direction - backward.. Not null.
		/// </summary>
		
		public Int32 MovementBackward
		{
			get { return this._MovementBackward; }
			set { this.ThrowIfReadOnly(); this._MovementBackward = value; }
		}

		private Int32 _Protection;
		/// <summary>
		/// from 0.0 to 1.0 where 0.5 is 50%. Not null.
		/// </summary>
		
		public Int32 Protection
		{
			get { return this._Protection; }
			set { this.ThrowIfReadOnly(); this._Protection = value; }
		}

		private Int32 _AccuracyModifier;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 AccuracyModifier
		{
			get { return this._AccuracyModifier; }
			set { this.ThrowIfReadOnly(); this._AccuracyModifier = value; }
		}

		private Single _StunResistance;
		/// <summary>
		/// from 0.0 to 1.0 where 0.5 is 50%. Not null.
		/// </summary>
		
		public Single StunResistance
		{
			get { return this._StunResistance; }
			set { this.ThrowIfReadOnly(); this._StunResistance = value; }
		}

		private Single _BlightResistance;
		/// <summary>
		/// from 0.0 to 1.0 where 0.5 is 50%. Not null.
		/// </summary>
		
		public Single BlightResistance
		{
			get { return this._BlightResistance; }
			set { this.ThrowIfReadOnly(); this._BlightResistance = value; }
		}

		private Single _DiseaseResistance;
		/// <summary>
		/// from 0.0 to 1.0 where 0.5 is 50%. Not null.
		/// </summary>
		
		public Single DiseaseResistance
		{
			get { return this._DiseaseResistance; }
			set { this.ThrowIfReadOnly(); this._DiseaseResistance = value; }
		}

		private Single _DeathBlowResistance;
		/// <summary>
		/// from 0.0 to 1.0 where 0.5 is 50%. Not null.
		/// </summary>
		
		public Single DeathBlowResistance
		{
			get { return this._DeathBlowResistance; }
			set { this.ThrowIfReadOnly(); this._DeathBlowResistance = value; }
		}

		private Single _MoveResistance;
		/// <summary>
		/// from 0.0 to 1.0 where 0.5 is 50%. Not null.
		/// </summary>
		
		public Single MoveResistance
		{
			get { return this._MoveResistance; }
			set { this.ThrowIfReadOnly(); this._MoveResistance = value; }
		}

		private Single _BleedResistance;
		/// <summary>
		/// from 0.0 to 1.0 where 0.5 is 50%. Not null.
		/// </summary>
		
		public Single BleedResistance
		{
			get { return this._BleedResistance; }
			set { this.ThrowIfReadOnly(); this._BleedResistance = value; }
		}

		private Single _DebuffResistance;
		/// <summary>
		/// from 0.0 to 1.0 where 0.5 is 50%. Not null.
		/// </summary>
		
		public Single DebuffResistance
		{
			get { return this._DebuffResistance; }
			set { this.ThrowIfReadOnly(); this._DebuffResistance = value; }
		}

		private Single _TrapResistance;
		/// <summary>
		/// from 0.0 to 1.0 where 0.5 is 50%. Not null.
		/// </summary>
		
		public Single TrapResistance
		{
			get { return this._TrapResistance; }
			set { this.ThrowIfReadOnly(); this._TrapResistance = value; }
		}

		private ReadOnlyList<Armor> _Armors;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ReadOnlyList<Armor> Armors
		{
			get { return this._Armors; }
			set { this.ThrowIfReadOnly(); this._Armors = value; }
		}

		private ReadOnlyList<Weapon> _Weapons;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ReadOnlyList<Weapon> Weapons
		{
			get { return this._Weapons; }
			set { this.ThrowIfReadOnly(); this._Weapons = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			if (this._DislikeHeroes == null)
				this._DislikeHeroes = this._DislikeHeroes.EmptyIfNull();

			foreach(var reference in this._DislikeHeroes)
				reference.Resolve(refResolver);

			if (this._Provisions != null)
				this._Provisions.Resolve(refResolver);

			if (this._Armors == null)
				this._Armors = this._Armors.EmptyIfNull();

			if (this._Weapons == null)
				this._Weapons = this._Weapons.EmptyIfNull();

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			if (this._Name != null)
				this._Name.SetLanguage(language);
			if (this._Bio != null)
				this._Bio.SetLanguage(language);
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			if (this._Name != null)
				this._Name.SetReadOnly();
			if (this._Bio != null)
				this._Bio.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Hero other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Hero == false)
				return false;

			var other = (Hero)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Name, other._Name)
				&& AreEquals(this._Bio, other._Bio)
				&& AreEquals(this._Religious, other._Religious)
				&& AreEquals(this._DislikeHeroes, other._DislikeHeroes)
				&& AreEquals(this._Provisions, other._Provisions)
				&& AreEquals(this._ProvisionsCount, other._ProvisionsCount)
				&& AreEquals(this._MovementForward, other._MovementForward)
				&& AreEquals(this._MovementBackward, other._MovementBackward)
				&& AreEquals(this._Protection, other._Protection)
				&& AreEquals(this._AccuracyModifier, other._AccuracyModifier)
				&& AreEquals(this._StunResistance, other._StunResistance)
				&& AreEquals(this._BlightResistance, other._BlightResistance)
				&& AreEquals(this._DiseaseResistance, other._DiseaseResistance)
				&& AreEquals(this._DeathBlowResistance, other._DeathBlowResistance)
				&& AreEquals(this._MoveResistance, other._MoveResistance)
				&& AreEquals(this._BleedResistance, other._BleedResistance)
				&& AreEquals(this._DebuffResistance, other._DebuffResistance)
				&& AreEquals(this._TrapResistance, other._TrapResistance)
				&& AreEquals(this._Armors, other._Armors)
				&& AreEquals(this._Weapons, other._Weapons)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Hero);
		}

		public int CompareTo(Hero other)
		{
			if (other == null)
				return 1;
			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);
		}

		public static bool operator ==(Hero value1, Hero value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Hero value1, Hero value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Name)
				+ GetHashCodeFor(this._Bio)
				+ GetHashCodeFor(this._Religious)
				+ GetHashCodeFor(this._DislikeHeroes)
				+ GetHashCodeFor(this._Provisions)
				+ GetHashCodeFor(this._ProvisionsCount)
				+ GetHashCodeFor(this._MovementForward)
				+ GetHashCodeFor(this._MovementBackward)
				+ GetHashCodeFor(this._Protection)
				+ GetHashCodeFor(this._AccuracyModifier)
				+ GetHashCodeFor(this._StunResistance)
				+ GetHashCodeFor(this._BlightResistance)
				+ GetHashCodeFor(this._DiseaseResistance)
				+ GetHashCodeFor(this._DeathBlowResistance)
				+ GetHashCodeFor(this._MoveResistance)
				+ GetHashCodeFor(this._BleedResistance)
				+ GetHashCodeFor(this._DebuffResistance)
				+ GetHashCodeFor(this._TrapResistance)
				+ GetHashCodeFor(this._Armors)
				+ GetHashCodeFor(this._Weapons)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Name: ").Append(this.Name).Append(", ");
				sb.Append("Bio: ").Append(this.Bio).Append(", ");
				sb.Append("Religious: ").Append(this.Religious).Append(", ");
				sb.Append("DislikeHeroes: ").Append(this.DislikeHeroes).Append(", ");
				sb.Append("Provisions: ").Append(this.Provisions).Append(", ");
				sb.Append("ProvisionsCount: ").Append(this.ProvisionsCount).Append(", ");
				sb.Append("MovementForward: ").Append(this.MovementForward).Append(", ");
				sb.Append("MovementBackward: ").Append(this.MovementBackward).Append(", ");
				sb.Append("Protection: ").Append(this.Protection).Append(", ");
				sb.Append("AccuracyModifier: ").Append(this.AccuracyModifier).Append(", ");
				sb.Append("StunResistance: ").Append(this.StunResistance).Append(", ");
				sb.Append("BlightResistance: ").Append(this.BlightResistance).Append(", ");
				sb.Append("DiseaseResistance: ").Append(this.DiseaseResistance).Append(", ");
				sb.Append("DeathBlowResistance: ").Append(this.DeathBlowResistance).Append(", ");
				sb.Append("MoveResistance: ").Append(this.MoveResistance).Append(", ");
				sb.Append("BleedResistance: ").Append(this.BleedResistance).Append(", ");
				sb.Append("DebuffResistance: ").Append(this.DebuffResistance).Append(", ");
				sb.Append("TrapResistance: ").Append(this.TrapResistance).Append(", ");
				sb.Append("Armors: ").Append(this.Armors).Append(", ");
				sb.Append("Weapons: ").Append(this.Weapons).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Item : RpgGameData.Document, IEquatable<Item>, IComparable, IComparable<Item>
	{
		private int hashCode;

		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private RpgGameData.LocalizedString _Name;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.LocalizedString Name_ByLanguage
		{
			get { return this._Name; }
			set { this.ThrowIfReadOnly(); this._Name = value; }
		}
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Name
		{
			get
			{
				if (this._Name == null)
					return null;
				else
					return this._Name.Value;
			}
		}

		private RpgGameData.LocalizedString _Description;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public RpgGameData.LocalizedString Description_ByLanguage
		{
			get { return this._Description; }
			set { this.ThrowIfReadOnly(); this._Description = value; }
		}
		/// <summary>
		/// No description is provided. 
		/// </summary>
		public string Description
		{
			get
			{
				if (this._Description == null)
					return null;
				else
					return this._Description.Value;
			}
		}

		private Int32 _StackSize;
		/// <summary>
		/// Zero and one mean - non stackable. Not null.
		/// </summary>
		
		public Int32 StackSize
		{
			get { return this._StackSize; }
			set { this.ThrowIfReadOnly(); this._StackSize = value; }
		}

		private Int32 _GoldValue;
		/// <summary>
		/// Gold value of treasure. Rewared upon completion of mission.. Not null.
		/// </summary>
		
		public Int32 GoldValue
		{
			get { return this._GoldValue; }
			set { this.ThrowIfReadOnly(); this._GoldValue = value; }
		}

		private ReadOnlyList<ParameterValue> _ActivationEffects;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public ReadOnlyList<ParameterValue> ActivationEffects
		{
			get { return this._ActivationEffects; }
			set { this.ThrowIfReadOnly(); this._ActivationEffects = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			if (this._ActivationEffects == null)
				this._ActivationEffects = this._ActivationEffects.EmptyIfNull();

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			if (this._Name != null)
				this._Name.SetLanguage(language);
			if (this._Description != null)
				this._Description.SetLanguage(language);
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			if (this._Name != null)
				this._Name.SetReadOnly();
			if (this._Description != null)
				this._Description.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Item other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Item == false)
				return false;

			var other = (Item)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Name, other._Name)
				&& AreEquals(this._Description, other._Description)
				&& AreEquals(this._StackSize, other._StackSize)
				&& AreEquals(this._GoldValue, other._GoldValue)
				&& AreEquals(this._ActivationEffects, other._ActivationEffects)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Item);
		}

		public int CompareTo(Item other)
		{
			if (other == null)
				return 1;
			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);
		}

		public static bool operator ==(Item value1, Item value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Item value1, Item value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Name)
				+ GetHashCodeFor(this._Description)
				+ GetHashCodeFor(this._StackSize)
				+ GetHashCodeFor(this._GoldValue)
				+ GetHashCodeFor(this._ActivationEffects)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Name: ").Append(this.Name).Append(", ");
				sb.Append("Description: ").Append(this.Description).Append(", ");
				sb.Append("StackSize: ").Append(this.StackSize).Append(", ");
				sb.Append("GoldValue: ").Append(this.GoldValue).Append(", ");
				sb.Append("ActivationEffects: ").Append(this.ActivationEffects).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Location : RpgGameData.Document, IEquatable<Location>, IComparable, IComparable<Location>
	{
		private int hashCode;

		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private RpgGameData.LocalizedString _Name;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.LocalizedString Name_ByLanguage
		{
			get { return this._Name; }
			set { this.ThrowIfReadOnly(); this._Name = value; }
		}
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Name
		{
			get
			{
				if (this._Name == null)
					return null;
				else
					return this._Name.Value;
			}
		}

		private LocationFlags _Flags;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public LocationFlags Flags
		{
			get { return this._Flags; }
			set { this.ThrowIfReadOnly(); this._Flags = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			if (this._Name != null)
				this._Name.SetLanguage(language);
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			if (this._Name != null)
				this._Name.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Location other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Location == false)
				return false;

			var other = (Location)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Name, other._Name)
				&& AreEquals(this._Flags, other._Flags)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Location);
		}

		public int CompareTo(Location other)
		{
			if (other == null)
				return 1;
			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);
		}

		public static bool operator ==(Location value1, Location value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Location value1, Location value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Name)
				+ GetHashCodeFor(this._Flags)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Name: ").Append(this.Name).Append(", ");
				sb.Append("Flags: ").Append(this.Flags).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Trinket : RpgGameData.Document, IEquatable<Trinket>, IComparable, IComparable<Trinket>
	{
		private int hashCode;

		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private TrinketRarity _Rarity;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public TrinketRarity Rarity
		{
			get { return this._Rarity; }
			set { this.ThrowIfReadOnly(); this._Rarity = value; }
		}

		private RpgGameData.Reference<Location> _OriginDungeon;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public RpgGameData.Reference<Location> OriginDungeon_Reference
		{
			get { return this._OriginDungeon; }
			set { this.ThrowIfReadOnly(); this._OriginDungeon = value; }
		}
		private Location _OriginDungeon_Dereferenced;
		private bool _OriginDungeon_Dereferenced_IsSet;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		public Location OriginDungeon
		{
			get
			{
				var referenceValue = default(Location);
				if (this.isReadOnly && this._OriginDungeon_Dereferenced_IsSet)
				{
					referenceValue = this._OriginDungeon_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._OriginDungeon_Dereferenced = this._OriginDungeon.Dereference();
					this._OriginDungeon_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._OriginDungeon.Dereference();
				}
				return referenceValue;
			}
		}

		private RpgGameData.Reference<Hero> _HeroRestriction;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public RpgGameData.Reference<Hero> HeroRestriction_Reference
		{
			get { return this._HeroRestriction; }
			set { this.ThrowIfReadOnly(); this._HeroRestriction = value; }
		}
		private Hero _HeroRestriction_Dereferenced;
		private bool _HeroRestriction_Dereferenced_IsSet;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		public Hero HeroRestriction
		{
			get
			{
				var referenceValue = default(Hero);
				if (this.isReadOnly && this._HeroRestriction_Dereferenced_IsSet)
				{
					referenceValue = this._HeroRestriction_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._HeroRestriction_Dereferenced = this._HeroRestriction.Dereference();
					this._HeroRestriction_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._HeroRestriction.Dereference();
				}
				return referenceValue;
			}
		}

		private Item _Item;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Item Item
		{
			get { return this._Item; }
			set { this.ThrowIfReadOnly(); this._Item = value; }
		}

		private ReadOnlyList<ParameterValue> _Effects;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ReadOnlyList<ParameterValue> Effects
		{
			get { return this._Effects; }
			set { this.ThrowIfReadOnly(); this._Effects = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			if (this._OriginDungeon != null)
				this._OriginDungeon.Resolve(refResolver);

			if (this._HeroRestriction != null)
				this._HeroRestriction.Resolve(refResolver);

			if (this._Effects == null)
				this._Effects = this._Effects.EmptyIfNull();

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Trinket other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Trinket == false)
				return false;

			var other = (Trinket)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Rarity, other._Rarity)
				&& AreEquals(this._OriginDungeon, other._OriginDungeon)
				&& AreEquals(this._HeroRestriction, other._HeroRestriction)
				&& AreEquals(this._Item, other._Item)
				&& AreEquals(this._Effects, other._Effects)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Trinket);
		}

		public int CompareTo(Trinket other)
		{
			if (other == null)
				return 1;
			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);
		}

		public static bool operator ==(Trinket value1, Trinket value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Trinket value1, Trinket value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Rarity)
				+ GetHashCodeFor(this._OriginDungeon)
				+ GetHashCodeFor(this._HeroRestriction)
				+ GetHashCodeFor(this._Item)
				+ GetHashCodeFor(this._Effects)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Rarity: ").Append(this.Rarity).Append(", ");
				sb.Append("OriginDungeon: ").Append(this.OriginDungeon).Append(", ");
				sb.Append("HeroRestriction: ").Append(this.HeroRestriction).Append(", ");
				sb.Append("Item: ").Append(this.Item).Append(", ");
				sb.Append("Effects: ").Append(this.Effects).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Monster : RpgGameData.Document, IEquatable<Monster>, IComparable, IComparable<Monster>
	{
		private int hashCode;

		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private RpgGameData.LocalizedString _Name;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.LocalizedString Name_ByLanguage
		{
			get { return this._Name; }
			set { this.ThrowIfReadOnly(); this._Name = value; }
		}
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Name
		{
			get
			{
				if (this._Name == null)
					return null;
				else
					return this._Name.Value;
			}
		}

		private MonsterType _Type;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public MonsterType Type
		{
			get { return this._Type; }
			set { this.ThrowIfReadOnly(); this._Type = value; }
		}

		private MonsterType _SecondType;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public MonsterType SecondType
		{
			get { return this._SecondType; }
			set { this.ThrowIfReadOnly(); this._SecondType = value; }
		}

		private ReadOnlyList<ParameterValue> _Parameters;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ReadOnlyList<ParameterValue> Parameters
		{
			get { return this._Parameters; }
			set { this.ThrowIfReadOnly(); this._Parameters = value; }
		}

		private ReadOnlyList<RpgGameData.Reference<Location>> _Locations;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ReadOnlyList<RpgGameData.Reference<Location>> Locations_Reference
		{
			get { return this._Locations; }
			set { this.ThrowIfReadOnly(); this._Locations = value; }
		}
		private ReadOnlyList<Location> _Locations_Dereferenced;
		private bool _Locations_Dereferenced_IsSet;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public ReadOnlyList<Location> Locations
		{
			get
			{
				var referenceValue = default(ReadOnlyList<Location>);
				if (this.isReadOnly && this._Locations_Dereferenced_IsSet)
				{
					referenceValue = this._Locations_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._Locations_Dereferenced = this._Locations.Dereference();
					this._Locations_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._Locations.Dereference();
				}
				return referenceValue;
			}
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			if (this._Parameters == null)
				this._Parameters = this._Parameters.EmptyIfNull();

			if (this._Locations == null)
				this._Locations = this._Locations.EmptyIfNull();

			foreach(var reference in this._Locations)
				reference.Resolve(refResolver);

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			if (this._Name != null)
				this._Name.SetLanguage(language);
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			if (this._Name != null)
				this._Name.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Monster other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Monster == false)
				return false;

			var other = (Monster)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Name, other._Name)
				&& AreEquals(this._Type, other._Type)
				&& AreEquals(this._SecondType, other._SecondType)
				&& AreEquals(this._Parameters, other._Parameters)
				&& AreEquals(this._Locations, other._Locations)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Monster);
		}

		public int CompareTo(Monster other)
		{
			if (other == null)
				return 1;
			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);
		}

		public static bool operator ==(Monster value1, Monster value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Monster value1, Monster value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Name)
				+ GetHashCodeFor(this._Type)
				+ GetHashCodeFor(this._SecondType)
				+ GetHashCodeFor(this._Parameters)
				+ GetHashCodeFor(this._Locations)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Name: ").Append(this.Name).Append(", ");
				sb.Append("Type: ").Append(this.Type).Append(", ");
				sb.Append("SecondType: ").Append(this.SecondType).Append(", ");
				sb.Append("Parameters: ").Append(this.Parameters).Append(", ");
				sb.Append("Locations: ").Append(this.Locations).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Loot : RpgGameData.Document, IEquatable<Loot>, IComparable, IComparable<Loot>
	{
		private int hashCode;

		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private LootType _Type;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public LootType Type
		{
			get { return this._Type; }
			set { this.ThrowIfReadOnly(); this._Type = value; }
		}

		private Int32? _Amount;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public Int32? Amount
		{
			get { return this._Amount; }
			set { this.ThrowIfReadOnly(); this._Amount = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Loot other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Loot == false)
				return false;

			var other = (Loot)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Type, other._Type)
				&& AreEquals(this._Amount, other._Amount)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Loot);
		}

		public int CompareTo(Loot other)
		{
			if (other == null)
				return 1;
			return this.Id.CompareTo(other.Id);
		}

		public static bool operator ==(Loot value1, Loot value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Loot value1, Loot value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Type)
				+ GetHashCodeFor(this._Amount)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Type: ").Append(this.Type).Append(", ");
				sb.Append("Amount: ").Append(this.Amount).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class CombatEffect : RpgGameData.Document, IEquatable<CombatEffect>, IComparable, IComparable<CombatEffect>
	{
		private int hashCode;

		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private ReadOnlyList<ParameterValue> _Changes;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public ReadOnlyList<ParameterValue> Changes
		{
			get { return this._Changes; }
			set { this.ThrowIfReadOnly(); this._Changes = value; }
		}

		private Int32? _Duration;
		/// <summary>
		/// zero or empty - effect is permanent.. 
		/// </summary>
		
		public Int32? Duration
		{
			get { return this._Duration; }
			set { this.ThrowIfReadOnly(); this._Duration = value; }
		}

		private DurationUnit _DurationUnit;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public DurationUnit DurationUnit
		{
			get { return this._DurationUnit; }
			set { this.ThrowIfReadOnly(); this._DurationUnit = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			if (this._Changes == null)
				this._Changes = this._Changes.EmptyIfNull();

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(CombatEffect other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is CombatEffect == false)
				return false;

			var other = (CombatEffect)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Changes, other._Changes)
				&& AreEquals(this._Duration, other._Duration)
				&& AreEquals(this._DurationUnit, other._DurationUnit)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as CombatEffect);
		}

		public int CompareTo(CombatEffect other)
		{
			if (other == null)
				return 1;
			return this.Id.CompareTo(other.Id);
		}

		public static bool operator ==(CombatEffect value1, CombatEffect value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(CombatEffect value1, CombatEffect value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Changes)
				+ GetHashCodeFor(this._Duration)
				+ GetHashCodeFor(this._DurationUnit)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Changes: ").Append(this.Changes).Append(", ");
				sb.Append("Duration: ").Append(this.Duration).Append(", ");
				sb.Append("DurationUnit: ").Append(this.DurationUnit).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class CurioCleansingOption : RpgGameData.Document, IEquatable<CurioCleansingOption>, IComparable, IComparable<CurioCleansingOption>
	{
		private int hashCode;

		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private Single _Chance;
		/// <summary>
		/// Chance of happening of this cleansing option relative to other options.. Not null.
		/// </summary>
		
		public Single Chance
		{
			get { return this._Chance; }
			set { this.ThrowIfReadOnly(); this._Chance = value; }
		}

		private RpgGameData.Reference<Item> _Item;
		/// <summary>
		/// Cleansing item. 
		/// </summary>
		
		public RpgGameData.Reference<Item> Item_Reference
		{
			get { return this._Item; }
			set { this.ThrowIfReadOnly(); this._Item = value; }
		}
		private Item _Item_Dereferenced;
		private bool _Item_Dereferenced_IsSet;
		/// <summary>
		/// Cleansing item. 
		/// </summary>
		public Item Item
		{
			get
			{
				var referenceValue = default(Item);
				if (this.isReadOnly && this._Item_Dereferenced_IsSet)
				{
					referenceValue = this._Item_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._Item_Dereferenced = this._Item.Dereference();
					this._Item_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._Item.Dereference();
				}
				return referenceValue;
			}
		}

		private ReadOnlyList<Loot> _Loot;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public ReadOnlyList<Loot> Loot
		{
			get { return this._Loot; }
			set { this.ThrowIfReadOnly(); this._Loot = value; }
		}

		private Single? _QuirkChance;
		/// <summary>
		/// from 0.0 to 1.0 where 0.5 is 50%. Positive value is for positive quirks and negative for negative quirks.. 
		/// </summary>
		
		public Single? QuirkChance
		{
			get { return this._QuirkChance; }
			set { this.ThrowIfReadOnly(); this._QuirkChance = value; }
		}

		private Single? _DiseaseChance;
		/// <summary>
		/// from 0.0 to 1.0 where 0.5 is 50%. 
		/// </summary>
		
		public Single? DiseaseChance
		{
			get { return this._DiseaseChance; }
			set { this.ThrowIfReadOnly(); this._DiseaseChance = value; }
		}

		private ReadOnlyList<ParameterValue> _Effects;
		/// <summary>
		/// No description is provided. 
		/// </summary>
		
		public ReadOnlyList<ParameterValue> Effects
		{
			get { return this._Effects; }
			set { this.ThrowIfReadOnly(); this._Effects = value; }
		}

		private Boolean _ItemIsConsumed;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Boolean ItemIsConsumed
		{
			get { return this._ItemIsConsumed; }
			set { this.ThrowIfReadOnly(); this._ItemIsConsumed = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			if (this._Item != null)
				this._Item.Resolve(refResolver);

			if (this._Loot == null)
				this._Loot = this._Loot.EmptyIfNull();

			if (this._Effects == null)
				this._Effects = this._Effects.EmptyIfNull();

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(CurioCleansingOption other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is CurioCleansingOption == false)
				return false;

			var other = (CurioCleansingOption)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Chance, other._Chance)
				&& AreEquals(this._Item, other._Item)
				&& AreEquals(this._Loot, other._Loot)
				&& AreEquals(this._QuirkChance, other._QuirkChance)
				&& AreEquals(this._DiseaseChance, other._DiseaseChance)
				&& AreEquals(this._Effects, other._Effects)
				&& AreEquals(this._ItemIsConsumed, other._ItemIsConsumed)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as CurioCleansingOption);
		}

		public int CompareTo(CurioCleansingOption other)
		{
			if (other == null)
				return 1;
			return this.Id.CompareTo(other.Id);
		}

		public static bool operator ==(CurioCleansingOption value1, CurioCleansingOption value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(CurioCleansingOption value1, CurioCleansingOption value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Chance)
				+ GetHashCodeFor(this._Item)
				+ GetHashCodeFor(this._Loot)
				+ GetHashCodeFor(this._QuirkChance)
				+ GetHashCodeFor(this._DiseaseChance)
				+ GetHashCodeFor(this._Effects)
				+ GetHashCodeFor(this._ItemIsConsumed)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Chance: ").Append(this.Chance).Append(", ");
				sb.Append("Item: ").Append(this.Item).Append(", ");
				sb.Append("Loot: ").Append(this.Loot).Append(", ");
				sb.Append("QuirkChance: ").Append(this.QuirkChance).Append(", ");
				sb.Append("DiseaseChance: ").Append(this.DiseaseChance).Append(", ");
				sb.Append("Effects: ").Append(this.Effects).Append(", ");
				sb.Append("ItemIsConsumed: ").Append(this.ItemIsConsumed).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Curio : RpgGameData.Document, IEquatable<Curio>, IComparable, IComparable<Curio>
	{
		private int hashCode;

		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private CurioType _Type;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public CurioType Type
		{
			get { return this._Type; }
			set { this.ThrowIfReadOnly(); this._Type = value; }
		}

		private RpgGameData.LocalizedString _Name;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.LocalizedString Name_ByLanguage
		{
			get { return this._Name; }
			set { this.ThrowIfReadOnly(); this._Name = value; }
		}
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Name
		{
			get
			{
				if (this._Name == null)
					return null;
				else
					return this._Name.Value;
			}
		}

		private RpgGameData.LocalizedString _Description;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.LocalizedString Description_ByLanguage
		{
			get { return this._Description; }
			set { this.ThrowIfReadOnly(); this._Description = value; }
		}
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Description
		{
			get
			{
				if (this._Description == null)
					return null;
				else
					return this._Description.Value;
			}
		}

		private ReadOnlyList<CurioCleansingOption> _CleansingOptions;
		/// <summary>
		/// None mean - can&apos;t cleanse.. 
		/// </summary>
		
		public ReadOnlyList<CurioCleansingOption> CleansingOptions
		{
			get { return this._CleansingOptions; }
			set { this.ThrowIfReadOnly(); this._CleansingOptions = value; }
		}

		private CurioPlacementRestictions _PlacementRestictions;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public CurioPlacementRestictions PlacementRestictions
		{
			get { return this._PlacementRestictions; }
			set { this.ThrowIfReadOnly(); this._PlacementRestictions = value; }
		}

		private ReadOnlyList<RpgGameData.Reference<Location>> _Locations;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ReadOnlyList<RpgGameData.Reference<Location>> Locations_Reference
		{
			get { return this._Locations; }
			set { this.ThrowIfReadOnly(); this._Locations = value; }
		}
		private ReadOnlyList<Location> _Locations_Dereferenced;
		private bool _Locations_Dereferenced_IsSet;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public ReadOnlyList<Location> Locations
		{
			get
			{
				var referenceValue = default(ReadOnlyList<Location>);
				if (this.isReadOnly && this._Locations_Dereferenced_IsSet)
				{
					referenceValue = this._Locations_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._Locations_Dereferenced = this._Locations.Dereference();
					this._Locations_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._Locations.Dereference();
				}
				return referenceValue;
			}
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			if (this._CleansingOptions == null)
				this._CleansingOptions = this._CleansingOptions.EmptyIfNull();

			if (this._Locations == null)
				this._Locations = this._Locations.EmptyIfNull();

			foreach(var reference in this._Locations)
				reference.Resolve(refResolver);

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			if (this._Name != null)
				this._Name.SetLanguage(language);
			if (this._Description != null)
				this._Description.SetLanguage(language);
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			if (this._Name != null)
				this._Name.SetReadOnly();
			if (this._Description != null)
				this._Description.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Curio other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Curio == false)
				return false;

			var other = (Curio)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Type, other._Type)
				&& AreEquals(this._Name, other._Name)
				&& AreEquals(this._Description, other._Description)
				&& AreEquals(this._CleansingOptions, other._CleansingOptions)
				&& AreEquals(this._PlacementRestictions, other._PlacementRestictions)
				&& AreEquals(this._Locations, other._Locations)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Curio);
		}

		public int CompareTo(Curio other)
		{
			if (other == null)
				return 1;
			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);
		}

		public static bool operator ==(Curio value1, Curio value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Curio value1, Curio value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Type)
				+ GetHashCodeFor(this._Name)
				+ GetHashCodeFor(this._Description)
				+ GetHashCodeFor(this._CleansingOptions)
				+ GetHashCodeFor(this._PlacementRestictions)
				+ GetHashCodeFor(this._Locations)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Type: ").Append(this.Type).Append(", ");
				sb.Append("Name: ").Append(this.Name).Append(", ");
				sb.Append("Description: ").Append(this.Description).Append(", ");
				sb.Append("CleansingOptions: ").Append(this.CleansingOptions).Append(", ");
				sb.Append("PlacementRestictions: ").Append(this.PlacementRestictions).Append(", ");
				sb.Append("Locations: ").Append(this.Locations).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Disease : RpgGameData.Document, IEquatable<Disease>, IComparable, IComparable<Disease>
	{
		private int hashCode;

		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private RpgGameData.LocalizedString _Name;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.LocalizedString Name_ByLanguage
		{
			get { return this._Name; }
			set { this.ThrowIfReadOnly(); this._Name = value; }
		}
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Name
		{
			get
			{
				if (this._Name == null)
					return null;
				else
					return this._Name.Value;
			}
		}

		private ReadOnlyList<ParameterValue> _Effects;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ReadOnlyList<ParameterValue> Effects
		{
			get { return this._Effects; }
			set { this.ThrowIfReadOnly(); this._Effects = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			if (this._Effects == null)
				this._Effects = this._Effects.EmptyIfNull();

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			if (this._Name != null)
				this._Name.SetLanguage(language);
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			if (this._Name != null)
				this._Name.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Disease other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Disease == false)
				return false;

			var other = (Disease)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Name, other._Name)
				&& AreEquals(this._Effects, other._Effects)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Disease);
		}

		public int CompareTo(Disease other)
		{
			if (other == null)
				return 1;
			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);
		}

		public static bool operator ==(Disease value1, Disease value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Disease value1, Disease value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Name)
				+ GetHashCodeFor(this._Effects)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Name: ").Append(this.Name).Append(", ");
				sb.Append("Effects: ").Append(this.Effects).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Quirk : RpgGameData.Document, IEquatable<Quirk>, IComparable, IComparable<Quirk>
	{
		private int hashCode;

		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private RpgGameData.LocalizedString _Name;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.LocalizedString Name_ByLanguage
		{
			get { return this._Name; }
			set { this.ThrowIfReadOnly(); this._Name = value; }
		}
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Name
		{
			get
			{
				if (this._Name == null)
					return null;
				else
					return this._Name.Value;
			}
		}

		private Boolean _IsPositive;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Boolean IsPositive
		{
			get { return this._IsPositive; }
			set { this.ThrowIfReadOnly(); this._IsPositive = value; }
		}

		private ReadOnlyList<ParameterValue> _Effects;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ReadOnlyList<ParameterValue> Effects
		{
			get { return this._Effects; }
			set { this.ThrowIfReadOnly(); this._Effects = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			if (this._Effects == null)
				this._Effects = this._Effects.EmptyIfNull();

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			if (this._Name != null)
				this._Name.SetLanguage(language);
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			if (this._Name != null)
				this._Name.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Quirk other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Quirk == false)
				return false;

			var other = (Quirk)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Name, other._Name)
				&& AreEquals(this._IsPositive, other._IsPositive)
				&& AreEquals(this._Effects, other._Effects)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Quirk);
		}

		public int CompareTo(Quirk other)
		{
			if (other == null)
				return 1;
			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);
		}

		public static bool operator ==(Quirk value1, Quirk value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Quirk value1, Quirk value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Name)
				+ GetHashCodeFor(this._IsPositive)
				+ GetHashCodeFor(this._Effects)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Name: ").Append(this.Name).Append(", ");
				sb.Append("IsPositive: ").Append(this.IsPositive).Append(", ");
				sb.Append("Effects: ").Append(this.Effects).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Conditions : RpgGameData.Document, IEquatable<Conditions>, IComparable, IComparable<Conditions>
	{
		private int hashCode;

		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private RpgGameData.LocalizedString _Description;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.LocalizedString Description_ByLanguage
		{
			get { return this._Description; }
			set { this.ThrowIfReadOnly(); this._Description = value; }
		}
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Description
		{
			get
			{
				if (this._Description == null)
					return null;
				else
					return this._Description.Value;
			}
		}

		private ConditionsCheckExpression _Check;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ConditionsCheckExpression Check
		{
			get { return this._Check; }
			set { this.ThrowIfReadOnly(); this._Check = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			if (this._Description != null)
				this._Description.SetLanguage(language);
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			if (this._Description != null)
				this._Description.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Conditions other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Conditions == false)
				return false;

			var other = (Conditions)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Description, other._Description)
				&& AreEquals(this._Check, other._Check)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Conditions);
		}

		public int CompareTo(Conditions other)
		{
			if (other == null)
				return 1;
			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);
		}

		public static bool operator ==(Conditions value1, Conditions value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Conditions value1, Conditions value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Description)
				+ GetHashCodeFor(this._Check)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Description: ").Append(this.Description).Append(", ");
				sb.Append("Check: ").Append(this.Check).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Weapon : RpgGameData.Document, IEquatable<Weapon>, IComparable, IComparable<Weapon>
	{
		private int hashCode;

		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private RpgGameData.LocalizedString _Name;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.LocalizedString Name_ByLanguage
		{
			get { return this._Name; }
			set { this.ThrowIfReadOnly(); this._Name = value; }
		}
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Name
		{
			get
			{
				if (this._Name == null)
					return null;
				else
					return this._Name.Value;
			}
		}

		private Int32 _DamageFrom;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 DamageFrom
		{
			get { return this._DamageFrom; }
			set { this.ThrowIfReadOnly(); this._DamageFrom = value; }
		}

		private Int32 _DamageTo;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 DamageTo
		{
			get { return this._DamageTo; }
			set { this.ThrowIfReadOnly(); this._DamageTo = value; }
		}

		private Single _CriticalStrikeChance;
		/// <summary>
		/// from 0.0 to 1.0 where 0.5 is 50%. Not null.
		/// </summary>
		
		public Single CriticalStrikeChance
		{
			get { return this._CriticalStrikeChance; }
			set { this.ThrowIfReadOnly(); this._CriticalStrikeChance = value; }
		}

		private Int32 _Speed;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Speed
		{
			get { return this._Speed; }
			set { this.ThrowIfReadOnly(); this._Speed = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			if (this._Name != null)
				this._Name.SetLanguage(language);
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			if (this._Name != null)
				this._Name.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Weapon other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Weapon == false)
				return false;

			var other = (Weapon)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Name, other._Name)
				&& AreEquals(this._DamageFrom, other._DamageFrom)
				&& AreEquals(this._DamageTo, other._DamageTo)
				&& AreEquals(this._CriticalStrikeChance, other._CriticalStrikeChance)
				&& AreEquals(this._Speed, other._Speed)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Weapon);
		}

		public int CompareTo(Weapon other)
		{
			if (other == null)
				return 1;
			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);
		}

		public static bool operator ==(Weapon value1, Weapon value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Weapon value1, Weapon value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Name)
				+ GetHashCodeFor(this._DamageFrom)
				+ GetHashCodeFor(this._DamageTo)
				+ GetHashCodeFor(this._CriticalStrikeChance)
				+ GetHashCodeFor(this._Speed)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Name: ").Append(this.Name).Append(", ");
				sb.Append("DamageFrom: ").Append(this.DamageFrom).Append(", ");
				sb.Append("DamageTo: ").Append(this.DamageTo).Append(", ");
				sb.Append("CriticalStrikeChance: ").Append(this.CriticalStrikeChance).Append(", ");
				sb.Append("Speed: ").Append(this.Speed).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class Armor : RpgGameData.Document, IEquatable<Armor>, IComparable, IComparable<Armor>
	{
		private int hashCode;

		private String _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public String Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private RpgGameData.LocalizedString _Name;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.LocalizedString Name_ByLanguage
		{
			get { return this._Name; }
			set { this.ThrowIfReadOnly(); this._Name = value; }
		}
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public string Name
		{
			get
			{
				if (this._Name == null)
					return null;
				else
					return this._Name.Value;
			}
		}

		private Single _Dodge;
		/// <summary>
		/// from 0.0 to 1.0 where 0.5 is 50%. Not null.
		/// </summary>
		
		public Single Dodge
		{
			get { return this._Dodge; }
			set { this.ThrowIfReadOnly(); this._Dodge = value; }
		}

		private Int32 _HitPoints;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 HitPoints
		{
			get { return this._HitPoints; }
			set { this.ThrowIfReadOnly(); this._HitPoints = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			if (this._Name != null)
				this._Name.SetLanguage(language);
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			if (this._Name != null)
				this._Name.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(Armor other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is Armor == false)
				return false;

			var other = (Armor)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Name, other._Name)
				&& AreEquals(this._Dodge, other._Dodge)
				&& AreEquals(this._HitPoints, other._HitPoints)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as Armor);
		}

		public int CompareTo(Armor other)
		{
			if (other == null)
				return 1;
			return string.Compare(this.Id, other.Id, StringComparison.Ordinal);
		}

		public static bool operator ==(Armor value1, Armor value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(Armor value1, Armor value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Name)
				+ GetHashCodeFor(this._Dodge)
				+ GetHashCodeFor(this._HitPoints)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Name: ").Append(this.Name).Append(", ");
				sb.Append("Dodge: ").Append(this.Dodge).Append(", ");
				sb.Append("HitPoints: ").Append(this.HitPoints).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class ItemWithCount : RpgGameData.Document, IEquatable<ItemWithCount>, IComparable, IComparable<ItemWithCount>
	{
		private int hashCode;

		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private RpgGameData.Reference<Item> _Item;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.Reference<Item> Item_Reference
		{
			get { return this._Item; }
			set { this.ThrowIfReadOnly(); this._Item = value; }
		}
		private Item _Item_Dereferenced;
		private bool _Item_Dereferenced_IsSet;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public Item Item
		{
			get
			{
				var referenceValue = default(Item);
				if (this.isReadOnly && this._Item_Dereferenced_IsSet)
				{
					referenceValue = this._Item_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._Item_Dereferenced = this._Item.Dereference();
					this._Item_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._Item.Dereference();
				}
				return referenceValue;
			}
		}

		private Int32 _Count;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Count
		{
			get { return this._Count; }
			set { this.ThrowIfReadOnly(); this._Count = value; }
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			if (this._Item != null)
				this._Item.Resolve(refResolver);

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(ItemWithCount other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is ItemWithCount == false)
				return false;

			var other = (ItemWithCount)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Item, other._Item)
				&& AreEquals(this._Count, other._Count)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as ItemWithCount);
		}

		public int CompareTo(ItemWithCount other)
		{
			if (other == null)
				return 1;
			return this.Id.CompareTo(other.Id);
		}

		public static bool operator ==(ItemWithCount value1, ItemWithCount value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(ItemWithCount value1, ItemWithCount value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Item)
				+ GetHashCodeFor(this._Count)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Item: ").Append(this.Item).Append(", ");
				sb.Append("Count: ").Append(this.Count).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	/// <summary>
	/// No description is provided.
	/// </summary>
	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public sealed partial class StartingSet : RpgGameData.Document, IEquatable<StartingSet>, IComparable, IComparable<StartingSet>
	{
		private int hashCode;

		private Int32 _Id;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public Int32 Id
		{
			get { return this._Id; }
			set { this.ThrowIfReadOnly(); this._Id = value; }
		}

		private ReadOnlyList<ItemWithCount> _Items;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ReadOnlyList<ItemWithCount> Items
		{
			get { return this._Items; }
			set { this.ThrowIfReadOnly(); this._Items = value; }
		}

		private ReadOnlyList<RpgGameData.Reference<Hero>> _Heroes;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public ReadOnlyList<RpgGameData.Reference<Hero>> Heroes_Reference
		{
			get { return this._Heroes; }
			set { this.ThrowIfReadOnly(); this._Heroes = value; }
		}
		private ReadOnlyList<Hero> _Heroes_Dereferenced;
		private bool _Heroes_Dereferenced_IsSet;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public ReadOnlyList<Hero> Heroes
		{
			get
			{
				var referenceValue = default(ReadOnlyList<Hero>);
				if (this.isReadOnly && this._Heroes_Dereferenced_IsSet)
				{
					referenceValue = this._Heroes_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._Heroes_Dereferenced = this._Heroes.Dereference();
					this._Heroes_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._Heroes.Dereference();
				}
				return referenceValue;
			}
		}

		private RpgGameData.Reference<Location> _Location;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		
		public RpgGameData.Reference<Location> Location_Reference
		{
			get { return this._Location; }
			set { this.ThrowIfReadOnly(); this._Location = value; }
		}
		private Location _Location_Dereferenced;
		private bool _Location_Dereferenced_IsSet;
		/// <summary>
		/// No description is provided. Not null.
		/// </summary>
		public Location Location
		{
			get
			{
				var referenceValue = default(Location);
				if (this.isReadOnly && this._Location_Dereferenced_IsSet)
				{
					referenceValue = this._Location_Dereferenced;
				}
				else if (this.isReadOnly)
				{
					referenceValue = this._Location_Dereferenced = this._Location.Dereference();
					this._Location_Dereferenced_IsSet = true;
				}
				else
				{
					referenceValue = this._Location.Dereference();
				}
				return referenceValue;
			}
		}

		internal void _DoInitialize(Func<string, object, RpgGameData.Document> refResolver)
		{
			if (refResolver == null) throw new ArgumentNullException("refResolver");

			this.ThrowIfReadOnly();

			this.OnBeforeInitialize();

			if (this._Items == null)
				this._Items = this._Items.EmptyIfNull();

			if (this._Heroes == null)
				this._Heroes = this._Heroes.EmptyIfNull();

			foreach(var reference in this._Heroes)
				reference.Resolve(refResolver);

			if (this._Location != null)
				this._Location.Resolve(refResolver);

			this.OnInitialize();
		}

		partial void OnBeforeInitialize();
		partial void OnInitialize();

		internal void SetLanguage(string language)
		{
			this.OnSetLanguage(language);
		}

		partial void OnSetLanguage(string language);

		protected internal override void SetReadOnly()
		{
			base.SetReadOnly();
			this.hashCode = this.ComputeHashCode();

			this.OnSetReadOnly();
		}

		partial void OnSetReadOnly();

		public bool Equals(StartingSet other)
		{
			return this.Equals((object)other);
		}

		public override bool Equals(object value)
		{
			if(value is StartingSet == false)
				return false;

			var other = (StartingSet)value;
			return this.GetHashCode() == other.GetHashCode()
				&& AreEquals(this._Id, other._Id)
				&& AreEquals(this._Items, other._Items)
				&& AreEquals(this._Heroes, other._Heroes)
				&& AreEquals(this._Location, other._Location)
			;
		}

		public override int GetHashCode()
		{
			if (this.isReadOnly)
				return this.hashCode;
			return this.ComputeHashCode();
		}

		int IComparable.CompareTo(object obj)
		{
			return this.CompareTo(obj as StartingSet);
		}

		public int CompareTo(StartingSet other)
		{
			if (other == null)
				return 1;
			return this.Id.CompareTo(other.Id);
		}

		public static bool operator ==(StartingSet value1, StartingSet value2)
		{
			return Object.Equals(value1, value2);
		}
		public static bool operator !=(StartingSet value1, StartingSet value2)
		{
			return Object.Equals(value1, value2) == false;
		}

		private int ComputeHashCode()
		{
			return unchecked(this.GetType().Name.GetHashCode()
				+ GetHashCodeFor(this._Id)
				+ GetHashCodeFor(this._Items)
				+ GetHashCodeFor(this._Heroes)
				+ GetHashCodeFor(this._Location)
			);
		}

		public override string ToString()
		{
			var sb = new System.Text.StringBuilder();
				sb.Append("Id: ").Append(this.Id).Append(", ");
				sb.Append("Items: ").Append(this.Items).Append(", ");
				sb.Append("Heroes: ").Append(this.Heroes).Append(", ");
				sb.Append("Location: ").Append(this.Location).Append(", ");
			if (sb.Length > 2)
				sb.Length -= 2;

			return sb.ToString();
		}
	}

	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public enum ParameterId: int
	{
		HitPoints = 1,
		MaxHitPoints = 2,
		MaxHitPointsPercent = 3,
		Speed = 4,
		Accuracy = 5,
		CrtiticalStrikeChance = 6,
		Stress = 7,
		Dodge = 8,
		Protection = 9,
		ScoutingChance = 10,
		FoodConsumationMultiplier = 11,
		HealResistance = 20,
		StunResistance = 21,
		BlightResistance = 22,
		DiseaseResistance = 23,
		DeathBlowResistance = 24,
		MoveResistance = 25,
		BleedResistance = 26,
		DebuffResistance = 27,
		TrapResistance = 28,
		StressResistance = 29,
		HealAmplification = 30,
		StressHealAplification = 31,
		DamageFrom = 50,
		DamageTo = 51,
		DamagePercent = 52,
		HealFrom = 53,
		HealTo = 54,
		HealMultiplier = 55,
		HealPercent = 56,
		StressHealFrom = 57,
		StressHealTo = 58,
		StressHealPercent = 59,
		BleedHealChance = 60,
		StunChance = 70,
		MarkChance = 71,
		KnockbackChance = 73,
		VirtueChance = 74,
		Position = 80,
	}

	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public enum ParameterValueKind: int
	{
		Integer = 1,
		Number = 2,
		Percent = 3,
	}

	[Flags]
	[GeneratedCode("Charon", "2017.4.3.0")]
	public enum LocationFlags: int
	{
		None = 0,
		Home = 1,
		Tutorial = 2,
	}

	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public enum TrinketRarity: int
	{
		Common = 1,
		Uncommon = 2,
		Rare = 3,
		VeryRare = 4,
		Shrieker = 5,
		Ancestral = 6,
		CrimsonCourt = 7,
		DarkestDungeon = 8,
		Trophy = 9,
		Backer = 10,
	}

	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public enum MonsterType: int
	{
		Human = 1,
		Beast = 2,
		Unholy = 3,
		Eldritch = 4,
		Corpse = 5,
		Carpentry = 6,
		Crockery = 7,
		Ironwork = 8,
		Thatchery = 9,
		Cosmic = 10,
	}

	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public enum LootType: int
	{
		Any = 1,
		Heirloom = 2,
		Trinket = 3,
		Supplies = 4,
		Torch = 5,
		Gold = 6,
		Food = 7,
	}

	
	[GeneratedCode("Charon", "2017.4.3.0")]
	public enum DurationUnit: int
	{
		Rounds = 1,
		Camps = 2,
		Missions = 3,
	}

	[Flags]
	[GeneratedCode("Charon", "2017.4.3.0")]
	public enum CurioType: int
	{
		None = 0,
		Reflective = 1,
		Worship = 2,
		Knowledge = 4,
		Haunted = 8,
		Scrounging = 16,
		Fountain = 32,
		Torture = 64,
		Treasure = 128,
		Body = 256,
		Unholy = 512,
		Drink = 1024,
		Food = 2048,
	}

	[Flags]
	[GeneratedCode("Charon", "2017.4.3.0")]
	public enum CurioPlacementRestictions: int
	{
		None = 0,
		Room = 1,
		Corridor = 2,
	}


	[GeneratedCode("Charon", "2017.4.3.0")]
	public partial class ConditionsCheckExpression
	{
		private static readonly ITypeResolver TypeResolver;
		private static readonly Binder ExpressionBinder;

		public partial class ConditionsScope
		{
			public Conditions @this;
		}

		private readonly SyntaxTreeNode syntaxTree;
		private readonly Expression<Func<Assets.Scripts.CheckContext, System.Boolean>> expression;
		private Func<Assets.Scripts.CheckContext, System.Boolean> compiledExpression;

		static ConditionsCheckExpression()
		{
			// AOT
			if (typeof(object).Name == string.Empty)
			{
				new System.Runtime.CompilerServices.StrongBox<ConditionsScope>(default(ConditionsScope));
				
				new System.Runtime.CompilerServices.StrongBox<Assets.Scripts.AttackType>(default(Assets.Scripts.AttackType));
			}

			var parameters = new ParameterExpression[]
			{
				Expression.Parameter(typeof(Assets.Scripts.CheckContext), "context"),
			};

			TypeResolver = new KnownTypeResolver(new Type[]
			{
				typeof(Assets.Scripts.CheckContext),
				typeof(Assets.Scripts.AttackType),
				typeof(System.Boolean),
				typeof(ConditionsScope)
			}, RpgGameData.TypeResolver);

			ExpressionBinder = new Binder(parameters, typeof(System.Boolean), TypeResolver);

			AotCompilation.RegisterFunc<Assets.Scripts.CheckContext, System.Boolean>();
		}
		public ConditionsCheckExpression(SyntaxTreeNode syntaxTree, Conditions thisObject)
		{
			if (syntaxTree == null) throw new ArgumentNullException("syntaxTree");
			if (thisObject == null) throw new ArgumentNullException("thisObject");

			this.syntaxTree = syntaxTree;
			var globalObject = new ConditionsScope { @this = thisObject };
			this.expression = (Expression<Func<Assets.Scripts.CheckContext, System.Boolean>>)ExpressionBinder.Bind(syntaxTree, Expression.Constant(globalObject));
		}

		public System.Boolean Invoke(Assets.Scripts.CheckContext context)
		{
			var fn = this.CompileAot();
			return fn.Invoke(context);
		}

		public Func<Assets.Scripts.CheckContext, System.Boolean> CompileAot()
		{
			try
			{
				if (this.compiledExpression == null)
					this.compiledExpression = this.expression.CompileAot();
				return this.compiledExpression;
			}
			catch (Exception compilationError)
			{
				throw new InvalidOperationException(string.Format("Failed to compile expression '{0}' due errors: {1}{2}", this.syntaxTree.ToString(), Environment.NewLine, compilationError.Message), compilationError);
			}
		}
		public Func<Assets.Scripts.CheckContext, System.Boolean> Compile()
		{
			try
			{
				if (this.compiledExpression == null)
					this.compiledExpression = this.expression.Compile();
				return this.compiledExpression;
			}
			catch (Exception compilationError)
			{
				throw new InvalidOperationException(string.Format("Failed to compile expression '{0}' due errors: {1}{2}", this.syntaxTree.ToString(), Environment.NewLine, compilationError.Message), compilationError);
			}
		}

		public Expression<Func<Assets.Scripts.CheckContext, System.Boolean>> GetExpression()
		{
			return this.expression;
		}

		public override string ToString()
		{
			return this.expression.ToString();
		}
	}


	[GeneratedCode("Charon", "2017.4.3.0")]
	public partial class RpgGameData
	{
		public static readonly ITypeResolver TypeResolver = new KnownTypeResolver(new Type[]
		{
				typeof(RpgGameData),
				typeof(Parameter),
				typeof(ParameterValue),
				typeof(Provision),
				typeof(Hero),
				typeof(Item),
				typeof(Location),
				typeof(Trinket),
				typeof(Monster),
				typeof(Loot),
				typeof(CombatEffect),
				typeof(CurioCleansingOption),
				typeof(Curio),
				typeof(Disease),
				typeof(Quirk),
				typeof(Conditions),
				typeof(Weapon),
				typeof(Armor),
				typeof(ItemWithCount),
				typeof(StartingSet),
				typeof(ConditionsCheckExpression),
				typeof(ParameterId),
				typeof(ParameterValueKind),
				typeof(LocationFlags),
				typeof(TrinketRarity),
				typeof(MonsterType),
				typeof(LootType),
				typeof(DurationUnit),
				typeof(CurioType),
				typeof(CurioPlacementRestictions),
		});

		#region Storage fields
		private ReadOnlyList<Parameter> rootParameter;
		private ReadOnlyList<Parameter> allParameter;
		private ReadOnlyDictionary<ParameterId, Parameter> allParameterById;
		private ReadOnlyList<ParameterValue> rootParameterValue;
		private ReadOnlyList<ParameterValue> allParameterValue;
		private ReadOnlyDictionary<Int32, ParameterValue> allParameterValueById;
		private ReadOnlyList<Provision> rootProvision;
		private ReadOnlyList<Provision> allProvision;
		private ReadOnlyDictionary<String, Provision> allProvisionById;
		private ReadOnlyList<Hero> rootHero;
		private ReadOnlyList<Hero> allHero;
		private ReadOnlyDictionary<String, Hero> allHeroById;
		private ReadOnlyList<Item> rootItem;
		private ReadOnlyList<Item> allItem;
		private ReadOnlyDictionary<String, Item> allItemById;
		private ReadOnlyList<Location> rootLocation;
		private ReadOnlyList<Location> allLocation;
		private ReadOnlyDictionary<String, Location> allLocationById;
		private ReadOnlyList<Trinket> rootTrinket;
		private ReadOnlyList<Trinket> allTrinket;
		private ReadOnlyDictionary<String, Trinket> allTrinketById;
		private ReadOnlyList<Monster> rootMonster;
		private ReadOnlyList<Monster> allMonster;
		private ReadOnlyDictionary<String, Monster> allMonsterById;
		private ReadOnlyList<Loot> rootLoot;
		private ReadOnlyList<Loot> allLoot;
		private ReadOnlyDictionary<Int32, Loot> allLootById;
		private ReadOnlyList<CombatEffect> rootCombatEffect;
		private ReadOnlyList<CombatEffect> allCombatEffect;
		private ReadOnlyDictionary<Int32, CombatEffect> allCombatEffectById;
		private ReadOnlyList<CurioCleansingOption> rootCurioCleansingOption;
		private ReadOnlyList<CurioCleansingOption> allCurioCleansingOption;
		private ReadOnlyDictionary<Int32, CurioCleansingOption> allCurioCleansingOptionById;
		private ReadOnlyList<Curio> rootCurio;
		private ReadOnlyList<Curio> allCurio;
		private ReadOnlyDictionary<String, Curio> allCurioById;
		private ReadOnlyList<Disease> rootDisease;
		private ReadOnlyList<Disease> allDisease;
		private ReadOnlyDictionary<String, Disease> allDiseaseById;
		private ReadOnlyList<Quirk> rootQuirk;
		private ReadOnlyList<Quirk> allQuirk;
		private ReadOnlyDictionary<String, Quirk> allQuirkById;
		private ReadOnlyList<Conditions> rootConditions;
		private ReadOnlyList<Conditions> allConditions;
		private ReadOnlyDictionary<String, Conditions> allConditionsById;
		private ReadOnlyList<Weapon> rootWeapon;
		private ReadOnlyList<Weapon> allWeapon;
		private ReadOnlyDictionary<String, Weapon> allWeaponById;
		private ReadOnlyList<Armor> rootArmor;
		private ReadOnlyList<Armor> allArmor;
		private ReadOnlyDictionary<String, Armor> allArmorById;
		private ReadOnlyList<ItemWithCount> rootItemWithCount;
		private ReadOnlyList<ItemWithCount> allItemWithCount;
		private ReadOnlyDictionary<Int32, ItemWithCount> allItemWithCountById;
		private ReadOnlyList<StartingSet> rootStartingSet;
		private ReadOnlyList<StartingSet> allStartingSet;
		private ReadOnlyDictionary<Int32, StartingSet> allStartingSetById;
		#endregion

		private readonly ReadOnlyCollection<string> languages = new ReadOnlyCollection<string>(new string[] { "en-US" });

		public ReadOnlyCollection<string> SupportedLanguages { get { return this.languages; } }

		public RpgGameData(Stream data, Format format, Encoding encoding = null, bool leaveOpen = false)
		{
			if (data == null) throw new ArgumentNullException("data");

			if (encoding == null) encoding = Encoding.UTF8;

			switch(format)
			{
				case Format.Json: this.ReadJson(this, data, encoding, leaveOpen); break;
				case Format.Bson: this.ReadBson(this, data, encoding, leaveOpen); break;
				case Format.Xml: this.ReadXml(this, data, encoding, leaveOpen); break;
				case Format.MessagePack: this.ReadMessagePack(this, data, encoding, leaveOpen); break;
				default: throw new ArgumentException(string.Format("Unknown/Unsupported data format specified '{0}'.", format), "format");
			}

#pragma warning disable 0162 // Unreachable code detected
			this.Initialize();
#pragma warning restore 0162
		}

		private void Initialize()
		{
#pragma warning disable 0168 // The variable `resolver' is declared but never used
			var resolver = (Func<string, object, Document>)this.Resolve;
#pragma warning restore 0168

			if (this.rootParameter == null) this.rootParameter = ReadOnlyList<Parameter>.Empty;
			if (this.allParameter == null) this.allParameter = ReadOnlyList<Parameter>.Empty;
			if (this.rootParameterValue == null) this.rootParameterValue = ReadOnlyList<ParameterValue>.Empty;
			if (this.allParameterValue == null) this.allParameterValue = ReadOnlyList<ParameterValue>.Empty;
			if (this.rootProvision == null) this.rootProvision = ReadOnlyList<Provision>.Empty;
			if (this.allProvision == null) this.allProvision = ReadOnlyList<Provision>.Empty;
			if (this.rootHero == null) this.rootHero = ReadOnlyList<Hero>.Empty;
			if (this.allHero == null) this.allHero = ReadOnlyList<Hero>.Empty;
			if (this.rootItem == null) this.rootItem = ReadOnlyList<Item>.Empty;
			if (this.allItem == null) this.allItem = ReadOnlyList<Item>.Empty;
			if (this.rootLocation == null) this.rootLocation = ReadOnlyList<Location>.Empty;
			if (this.allLocation == null) this.allLocation = ReadOnlyList<Location>.Empty;
			if (this.rootTrinket == null) this.rootTrinket = ReadOnlyList<Trinket>.Empty;
			if (this.allTrinket == null) this.allTrinket = ReadOnlyList<Trinket>.Empty;
			if (this.rootMonster == null) this.rootMonster = ReadOnlyList<Monster>.Empty;
			if (this.allMonster == null) this.allMonster = ReadOnlyList<Monster>.Empty;
			if (this.rootLoot == null) this.rootLoot = ReadOnlyList<Loot>.Empty;
			if (this.allLoot == null) this.allLoot = ReadOnlyList<Loot>.Empty;
			if (this.rootCombatEffect == null) this.rootCombatEffect = ReadOnlyList<CombatEffect>.Empty;
			if (this.allCombatEffect == null) this.allCombatEffect = ReadOnlyList<CombatEffect>.Empty;
			if (this.rootCurioCleansingOption == null) this.rootCurioCleansingOption = ReadOnlyList<CurioCleansingOption>.Empty;
			if (this.allCurioCleansingOption == null) this.allCurioCleansingOption = ReadOnlyList<CurioCleansingOption>.Empty;
			if (this.rootCurio == null) this.rootCurio = ReadOnlyList<Curio>.Empty;
			if (this.allCurio == null) this.allCurio = ReadOnlyList<Curio>.Empty;
			if (this.rootDisease == null) this.rootDisease = ReadOnlyList<Disease>.Empty;
			if (this.allDisease == null) this.allDisease = ReadOnlyList<Disease>.Empty;
			if (this.rootQuirk == null) this.rootQuirk = ReadOnlyList<Quirk>.Empty;
			if (this.allQuirk == null) this.allQuirk = ReadOnlyList<Quirk>.Empty;
			if (this.rootConditions == null) this.rootConditions = ReadOnlyList<Conditions>.Empty;
			if (this.allConditions == null) this.allConditions = ReadOnlyList<Conditions>.Empty;
			if (this.rootWeapon == null) this.rootWeapon = ReadOnlyList<Weapon>.Empty;
			if (this.allWeapon == null) this.allWeapon = ReadOnlyList<Weapon>.Empty;
			if (this.rootArmor == null) this.rootArmor = ReadOnlyList<Armor>.Empty;
			if (this.allArmor == null) this.allArmor = ReadOnlyList<Armor>.Empty;
			if (this.rootItemWithCount == null) this.rootItemWithCount = ReadOnlyList<ItemWithCount>.Empty;
			if (this.allItemWithCount == null) this.allItemWithCount = ReadOnlyList<ItemWithCount>.Empty;
			if (this.rootStartingSet == null) this.rootStartingSet = ReadOnlyList<StartingSet>.Empty;
			if (this.allStartingSet == null) this.allStartingSet = ReadOnlyList<StartingSet>.Empty;

			this.FlattenStructure();

			this.allParameterById = this.allParameter.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allParameterValueById = this.allParameterValue.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allProvisionById = this.allProvision.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allHeroById = this.allHero.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allItemById = this.allItem.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allLocationById = this.allLocation.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allTrinketById = this.allTrinket.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allMonsterById = this.allMonster.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allLootById = this.allLoot.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allCombatEffectById = this.allCombatEffect.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allCurioCleansingOptionById = this.allCurioCleansingOption.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allCurioById = this.allCurio.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allDiseaseById = this.allDisease.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allQuirkById = this.allQuirk.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allConditionsById = this.allConditions.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allWeaponById = this.allWeapon.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allArmorById = this.allArmor.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allItemWithCountById = this.allItemWithCount.ToDictionarySkippingNullKeys(entry => entry.Id);
			this.allStartingSetById = this.allStartingSet.ToDictionarySkippingNullKeys(entry => entry.Id);

			this.BeforeInitialize();

			foreach(var entry in this.allParameter)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allParameterValue)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allProvision)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allHero)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allItem)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allLocation)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allTrinket)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allMonster)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allLoot)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allCombatEffect)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allCurioCleansingOption)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allCurio)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allDisease)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allQuirk)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allConditions)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allWeapon)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allArmor)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allItemWithCount)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			foreach(var entry in this.allStartingSet)
			{
				entry._DoInitialize(resolver);
				entry.SetLanguage("en-US");
				entry.SetReadOnly();
			}
			this.OnInitialize();
		}

		partial void BeforeInitialize();
		partial void OnInitialize();

		#region Accessors
		// Parameter -> Id
		public Parameter GetParameter(ParameterId id)
		{
			ThrowIfNull(id, "id");

			var value = default(Parameter);
			if (this.allParameterById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Parameter with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasParameter(ParameterId id)
		{
			ThrowIfNull(id, "id");

			return this.allParameterById.ContainsKey(id);
		}
		public Parameter FindParameter(ParameterId id)
		{
			ThrowIfNull(id, "id");

			var value = default(Parameter);
			this.allParameterById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetParameter(ParameterId id, out Parameter value)
		{
			ThrowIfNull(id, "id");

			return this.allParameterById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Parameter> GetParameters(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootParameter;
			else
				return this.allParameter;
		}
		// ParameterValue -> Id
		public ParameterValue GetParameterValue(Int32 id)
		{
			ThrowIfNull(id, "id");

			var value = default(ParameterValue);
			if (this.allParameterValueById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find ParameterValue with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasParameterValue(Int32 id)
		{
			ThrowIfNull(id, "id");

			return this.allParameterValueById.ContainsKey(id);
		}
		public ParameterValue FindParameterValue(Int32 id)
		{
			ThrowIfNull(id, "id");

			var value = default(ParameterValue);
			this.allParameterValueById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetParameterValue(Int32 id, out ParameterValue value)
		{
			ThrowIfNull(id, "id");

			return this.allParameterValueById.TryGetValue(id, out value);
		}
		public ReadOnlyList<ParameterValue> GetParameterValues(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootParameterValue;
			else
				return this.allParameterValue;
		}
		// Provision -> Id
		public Provision GetProvision(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Provision);
			if (this.allProvisionById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Provision with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasProvision(String id)
		{
			ThrowIfNull(id, "id");

			return this.allProvisionById.ContainsKey(id);
		}
		public Provision FindProvision(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Provision);
			this.allProvisionById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetProvision(String id, out Provision value)
		{
			ThrowIfNull(id, "id");

			return this.allProvisionById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Provision> GetProvisions(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootProvision;
			else
				return this.allProvision;
		}
		// Hero -> Id
		public Hero GetHero(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Hero);
			if (this.allHeroById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Hero with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasHero(String id)
		{
			ThrowIfNull(id, "id");

			return this.allHeroById.ContainsKey(id);
		}
		public Hero FindHero(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Hero);
			this.allHeroById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetHero(String id, out Hero value)
		{
			ThrowIfNull(id, "id");

			return this.allHeroById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Hero> GetHeros(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootHero;
			else
				return this.allHero;
		}
		// Item -> Id
		public Item GetItem(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Item);
			if (this.allItemById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Item with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasItem(String id)
		{
			ThrowIfNull(id, "id");

			return this.allItemById.ContainsKey(id);
		}
		public Item FindItem(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Item);
			this.allItemById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetItem(String id, out Item value)
		{
			ThrowIfNull(id, "id");

			return this.allItemById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Item> GetItems(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootItem;
			else
				return this.allItem;
		}
		// Location -> Id
		public Location GetLocation(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Location);
			if (this.allLocationById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Location with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasLocation(String id)
		{
			ThrowIfNull(id, "id");

			return this.allLocationById.ContainsKey(id);
		}
		public Location FindLocation(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Location);
			this.allLocationById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetLocation(String id, out Location value)
		{
			ThrowIfNull(id, "id");

			return this.allLocationById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Location> GetLocations(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootLocation;
			else
				return this.allLocation;
		}
		// Trinket -> Id
		public Trinket GetTrinket(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Trinket);
			if (this.allTrinketById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Trinket with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasTrinket(String id)
		{
			ThrowIfNull(id, "id");

			return this.allTrinketById.ContainsKey(id);
		}
		public Trinket FindTrinket(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Trinket);
			this.allTrinketById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetTrinket(String id, out Trinket value)
		{
			ThrowIfNull(id, "id");

			return this.allTrinketById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Trinket> GetTrinkets(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootTrinket;
			else
				return this.allTrinket;
		}
		// Monster -> Id
		public Monster GetMonster(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Monster);
			if (this.allMonsterById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Monster with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasMonster(String id)
		{
			ThrowIfNull(id, "id");

			return this.allMonsterById.ContainsKey(id);
		}
		public Monster FindMonster(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Monster);
			this.allMonsterById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetMonster(String id, out Monster value)
		{
			ThrowIfNull(id, "id");

			return this.allMonsterById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Monster> GetMonsters(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootMonster;
			else
				return this.allMonster;
		}
		// Loot -> Id
		public Loot GetLoot(Int32 id)
		{
			ThrowIfNull(id, "id");

			var value = default(Loot);
			if (this.allLootById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Loot with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasLoot(Int32 id)
		{
			ThrowIfNull(id, "id");

			return this.allLootById.ContainsKey(id);
		}
		public Loot FindLoot(Int32 id)
		{
			ThrowIfNull(id, "id");

			var value = default(Loot);
			this.allLootById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetLoot(Int32 id, out Loot value)
		{
			ThrowIfNull(id, "id");

			return this.allLootById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Loot> GetLoots(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootLoot;
			else
				return this.allLoot;
		}
		// CombatEffect -> Id
		public CombatEffect GetCombatEffect(Int32 id)
		{
			ThrowIfNull(id, "id");

			var value = default(CombatEffect);
			if (this.allCombatEffectById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find CombatEffect with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasCombatEffect(Int32 id)
		{
			ThrowIfNull(id, "id");

			return this.allCombatEffectById.ContainsKey(id);
		}
		public CombatEffect FindCombatEffect(Int32 id)
		{
			ThrowIfNull(id, "id");

			var value = default(CombatEffect);
			this.allCombatEffectById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetCombatEffect(Int32 id, out CombatEffect value)
		{
			ThrowIfNull(id, "id");

			return this.allCombatEffectById.TryGetValue(id, out value);
		}
		public ReadOnlyList<CombatEffect> GetCombatEffects(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootCombatEffect;
			else
				return this.allCombatEffect;
		}
		// CurioCleansingOption -> Id
		public CurioCleansingOption GetCurioCleansingOption(Int32 id)
		{
			ThrowIfNull(id, "id");

			var value = default(CurioCleansingOption);
			if (this.allCurioCleansingOptionById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find CurioCleansingOption with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasCurioCleansingOption(Int32 id)
		{
			ThrowIfNull(id, "id");

			return this.allCurioCleansingOptionById.ContainsKey(id);
		}
		public CurioCleansingOption FindCurioCleansingOption(Int32 id)
		{
			ThrowIfNull(id, "id");

			var value = default(CurioCleansingOption);
			this.allCurioCleansingOptionById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetCurioCleansingOption(Int32 id, out CurioCleansingOption value)
		{
			ThrowIfNull(id, "id");

			return this.allCurioCleansingOptionById.TryGetValue(id, out value);
		}
		public ReadOnlyList<CurioCleansingOption> GetCurioCleansingOptions(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootCurioCleansingOption;
			else
				return this.allCurioCleansingOption;
		}
		// Curio -> Id
		public Curio GetCurio(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Curio);
			if (this.allCurioById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Curio with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasCurio(String id)
		{
			ThrowIfNull(id, "id");

			return this.allCurioById.ContainsKey(id);
		}
		public Curio FindCurio(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Curio);
			this.allCurioById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetCurio(String id, out Curio value)
		{
			ThrowIfNull(id, "id");

			return this.allCurioById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Curio> GetCurios(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootCurio;
			else
				return this.allCurio;
		}
		// Disease -> Id
		public Disease GetDisease(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Disease);
			if (this.allDiseaseById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Disease with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasDisease(String id)
		{
			ThrowIfNull(id, "id");

			return this.allDiseaseById.ContainsKey(id);
		}
		public Disease FindDisease(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Disease);
			this.allDiseaseById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetDisease(String id, out Disease value)
		{
			ThrowIfNull(id, "id");

			return this.allDiseaseById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Disease> GetDiseases(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootDisease;
			else
				return this.allDisease;
		}
		// Quirk -> Id
		public Quirk GetQuirk(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Quirk);
			if (this.allQuirkById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Quirk with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasQuirk(String id)
		{
			ThrowIfNull(id, "id");

			return this.allQuirkById.ContainsKey(id);
		}
		public Quirk FindQuirk(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Quirk);
			this.allQuirkById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetQuirk(String id, out Quirk value)
		{
			ThrowIfNull(id, "id");

			return this.allQuirkById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Quirk> GetQuirks(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootQuirk;
			else
				return this.allQuirk;
		}
		// Conditions -> Id
		public Conditions GetConditions(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Conditions);
			if (this.allConditionsById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Conditions with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasConditions(String id)
		{
			ThrowIfNull(id, "id");

			return this.allConditionsById.ContainsKey(id);
		}
		public Conditions FindConditions(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Conditions);
			this.allConditionsById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetConditions(String id, out Conditions value)
		{
			ThrowIfNull(id, "id");

			return this.allConditionsById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Conditions> GetConditions(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootConditions;
			else
				return this.allConditions;
		}
		// Weapon -> Id
		public Weapon GetWeapon(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Weapon);
			if (this.allWeaponById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Weapon with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasWeapon(String id)
		{
			ThrowIfNull(id, "id");

			return this.allWeaponById.ContainsKey(id);
		}
		public Weapon FindWeapon(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Weapon);
			this.allWeaponById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetWeapon(String id, out Weapon value)
		{
			ThrowIfNull(id, "id");

			return this.allWeaponById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Weapon> GetWeapons(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootWeapon;
			else
				return this.allWeapon;
		}
		// Armor -> Id
		public Armor GetArmor(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Armor);
			if (this.allArmorById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find Armor with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasArmor(String id)
		{
			ThrowIfNull(id, "id");

			return this.allArmorById.ContainsKey(id);
		}
		public Armor FindArmor(String id)
		{
			ThrowIfNull(id, "id");

			var value = default(Armor);
			this.allArmorById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetArmor(String id, out Armor value)
		{
			ThrowIfNull(id, "id");

			return this.allArmorById.TryGetValue(id, out value);
		}
		public ReadOnlyList<Armor> GetArmors(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootArmor;
			else
				return this.allArmor;
		}
		// ItemWithCount -> Id
		public ItemWithCount GetItemWithCount(Int32 id)
		{
			ThrowIfNull(id, "id");

			var value = default(ItemWithCount);
			if (this.allItemWithCountById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find ItemWithCount with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasItemWithCount(Int32 id)
		{
			ThrowIfNull(id, "id");

			return this.allItemWithCountById.ContainsKey(id);
		}
		public ItemWithCount FindItemWithCount(Int32 id)
		{
			ThrowIfNull(id, "id");

			var value = default(ItemWithCount);
			this.allItemWithCountById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetItemWithCount(Int32 id, out ItemWithCount value)
		{
			ThrowIfNull(id, "id");

			return this.allItemWithCountById.TryGetValue(id, out value);
		}
		public ReadOnlyList<ItemWithCount> GetItemWithCounts(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootItemWithCount;
			else
				return this.allItemWithCount;
		}
		// StartingSet -> Id
		public StartingSet GetStartingSet(Int32 id)
		{
			ThrowIfNull(id, "id");

			var value = default(StartingSet);
			if (this.allStartingSetById.TryGetValue(id, out value) == false)
				throw new System.ArgumentException(string.Format("Unable find StartingSet with Id '{0}'.", id) ,"id");
			return value;
		}
		public bool HasStartingSet(Int32 id)
		{
			ThrowIfNull(id, "id");

			return this.allStartingSetById.ContainsKey(id);
		}
		public StartingSet FindStartingSet(Int32 id)
		{
			ThrowIfNull(id, "id");

			var value = default(StartingSet);
			this.allStartingSetById.TryGetValue(id, out value);
			return value;
		}
		public bool TryGetStartingSet(Int32 id, out StartingSet value)
		{
			ThrowIfNull(id, "id");

			return this.allStartingSetById.TryGetValue(id, out value);
		}
		public ReadOnlyList<StartingSet> GetStartingSets(bool onlyRoot = false)
		{
			if(onlyRoot)
				return this.rootStartingSet;
			else
				return this.allStartingSet;
		}
		// StartingSet -> Instance
		private StartingSet theStartingSet;
		public StartingSet StartingSet 
		{ 
			get 
			{ 
				if (this.theStartingSet != null)
					return this.theStartingSet;

				switch(this.rootStartingSet.Count)
				{
					case 0: throw new InvalidOperationException("Unable to find StartingSet document. Please create StartingSet document before using this property.");
					case 1: return this.theStartingSet = this.rootStartingSet[0];
					default: throw new InvalidOperationException("There is a multiple variants of StartingSet document. Please remove the excess before using this property.");
				}
			}
		}
		#endregion

		public IEnumerable<Document> GetAllDocuments()
		{
			foreach (var entry in this.allParameter) yield return entry;
			foreach (var entry in this.allParameterValue) yield return entry;
			foreach (var entry in this.allProvision) yield return entry;
			foreach (var entry in this.allHero) yield return entry;
			foreach (var entry in this.allItem) yield return entry;
			foreach (var entry in this.allLocation) yield return entry;
			foreach (var entry in this.allTrinket) yield return entry;
			foreach (var entry in this.allMonster) yield return entry;
			foreach (var entry in this.allLoot) yield return entry;
			foreach (var entry in this.allCombatEffect) yield return entry;
			foreach (var entry in this.allCurioCleansingOption) yield return entry;
			foreach (var entry in this.allCurio) yield return entry;
			foreach (var entry in this.allDisease) yield return entry;
			foreach (var entry in this.allQuirk) yield return entry;
			foreach (var entry in this.allConditions) yield return entry;
			foreach (var entry in this.allWeapon) yield return entry;
			foreach (var entry in this.allArmor) yield return entry;
			foreach (var entry in this.allItemWithCount) yield return entry;
			foreach (var entry in this.allStartingSet) yield return entry;

			yield break;
		}

		public void SetLanguage(string language)
		{
			if (language == null) throw new ArgumentNullException("language");

			foreach(var entry in this.allParameter)
				entry.SetLanguage(language);
			foreach(var entry in this.allParameterValue)
				entry.SetLanguage(language);
			foreach(var entry in this.allProvision)
				entry.SetLanguage(language);
			foreach(var entry in this.allHero)
				entry.SetLanguage(language);
			foreach(var entry in this.allItem)
				entry.SetLanguage(language);
			foreach(var entry in this.allLocation)
				entry.SetLanguage(language);
			foreach(var entry in this.allTrinket)
				entry.SetLanguage(language);
			foreach(var entry in this.allMonster)
				entry.SetLanguage(language);
			foreach(var entry in this.allLoot)
				entry.SetLanguage(language);
			foreach(var entry in this.allCombatEffect)
				entry.SetLanguage(language);
			foreach(var entry in this.allCurioCleansingOption)
				entry.SetLanguage(language);
			foreach(var entry in this.allCurio)
				entry.SetLanguage(language);
			foreach(var entry in this.allDisease)
				entry.SetLanguage(language);
			foreach(var entry in this.allQuirk)
				entry.SetLanguage(language);
			foreach(var entry in this.allConditions)
				entry.SetLanguage(language);
			foreach(var entry in this.allWeapon)
				entry.SetLanguage(language);
			foreach(var entry in this.allArmor)
				entry.SetLanguage(language);
			foreach(var entry in this.allItemWithCount)
				entry.SetLanguage(language);
			foreach(var entry in this.allStartingSet)
				entry.SetLanguage(language);
		}

		private Document Resolve(string entityId, object id)
		{
			if (entityId == null) throw new ArgumentNullException("entityId");

#pragma warning disable 1522 // Empty switch block
			switch (entityId)
			{
				case "Parameter":
				case "59f5b0a730bb84165c06b547": return this.GetParameter((ParameterId)(id is ParameterId ? id : ChangeType(id, typeof(ParameterId), System.Globalization.CultureInfo.InvariantCulture)));
				case "ParameterValue":
				case "59f5b11030bb84165c06b54e": return this.GetParameterValue((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));
				case "Provision":
				case "59f5b1c830bb84165c06b556": return this.GetProvision((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));
				case "Hero":
				case "59f5b29330bb84165c06b55c": return this.GetHero((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));
				case "Item":
				case "59f5b3f130bb84165c06b56b": return this.GetItem((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));
				case "Location":
				case "59f5b57530bb84165c06b579": return this.GetLocation((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));
				case "Trinket":
				case "59f5b61630bb84165c06b57f": return this.GetTrinket((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));
				case "Monster":
				case "59f5b7f330bb84165c06b58a": return this.GetMonster((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));
				case "Loot":
				case "59f5b9dd30bb84165c06b59a": return this.GetLoot((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));
				case "CombatEffect":
				case "59f5baaa30bb84165c06b5a0": return this.GetCombatEffect((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));
				case "CurioCleansingOption":
				case "59f5bac130bb84165c06b5a4": return this.GetCurioCleansingOption((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));
				case "Curio":
				case "59f5bbc230bb84165c06b5ae": return this.GetCurio((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));
				case "Disease":
				case "59f5d3a7983a361970003662": return this.GetDisease((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));
				case "Quirk":
				case "59f5d728983a361970003684": return this.GetQuirk((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));
				case "Conditions":
				case "59f5dedf983a361970003697": return this.GetConditions((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));
				case "Weapon":
				case "59f9e745983a364298db5e22": return this.GetWeapon((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));
				case "Armor":
				case "59f9e7b6983a364298db5e2c": return this.GetArmor((String)(id is String ? id : ChangeType(id, typeof(String), System.Globalization.CultureInfo.InvariantCulture)));
				case "ItemWithCount":
				case "5a1d78d107ff9a7b889cba7d": return this.GetItemWithCount((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));
				case "StartingSet":
				case "5a1d78de07ff9a7b889cba83": return this.GetStartingSet((Int32)(id is Int32 ? id : ChangeType(id, typeof(Int32), System.Globalization.CultureInfo.InvariantCulture)));
			}
#pragma warning restore 1522
			throw new System.ArgumentException(string.Format("Unable find Entity with id '{0}'.", entityId) ,"entityId");
		}

		private static void ThrowIfNull<T>(T value, string paramName)
		{
			if (value == null) throw new ArgumentNullException(paramName);
		}

		private static object ChangeType(object value, Type toType, IFormatProvider format)
		{
			if (toType.IsEnum && Enum.GetUnderlyingType(toType) == typeof(ulong))
				return Enum.ToObject(toType, Convert.ToUInt64(value, format));
			if (toType.IsEnum)
				return Enum.ToObject(toType, Convert.ToInt64(value, format));
			else
				return System.Convert.ChangeType(value, toType, format);
		}

		#region Visitors
		public void ApplyVisitor(Visitor visitor)
		{
			foreach(var document in this.rootParameter)
				visitor.Visit(document);
			foreach(var document in this.rootParameterValue)
				visitor.Visit(document);
			foreach(var document in this.rootProvision)
				visitor.Visit(document);
			foreach(var document in this.rootHero)
				visitor.Visit(document);
			foreach(var document in this.rootItem)
				visitor.Visit(document);
			foreach(var document in this.rootLocation)
				visitor.Visit(document);
			foreach(var document in this.rootTrinket)
				visitor.Visit(document);
			foreach(var document in this.rootMonster)
				visitor.Visit(document);
			foreach(var document in this.rootLoot)
				visitor.Visit(document);
			foreach(var document in this.rootCombatEffect)
				visitor.Visit(document);
			foreach(var document in this.rootCurioCleansingOption)
				visitor.Visit(document);
			foreach(var document in this.rootCurio)
				visitor.Visit(document);
			foreach(var document in this.rootDisease)
				visitor.Visit(document);
			foreach(var document in this.rootQuirk)
				visitor.Visit(document);
			foreach(var document in this.rootConditions)
				visitor.Visit(document);
			foreach(var document in this.rootWeapon)
				visitor.Visit(document);
			foreach(var document in this.rootArmor)
				visitor.Visit(document);
			foreach(var document in this.rootItemWithCount)
				visitor.Visit(document);
			foreach(var document in this.rootStartingSet)
				visitor.Visit(document);
		}

		private void FlattenStructure()
		{
			var flatteningStructureVisitor = new FlatteningStructureVisitor();
			this.ApplyVisitor(flatteningStructureVisitor);

			if (flatteningStructureVisitor.AllParameter != null)
			{
				var list = flatteningStructureVisitor.AllParameter;
				list.Sort();
				this.allParameter = new ReadOnlyList<Parameter>(list);
			}
			if (flatteningStructureVisitor.AllParameterValue != null)
			{
				var list = flatteningStructureVisitor.AllParameterValue;
				list.Sort();
				this.allParameterValue = new ReadOnlyList<ParameterValue>(list);
			}
			if (flatteningStructureVisitor.AllProvision != null)
			{
				var list = flatteningStructureVisitor.AllProvision;
				list.Sort();
				this.allProvision = new ReadOnlyList<Provision>(list);
			}
			if (flatteningStructureVisitor.AllHero != null)
			{
				var list = flatteningStructureVisitor.AllHero;
				list.Sort();
				this.allHero = new ReadOnlyList<Hero>(list);
			}
			if (flatteningStructureVisitor.AllItem != null)
			{
				var list = flatteningStructureVisitor.AllItem;
				list.Sort();
				this.allItem = new ReadOnlyList<Item>(list);
			}
			if (flatteningStructureVisitor.AllLocation != null)
			{
				var list = flatteningStructureVisitor.AllLocation;
				list.Sort();
				this.allLocation = new ReadOnlyList<Location>(list);
			}
			if (flatteningStructureVisitor.AllTrinket != null)
			{
				var list = flatteningStructureVisitor.AllTrinket;
				list.Sort();
				this.allTrinket = new ReadOnlyList<Trinket>(list);
			}
			if (flatteningStructureVisitor.AllMonster != null)
			{
				var list = flatteningStructureVisitor.AllMonster;
				list.Sort();
				this.allMonster = new ReadOnlyList<Monster>(list);
			}
			if (flatteningStructureVisitor.AllLoot != null)
			{
				var list = flatteningStructureVisitor.AllLoot;
				list.Sort();
				this.allLoot = new ReadOnlyList<Loot>(list);
			}
			if (flatteningStructureVisitor.AllCombatEffect != null)
			{
				var list = flatteningStructureVisitor.AllCombatEffect;
				list.Sort();
				this.allCombatEffect = new ReadOnlyList<CombatEffect>(list);
			}
			if (flatteningStructureVisitor.AllCurioCleansingOption != null)
			{
				var list = flatteningStructureVisitor.AllCurioCleansingOption;
				list.Sort();
				this.allCurioCleansingOption = new ReadOnlyList<CurioCleansingOption>(list);
			}
			if (flatteningStructureVisitor.AllCurio != null)
			{
				var list = flatteningStructureVisitor.AllCurio;
				list.Sort();
				this.allCurio = new ReadOnlyList<Curio>(list);
			}
			if (flatteningStructureVisitor.AllDisease != null)
			{
				var list = flatteningStructureVisitor.AllDisease;
				list.Sort();
				this.allDisease = new ReadOnlyList<Disease>(list);
			}
			if (flatteningStructureVisitor.AllQuirk != null)
			{
				var list = flatteningStructureVisitor.AllQuirk;
				list.Sort();
				this.allQuirk = new ReadOnlyList<Quirk>(list);
			}
			if (flatteningStructureVisitor.AllConditions != null)
			{
				var list = flatteningStructureVisitor.AllConditions;
				list.Sort();
				this.allConditions = new ReadOnlyList<Conditions>(list);
			}
			if (flatteningStructureVisitor.AllWeapon != null)
			{
				var list = flatteningStructureVisitor.AllWeapon;
				list.Sort();
				this.allWeapon = new ReadOnlyList<Weapon>(list);
			}
			if (flatteningStructureVisitor.AllArmor != null)
			{
				var list = flatteningStructureVisitor.AllArmor;
				list.Sort();
				this.allArmor = new ReadOnlyList<Armor>(list);
			}
			if (flatteningStructureVisitor.AllItemWithCount != null)
			{
				var list = flatteningStructureVisitor.AllItemWithCount;
				list.Sort();
				this.allItemWithCount = new ReadOnlyList<ItemWithCount>(list);
			}
			if (flatteningStructureVisitor.AllStartingSet != null)
			{
				var list = flatteningStructureVisitor.AllStartingSet;
				list.Sort();
				this.allStartingSet = new ReadOnlyList<StartingSet>(list);
			}
		}

		public class Visitor
		{
			public virtual void Visit(Parameter value)
			{
				if (value == null) 
				{
					return;
				}

			}
			public virtual void Visit(ParameterValue value)
			{
				if (value == null) 
				{
					return;
				}

			}
			public virtual void Visit(Provision value)
			{
				if (value == null) 
				{
					return;
				}

				if (value.Item != null)
				{
					this.Visit(value.Item);
				}
			}
			public virtual void Visit(Hero value)
			{
				if (value == null) 
				{
					return;
				}

				if (value.Armors != null && value.Armors.Count > 0)
				{
					foreach(var item in value.Armors)
					{
						this.Visit(item);
					}
				}
				if (value.Weapons != null && value.Weapons.Count > 0)
				{
					foreach(var item in value.Weapons)
					{
						this.Visit(item);
					}
				}
			}
			public virtual void Visit(Item value)
			{
				if (value == null) 
				{
					return;
				}

				if (value.ActivationEffects != null && value.ActivationEffects.Count > 0)
				{
					foreach(var item in value.ActivationEffects)
					{
						this.Visit(item);
					}
				}
			}
			public virtual void Visit(Location value)
			{
				if (value == null) 
				{
					return;
				}

			}
			public virtual void Visit(Trinket value)
			{
				if (value == null) 
				{
					return;
				}

				if (value.Item != null)
				{
					this.Visit(value.Item);
				}
				if (value.Effects != null && value.Effects.Count > 0)
				{
					foreach(var item in value.Effects)
					{
						this.Visit(item);
					}
				}
			}
			public virtual void Visit(Monster value)
			{
				if (value == null) 
				{
					return;
				}

				if (value.Parameters != null && value.Parameters.Count > 0)
				{
					foreach(var item in value.Parameters)
					{
						this.Visit(item);
					}
				}
			}
			public virtual void Visit(Loot value)
			{
				if (value == null) 
				{
					return;
				}

			}
			public virtual void Visit(CombatEffect value)
			{
				if (value == null) 
				{
					return;
				}

				if (value.Changes != null && value.Changes.Count > 0)
				{
					foreach(var item in value.Changes)
					{
						this.Visit(item);
					}
				}
			}
			public virtual void Visit(CurioCleansingOption value)
			{
				if (value == null) 
				{
					return;
				}

				if (value.Loot != null && value.Loot.Count > 0)
				{
					foreach(var item in value.Loot)
					{
						this.Visit(item);
					}
				}
				if (value.Effects != null && value.Effects.Count > 0)
				{
					foreach(var item in value.Effects)
					{
						this.Visit(item);
					}
				}
			}
			public virtual void Visit(Curio value)
			{
				if (value == null) 
				{
					return;
				}

				if (value.CleansingOptions != null && value.CleansingOptions.Count > 0)
				{
					foreach(var item in value.CleansingOptions)
					{
						this.Visit(item);
					}
				}
			}
			public virtual void Visit(Disease value)
			{
				if (value == null) 
				{
					return;
				}

				if (value.Effects != null && value.Effects.Count > 0)
				{
					foreach(var item in value.Effects)
					{
						this.Visit(item);
					}
				}
			}
			public virtual void Visit(Quirk value)
			{
				if (value == null) 
				{
					return;
				}

				if (value.Effects != null && value.Effects.Count > 0)
				{
					foreach(var item in value.Effects)
					{
						this.Visit(item);
					}
				}
			}
			public virtual void Visit(Conditions value)
			{
				if (value == null) 
				{
					return;
				}

			}
			public virtual void Visit(Weapon value)
			{
				if (value == null) 
				{
					return;
				}

			}
			public virtual void Visit(Armor value)
			{
				if (value == null) 
				{
					return;
				}

			}
			public virtual void Visit(ItemWithCount value)
			{
				if (value == null) 
				{
					return;
				}

			}
			public virtual void Visit(StartingSet value)
			{
				if (value == null) 
				{
					return;
				}

				if (value.Items != null && value.Items.Count > 0)
				{
					foreach(var item in value.Items)
					{
						this.Visit(item);
					}
				}
			}
		}

		private class FlatteningStructureVisitor : Visitor
		{
			public List<Parameter> AllParameter;
			public List<ParameterValue> AllParameterValue;
			public List<Provision> AllProvision;
			public List<Hero> AllHero;
			public List<Item> AllItem;
			public List<Location> AllLocation;
			public List<Trinket> AllTrinket;
			public List<Monster> AllMonster;
			public List<Loot> AllLoot;
			public List<CombatEffect> AllCombatEffect;
			public List<CurioCleansingOption> AllCurioCleansingOption;
			public List<Curio> AllCurio;
			public List<Disease> AllDisease;
			public List<Quirk> AllQuirk;
			public List<Conditions> AllConditions;
			public List<Weapon> AllWeapon;
			public List<Armor> AllArmor;
			public List<ItemWithCount> AllItemWithCount;
			public List<StartingSet> AllStartingSet;
		
			public override void Visit(Parameter value) 
			{ 
				if (this.AllParameter == null)
					this.AllParameter = new List<Parameter>();

				this.AllParameter.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(ParameterValue value) 
			{ 
				if (this.AllParameterValue == null)
					this.AllParameterValue = new List<ParameterValue>();

				this.AllParameterValue.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(Provision value) 
			{ 
				if (this.AllProvision == null)
					this.AllProvision = new List<Provision>();

				this.AllProvision.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(Hero value) 
			{ 
				if (this.AllHero == null)
					this.AllHero = new List<Hero>();

				this.AllHero.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(Item value) 
			{ 
				if (this.AllItem == null)
					this.AllItem = new List<Item>();

				this.AllItem.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(Location value) 
			{ 
				if (this.AllLocation == null)
					this.AllLocation = new List<Location>();

				this.AllLocation.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(Trinket value) 
			{ 
				if (this.AllTrinket == null)
					this.AllTrinket = new List<Trinket>();

				this.AllTrinket.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(Monster value) 
			{ 
				if (this.AllMonster == null)
					this.AllMonster = new List<Monster>();

				this.AllMonster.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(Loot value) 
			{ 
				if (this.AllLoot == null)
					this.AllLoot = new List<Loot>();

				this.AllLoot.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(CombatEffect value) 
			{ 
				if (this.AllCombatEffect == null)
					this.AllCombatEffect = new List<CombatEffect>();

				this.AllCombatEffect.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(CurioCleansingOption value) 
			{ 
				if (this.AllCurioCleansingOption == null)
					this.AllCurioCleansingOption = new List<CurioCleansingOption>();

				this.AllCurioCleansingOption.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(Curio value) 
			{ 
				if (this.AllCurio == null)
					this.AllCurio = new List<Curio>();

				this.AllCurio.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(Disease value) 
			{ 
				if (this.AllDisease == null)
					this.AllDisease = new List<Disease>();

				this.AllDisease.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(Quirk value) 
			{ 
				if (this.AllQuirk == null)
					this.AllQuirk = new List<Quirk>();

				this.AllQuirk.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(Conditions value) 
			{ 
				if (this.AllConditions == null)
					this.AllConditions = new List<Conditions>();

				this.AllConditions.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(Weapon value) 
			{ 
				if (this.AllWeapon == null)
					this.AllWeapon = new List<Weapon>();

				this.AllWeapon.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(Armor value) 
			{ 
				if (this.AllArmor == null)
					this.AllArmor = new List<Armor>();

				this.AllArmor.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(ItemWithCount value) 
			{ 
				if (this.AllItemWithCount == null)
					this.AllItemWithCount = new List<ItemWithCount>();

				this.AllItemWithCount.Add(value); 
				base.Visit(value); 
			}
			public override void Visit(StartingSet value) 
			{ 
				if (this.AllStartingSet == null)
					this.AllStartingSet = new List<StartingSet>();

				this.AllStartingSet.Add(value); 
				base.Visit(value); 
			}
		}
		#endregion

		#region Serialization
		#region Serialization: Common Types
		private static readonly IFormatProvider FormatProvider = System.Globalization.CultureInfo.InvariantCulture;
		private const string DateTimeFormat = "o";

		public enum Format
		{
			Json,
			Bson,
			Xml,
			MessagePack
		}

		private abstract class Reader
		{
			public abstract ReaderNode Node { get; }

			public abstract int LineNumber { get; }
			public abstract int ColumnNumber { get; }

			public abstract bool NextToken();

			public void ReadGameData(RpgGameData gameData)
			{
				var rootParameter = default(List<Parameter>);
				var rootParameterValue = default(List<ParameterValue>);
				var rootProvision = default(List<Provision>);
				var rootHero = default(List<Hero>);
				var rootItem = default(List<Item>);
				var rootLocation = default(List<Location>);
				var rootTrinket = default(List<Trinket>);
				var rootMonster = default(List<Monster>);
				var rootLoot = default(List<Loot>);
				var rootCombatEffect = default(List<CombatEffect>);
				var rootCurioCleansingOption = default(List<CurioCleansingOption>);
				var rootCurio = default(List<Curio>);
				var rootDisease = default(List<Disease>);
				var rootQuirk = default(List<Quirk>);
				var rootConditions = default(List<Conditions>);
				var rootWeapon = default(List<Weapon>);
				var rootArmor = default(List<Armor>);
				var rootItemWithCount = default(List<ItemWithCount>);
				var rootStartingSet = default(List<StartingSet>);

				this.ReadObjectBegin();
				while(this.Node.Token != ReaderToken.EndOfObject)
				{
					var memberName = this.ReadMember();
					switch(memberName)
					{
						case "Collections":
							this.ReadObjectBegin();
							while(this.Node.Token != ReaderToken.EndOfObject)
							{
								var collectionName = this.ReadMember();
								switch (collectionName.Length)
								{
									case 4:
										switch(collectionName)
										{
											case "Hero":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadHero();

													if (rootHero == null)
														rootHero = new List<Hero>();

													rootHero.Add(entry);
												}
												if (rootHero != null)
													gameData.rootHero = new ReadOnlyList<Hero>(rootHero);
												else
													gameData.rootHero = ReadOnlyList<Hero>.Empty;

												this.ReadArrayEnd();
												break;
											}
											case "Item":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadItem();

													if (rootItem == null)
														rootItem = new List<Item>();

													rootItem.Add(entry);
												}
												if (rootItem != null)
													gameData.rootItem = new ReadOnlyList<Item>(rootItem);
												else
													gameData.rootItem = ReadOnlyList<Item>.Empty;

												this.ReadArrayEnd();
												break;
											}
											case "Loot":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadLoot();

													if (rootLoot == null)
														rootLoot = new List<Loot>();

													rootLoot.Add(entry);
												}
												if (rootLoot != null)
													gameData.rootLoot = new ReadOnlyList<Loot>(rootLoot);
												else
													gameData.rootLoot = ReadOnlyList<Loot>.Empty;

												this.ReadArrayEnd();
												break;
											}
											default:
												this.ReadAny();
												break;
										}
										break;
									case 5:
										switch(collectionName)
										{
											case "Curio":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadCurio();

													if (rootCurio == null)
														rootCurio = new List<Curio>();

													rootCurio.Add(entry);
												}
												if (rootCurio != null)
													gameData.rootCurio = new ReadOnlyList<Curio>(rootCurio);
												else
													gameData.rootCurio = ReadOnlyList<Curio>.Empty;

												this.ReadArrayEnd();
												break;
											}
											case "Quirk":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadQuirk();

													if (rootQuirk == null)
														rootQuirk = new List<Quirk>();

													rootQuirk.Add(entry);
												}
												if (rootQuirk != null)
													gameData.rootQuirk = new ReadOnlyList<Quirk>(rootQuirk);
												else
													gameData.rootQuirk = ReadOnlyList<Quirk>.Empty;

												this.ReadArrayEnd();
												break;
											}
											case "Armor":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadArmor();

													if (rootArmor == null)
														rootArmor = new List<Armor>();

													rootArmor.Add(entry);
												}
												if (rootArmor != null)
													gameData.rootArmor = new ReadOnlyList<Armor>(rootArmor);
												else
													gameData.rootArmor = ReadOnlyList<Armor>.Empty;

												this.ReadArrayEnd();
												break;
											}
											default:
												this.ReadAny();
												break;
										}
										break;
									case 6:
										switch(collectionName)
										{
											case "Weapon":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadWeapon();

													if (rootWeapon == null)
														rootWeapon = new List<Weapon>();

													rootWeapon.Add(entry);
												}
												if (rootWeapon != null)
													gameData.rootWeapon = new ReadOnlyList<Weapon>(rootWeapon);
												else
													gameData.rootWeapon = ReadOnlyList<Weapon>.Empty;

												this.ReadArrayEnd();
												break;
											}
											default:
												this.ReadAny();
												break;
										}
										break;
									case 7:
										switch(collectionName)
										{
											case "Trinket":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadTrinket();

													if (rootTrinket == null)
														rootTrinket = new List<Trinket>();

													rootTrinket.Add(entry);
												}
												if (rootTrinket != null)
													gameData.rootTrinket = new ReadOnlyList<Trinket>(rootTrinket);
												else
													gameData.rootTrinket = ReadOnlyList<Trinket>.Empty;

												this.ReadArrayEnd();
												break;
											}
											case "Monster":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadMonster();

													if (rootMonster == null)
														rootMonster = new List<Monster>();

													rootMonster.Add(entry);
												}
												if (rootMonster != null)
													gameData.rootMonster = new ReadOnlyList<Monster>(rootMonster);
												else
													gameData.rootMonster = ReadOnlyList<Monster>.Empty;

												this.ReadArrayEnd();
												break;
											}
											case "Disease":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadDisease();

													if (rootDisease == null)
														rootDisease = new List<Disease>();

													rootDisease.Add(entry);
												}
												if (rootDisease != null)
													gameData.rootDisease = new ReadOnlyList<Disease>(rootDisease);
												else
													gameData.rootDisease = ReadOnlyList<Disease>.Empty;

												this.ReadArrayEnd();
												break;
											}
											default:
												this.ReadAny();
												break;
										}
										break;
									case 8:
										switch(collectionName)
										{
											case "Location":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadLocation();

													if (rootLocation == null)
														rootLocation = new List<Location>();

													rootLocation.Add(entry);
												}
												if (rootLocation != null)
													gameData.rootLocation = new ReadOnlyList<Location>(rootLocation);
												else
													gameData.rootLocation = ReadOnlyList<Location>.Empty;

												this.ReadArrayEnd();
												break;
											}
											default:
												this.ReadAny();
												break;
										}
										break;
									case 9:
										switch(collectionName)
										{
											case "Parameter":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadParameter();

													if (rootParameter == null)
														rootParameter = new List<Parameter>();

													rootParameter.Add(entry);
												}
												if (rootParameter != null)
													gameData.rootParameter = new ReadOnlyList<Parameter>(rootParameter);
												else
													gameData.rootParameter = ReadOnlyList<Parameter>.Empty;

												this.ReadArrayEnd();
												break;
											}
											case "Provision":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadProvision();

													if (rootProvision == null)
														rootProvision = new List<Provision>();

													rootProvision.Add(entry);
												}
												if (rootProvision != null)
													gameData.rootProvision = new ReadOnlyList<Provision>(rootProvision);
												else
													gameData.rootProvision = ReadOnlyList<Provision>.Empty;

												this.ReadArrayEnd();
												break;
											}
											default:
												this.ReadAny();
												break;
										}
										break;
									case 10:
										switch(collectionName)
										{
											case "Conditions":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadConditions();

													if (rootConditions == null)
														rootConditions = new List<Conditions>();

													rootConditions.Add(entry);
												}
												if (rootConditions != null)
													gameData.rootConditions = new ReadOnlyList<Conditions>(rootConditions);
												else
													gameData.rootConditions = ReadOnlyList<Conditions>.Empty;

												this.ReadArrayEnd();
												break;
											}
											default:
												this.ReadAny();
												break;
										}
										break;
									case 11:
										switch(collectionName)
										{
											case "StartingSet":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadStartingSet();

													if (rootStartingSet == null)
														rootStartingSet = new List<StartingSet>();

													rootStartingSet.Add(entry);
												}
												if (rootStartingSet != null)
													gameData.rootStartingSet = new ReadOnlyList<StartingSet>(rootStartingSet);
												else
													gameData.rootStartingSet = ReadOnlyList<StartingSet>.Empty;

												this.ReadArrayEnd();
												break;
											}
											default:
												this.ReadAny();
												break;
										}
										break;
									case 12:
										switch(collectionName)
										{
											case "CombatEffect":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadCombatEffect();

													if (rootCombatEffect == null)
														rootCombatEffect = new List<CombatEffect>();

													rootCombatEffect.Add(entry);
												}
												if (rootCombatEffect != null)
													gameData.rootCombatEffect = new ReadOnlyList<CombatEffect>(rootCombatEffect);
												else
													gameData.rootCombatEffect = ReadOnlyList<CombatEffect>.Empty;

												this.ReadArrayEnd();
												break;
											}
											default:
												this.ReadAny();
												break;
										}
										break;
									case 13:
										switch(collectionName)
										{
											case "ItemWithCount":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadItemWithCount();

													if (rootItemWithCount == null)
														rootItemWithCount = new List<ItemWithCount>();

													rootItemWithCount.Add(entry);
												}
												if (rootItemWithCount != null)
													gameData.rootItemWithCount = new ReadOnlyList<ItemWithCount>(rootItemWithCount);
												else
													gameData.rootItemWithCount = ReadOnlyList<ItemWithCount>.Empty;

												this.ReadArrayEnd();
												break;
											}
											default:
												this.ReadAny();
												break;
										}
										break;
									case 14:
										switch(collectionName)
										{
											case "ParameterValue":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadParameterValue();

													if (rootParameterValue == null)
														rootParameterValue = new List<ParameterValue>();

													rootParameterValue.Add(entry);
												}
												if (rootParameterValue != null)
													gameData.rootParameterValue = new ReadOnlyList<ParameterValue>(rootParameterValue);
												else
													gameData.rootParameterValue = ReadOnlyList<ParameterValue>.Empty;

												this.ReadArrayEnd();
												break;
											}
											default:
												this.ReadAny();
												break;
										}
										break;
									case 20:
										switch(collectionName)
										{
											case "CurioCleansingOption":
											{
												if (this.Node.Token == ReaderToken.Null)
												{
													this.NextToken();
													break;
												}
												this.ReadArrayBegin();
												while(this.Node.Token != ReaderToken.EndOfArray)
												{
													var entry = this.ReadCurioCleansingOption();

													if (rootCurioCleansingOption == null)
														rootCurioCleansingOption = new List<CurioCleansingOption>();

													rootCurioCleansingOption.Add(entry);
												}
												if (rootCurioCleansingOption != null)
													gameData.rootCurioCleansingOption = new ReadOnlyList<CurioCleansingOption>(rootCurioCleansingOption);
												else
													gameData.rootCurioCleansingOption = ReadOnlyList<CurioCleansingOption>.Empty;

												this.ReadArrayEnd();
												break;
											}
											default:
												this.ReadAny();
												break;
										}
										break;
									default:
										this.ReadAny();
										break;
								}
							}
							this.ReadObjectEnd();
							return;
						default:
							this.ReadAny();
							break;
					}
				}

				this.ReadObjectEnd();
			}
			private Parameter ReadParameter()
			{
				var entry = new Parameter();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'PickList' for required attribute 'Id' in entity 'Parameter'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (ParameterId) this.Node.AsInt32;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 8:
						{
							switch (attributeName)
							{
								case "MinValue":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.MinValue = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								case "MaxValue":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.MaxValue = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 9:
						{
							switch (attributeName)
							{
								case "ValueKind":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'PickList' for required attribute 'ValueKind' in entity 'Parameter'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.ValueKind = (ParameterValueKind) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 17:
						{
							switch (attributeName)
							{
								case "MinValueParameter":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry.MinValueParameter_Reference = this.ReadReference<Parameter>();

									break;
								}
								case "MaxValueParameter":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry.MaxValueParameter_Reference = this.ReadReference<Parameter>();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private ParameterValue ReadParameterValue()
			{
				var entry = new ParameterValue();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'ParameterValue'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 5:
						{
							switch (attributeName)
							{
								case "Value":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'Value' in entity 'ParameterValue'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Value = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 9:
						{
							switch (attributeName)
							{
								case "Parameter":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Reference' for required attribute 'Parameter' in entity 'ParameterValue'.");
									}
									entry.Parameter_Reference = this.ReadReference<Parameter>();

									break;
								}
								case "Condition":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry.Condition_Reference = this.ReadReference<Conditions>();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Provision ReadProvision()
			{
				var entry = new Provision();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'Provision'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (String) this.Node.AsString;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Cost":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Cost' in entity 'Provision'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Cost = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								case "Item":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Document' for required attribute 'Item' in entity 'Provision'.");
									}
									entry.Item = this.ReadItem();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Hero ReadHero()
			{
				var entry = new Hero();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (String) this.Node.AsString;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 3:
						{
							switch (attributeName)
							{
								case "Bio":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Bio' in entity 'Hero'.");
									}
									entry.Bio_ByLanguage = this.ReadLocalizedString();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Name":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Name' in entity 'Hero'.");
									}
									entry.Name_ByLanguage = this.ReadLocalizedString();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 6:
						{
							switch (attributeName)
							{
								case "Armors":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'DocumentList' for required attribute 'Armors' in entity 'Hero'.");
									}
									var list = new List<Armor>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'Armor' in 'Armors' attribute in entity 'Hero'.");
										}

										var value = this.ReadArmor();
										list.Add(value);
									}
									entry.Armors = new ReadOnlyList<Armor>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 7:
						{
							switch (attributeName)
							{
								case "Weapons":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'DocumentList' for required attribute 'Weapons' in entity 'Hero'.");
									}
									var list = new List<Weapon>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'Weapon' in 'Weapons' attribute in entity 'Hero'.");
										}

										var value = this.ReadWeapon();
										list.Add(value);
									}
									entry.Weapons = new ReadOnlyList<Weapon>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 9:
						{
							switch (attributeName)
							{
								case "Religious":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Logical' for required attribute 'Religious' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Religious = (Boolean) this.Node.AsBoolean;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 10:
						{
							switch (attributeName)
							{
								case "Provisions":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry.Provisions_Reference = this.ReadReference<Provision>();

									break;
								}
								case "Protection":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Protection' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Protection = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 13:
						{
							switch (attributeName)
							{
								case "DislikeHeroes":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									var list = new List<Reference<Hero>>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of reference to 'Reference<Hero>' in 'DislikeHeroes' attribute in entity 'Hero'.");
										}

										var value = this.ReadReference<Hero>();
										list.Add(value);
									}
									entry.DislikeHeroes_Reference = new ReadOnlyList<Reference<Hero>>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 14:
						{
							switch (attributeName)
							{
								case "StunResistance":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'StunResistance' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.StunResistance = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								case "MoveResistance":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'MoveResistance' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.MoveResistance = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								case "TrapResistance":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'TrapResistance' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.TrapResistance = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 15:
						{
							switch (attributeName)
							{
								case "ProvisionsCount":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'ProvisionsCount' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.ProvisionsCount = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								case "MovementForward":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'MovementForward' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.MovementForward = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								case "BleedResistance":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'BleedResistance' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.BleedResistance = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 16:
						{
							switch (attributeName)
							{
								case "MovementBackward":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'MovementBackward' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.MovementBackward = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								case "AccuracyModifier":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'AccuracyModifier' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.AccuracyModifier = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								case "BlightResistance":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'BlightResistance' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.BlightResistance = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								case "DebuffResistance":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'DebuffResistance' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.DebuffResistance = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 17:
						{
							switch (attributeName)
							{
								case "DiseaseResistance":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'DiseaseResistance' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.DiseaseResistance = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 19:
						{
							switch (attributeName)
							{
								case "DeathBlowResistance":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'DeathBlowResistance' in entity 'Hero'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.DeathBlowResistance = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Item ReadItem()
			{
				var entry = new Item();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'Item'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (String) this.Node.AsString;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Name":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Name' in entity 'Item'.");
									}
									entry.Name_ByLanguage = this.ReadLocalizedString();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 9:
						{
							switch (attributeName)
							{
								case "StackSize":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'StackSize' in entity 'Item'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.StackSize = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								case "GoldValue":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'GoldValue' in entity 'Item'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.GoldValue = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 11:
						{
							switch (attributeName)
							{
								case "Description":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry.Description_ByLanguage = this.ReadLocalizedString();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 17:
						{
							switch (attributeName)
							{
								case "ActivationEffects":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									var list = new List<ParameterValue>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'ParameterValue' in 'ActivationEffects' attribute in entity 'Item'.");
										}

										var value = this.ReadParameterValue();
										list.Add(value);
									}
									entry.ActivationEffects = new ReadOnlyList<ParameterValue>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Location ReadLocation()
			{
				var entry = new Location();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'Location'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (String) this.Node.AsString;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Name":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Name' in entity 'Location'.");
									}
									entry.Name_ByLanguage = this.ReadLocalizedString();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 5:
						{
							switch (attributeName)
							{
								case "Flags":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Flags = (LocationFlags) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Trinket ReadTrinket()
			{
				var entry = new Trinket();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'Trinket'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (String) this.Node.AsString;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Item":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Document' for required attribute 'Item' in entity 'Trinket'.");
									}
									entry.Item = this.ReadItem();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 6:
						{
							switch (attributeName)
							{
								case "Rarity":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'PickList' for required attribute 'Rarity' in entity 'Trinket'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Rarity = (TrinketRarity) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 7:
						{
							switch (attributeName)
							{
								case "Effects":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'DocumentList' for required attribute 'Effects' in entity 'Trinket'.");
									}
									var list = new List<ParameterValue>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'ParameterValue' in 'Effects' attribute in entity 'Trinket'.");
										}

										var value = this.ReadParameterValue();
										list.Add(value);
									}
									entry.Effects = new ReadOnlyList<ParameterValue>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 13:
						{
							switch (attributeName)
							{
								case "OriginDungeon":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry.OriginDungeon_Reference = this.ReadReference<Location>();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 15:
						{
							switch (attributeName)
							{
								case "HeroRestriction":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry.HeroRestriction_Reference = this.ReadReference<Hero>();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Monster ReadMonster()
			{
				var entry = new Monster();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'Monster'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (String) this.Node.AsString;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Name":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Name' in entity 'Monster'.");
									}
									entry.Name_ByLanguage = this.ReadLocalizedString();

									break;
								}
								case "Type":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'PickList' for required attribute 'Type' in entity 'Monster'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Type = (MonsterType) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 9:
						{
							switch (attributeName)
							{
								case "Locations":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'ReferenceList' for required attribute 'Locations' in entity 'Monster'.");
									}
									var list = new List<Reference<Location>>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of reference to 'Reference<Location>' in 'Locations' attribute in entity 'Monster'.");
										}

										var value = this.ReadReference<Location>();
										list.Add(value);
									}
									entry.Locations_Reference = new ReadOnlyList<Reference<Location>>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 10:
						{
							switch (attributeName)
							{
								case "SecondType":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.SecondType = (MonsterType) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								case "Parameters":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'DocumentList' for required attribute 'Parameters' in entity 'Monster'.");
									}
									var list = new List<ParameterValue>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'ParameterValue' in 'Parameters' attribute in entity 'Monster'.");
										}

										var value = this.ReadParameterValue();
										list.Add(value);
									}
									entry.Parameters = new ReadOnlyList<ParameterValue>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Loot ReadLoot()
			{
				var entry = new Loot();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'Loot'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Type":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'PickList' for required attribute 'Type' in entity 'Loot'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Type = (LootType) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 6:
						{
							switch (attributeName)
							{
								case "Amount":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Amount = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private CombatEffect ReadCombatEffect()
			{
				var entry = new CombatEffect();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'CombatEffect'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 7:
						{
							switch (attributeName)
							{
								case "Changes":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									var list = new List<ParameterValue>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'ParameterValue' in 'Changes' attribute in entity 'CombatEffect'.");
										}

										var value = this.ReadParameterValue();
										list.Add(value);
									}
									entry.Changes = new ReadOnlyList<ParameterValue>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 8:
						{
							switch (attributeName)
							{
								case "Duration":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Duration = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 12:
						{
							switch (attributeName)
							{
								case "DurationUnit":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'PickList' for required attribute 'DurationUnit' in entity 'CombatEffect'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.DurationUnit = (DurationUnit) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private CurioCleansingOption ReadCurioCleansingOption()
			{
				var entry = new CurioCleansingOption();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'CurioCleansingOption'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Item":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									entry.Item_Reference = this.ReadReference<Item>();

									break;
								}
								case "Loot":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									var list = new List<Loot>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'Loot' in 'Loot' attribute in entity 'CurioCleansingOption'.");
										}

										var value = this.ReadLoot();
										list.Add(value);
									}
									entry.Loot = new ReadOnlyList<Loot>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 6:
						{
							switch (attributeName)
							{
								case "Chance":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'Chance' in entity 'CurioCleansingOption'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Chance = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 7:
						{
							switch (attributeName)
							{
								case "Effects":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									var list = new List<ParameterValue>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'ParameterValue' in 'Effects' attribute in entity 'CurioCleansingOption'.");
										}

										var value = this.ReadParameterValue();
										list.Add(value);
									}
									entry.Effects = new ReadOnlyList<ParameterValue>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 11:
						{
							switch (attributeName)
							{
								case "QuirkChance":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.QuirkChance = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 13:
						{
							switch (attributeName)
							{
								case "DiseaseChance":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.DiseaseChance = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 14:
						{
							switch (attributeName)
							{
								case "ItemIsConsumed":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Logical' for required attribute 'ItemIsConsumed' in entity 'CurioCleansingOption'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.ItemIsConsumed = (Boolean) this.Node.AsBoolean;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Curio ReadCurio()
			{
				var entry = new Curio();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'Curio'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (String) this.Node.AsString;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Type":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Flags' for required attribute 'Type' in entity 'Curio'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Type = (CurioType) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								case "Name":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Name' in entity 'Curio'.");
									}
									entry.Name_ByLanguage = this.ReadLocalizedString();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 9:
						{
							switch (attributeName)
							{
								case "Locations":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'ReferenceList' for required attribute 'Locations' in entity 'Curio'.");
									}
									var list = new List<Reference<Location>>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of reference to 'Reference<Location>' in 'Locations' attribute in entity 'Curio'.");
										}

										var value = this.ReadReference<Location>();
										list.Add(value);
									}
									entry.Locations_Reference = new ReadOnlyList<Reference<Location>>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 11:
						{
							switch (attributeName)
							{
								case "Description":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Description' in entity 'Curio'.");
									}
									entry.Description_ByLanguage = this.ReadLocalizedString();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 16:
						{
							switch (attributeName)
							{
								case "CleansingOptions":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										this.NextToken();
										continue;
									}
									var list = new List<CurioCleansingOption>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'CurioCleansingOption' in 'CleansingOptions' attribute in entity 'Curio'.");
										}

										var value = this.ReadCurioCleansingOption();
										list.Add(value);
									}
									entry.CleansingOptions = new ReadOnlyList<CurioCleansingOption>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 20:
						{
							switch (attributeName)
							{
								case "PlacementRestictions":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Flags' for required attribute 'PlacementRestictions' in entity 'Curio'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.PlacementRestictions = (CurioPlacementRestictions) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Disease ReadDisease()
			{
				var entry = new Disease();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'Disease'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (String) this.Node.AsString;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Name":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Name' in entity 'Disease'.");
									}
									entry.Name_ByLanguage = this.ReadLocalizedString();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 7:
						{
							switch (attributeName)
							{
								case "Effects":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'DocumentList' for required attribute 'Effects' in entity 'Disease'.");
									}
									var list = new List<ParameterValue>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'ParameterValue' in 'Effects' attribute in entity 'Disease'.");
										}

										var value = this.ReadParameterValue();
										list.Add(value);
									}
									entry.Effects = new ReadOnlyList<ParameterValue>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Quirk ReadQuirk()
			{
				var entry = new Quirk();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'Quirk'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (String) this.Node.AsString;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Name":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Name' in entity 'Quirk'.");
									}
									entry.Name_ByLanguage = this.ReadLocalizedString();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 7:
						{
							switch (attributeName)
							{
								case "Effects":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'DocumentList' for required attribute 'Effects' in entity 'Quirk'.");
									}
									var list = new List<ParameterValue>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'ParameterValue' in 'Effects' attribute in entity 'Quirk'.");
										}

										var value = this.ReadParameterValue();
										list.Add(value);
									}
									entry.Effects = new ReadOnlyList<ParameterValue>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 10:
						{
							switch (attributeName)
							{
								case "IsPositive":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Logical' for required attribute 'IsPositive' in entity 'Quirk'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.IsPositive = (Boolean) this.Node.AsBoolean;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Conditions ReadConditions()
			{
				var entry = new Conditions();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'Conditions'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (String) this.Node.AsString;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 5:
						{
							switch (attributeName)
							{
								case "Check":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Formula' for required attribute 'Check' in entity 'Conditions'.");
									}
									var syntaxTree = default(SyntaxTreeNode);
									try
									{
										syntaxTree = new SyntaxTreeNode(this.ReadObject());
										entry.Check = new ConditionsCheckExpression(syntaxTree, entry);
									}
									catch (Exception e)
									{
										var expressionError = e;
										while (expressionError is System.Reflection.TargetInvocationException)
										{
											expressionError = e.InnerException;
										}

										var expressionText = "<none>";
										try
										{
											if(syntaxTree != null)
											{
												expressionText = syntaxTree.ToString();
											}
										}
										catch
										{
											expressionText = "<error>";
										}

										throw new InvalidOperationException(string.Format("An error occured while trying to create {0} Expression '{1}' for {2} with id '{3}':\r\n{4}", "Check", expressionText, "Conditions", id, expressionError.Message), expressionError);
									}

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 11:
						{
							switch (attributeName)
							{
								case "Description":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Description' in entity 'Conditions'.");
									}
									entry.Description_ByLanguage = this.ReadLocalizedString();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Weapon ReadWeapon()
			{
				var entry = new Weapon();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'Weapon'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (String) this.Node.AsString;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Name":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Name' in entity 'Weapon'.");
									}
									entry.Name_ByLanguage = this.ReadLocalizedString();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 5:
						{
							switch (attributeName)
							{
								case "Speed":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Speed' in entity 'Weapon'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Speed = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 8:
						{
							switch (attributeName)
							{
								case "DamageTo":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'DamageTo' in entity 'Weapon'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.DamageTo = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 10:
						{
							switch (attributeName)
							{
								case "DamageFrom":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'DamageFrom' in entity 'Weapon'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.DamageFrom = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 20:
						{
							switch (attributeName)
							{
								case "CriticalStrikeChance":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'CriticalStrikeChance' in entity 'Weapon'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.CriticalStrikeChance = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private Armor ReadArmor()
			{
				var entry = new Armor();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Text' for required attribute 'Id' in entity 'Armor'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (String) this.Node.AsString;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Name":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'LocalizedText' for required attribute 'Name' in entity 'Armor'.");
									}
									entry.Name_ByLanguage = this.ReadLocalizedString();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 5:
						{
							switch (attributeName)
							{
								case "Dodge":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Number' for required attribute 'Dodge' in entity 'Armor'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Dodge = (Single) this.Node.AsSingle;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 9:
						{
							switch (attributeName)
							{
								case "HitPoints":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'HitPoints' in entity 'Armor'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.HitPoints = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private ItemWithCount ReadItemWithCount()
			{
				var entry = new ItemWithCount();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'ItemWithCount'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch (attributeName)
							{
								case "Item":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Reference' for required attribute 'Item' in entity 'ItemWithCount'.");
									}
									entry.Item_Reference = this.ReadReference<Item>();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 5:
						{
							switch (attributeName)
							{
								case "Count":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Count' in entity 'ItemWithCount'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Count = (Int32) this.Node.AsInt32;
									this.NextToken();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}
			private StartingSet ReadStartingSet()
			{
				var entry = new StartingSet();
#pragma warning disable 0168 // The variable `id' is declared but never used
				var id = (object)"<unknown>";
#pragma warning restore 0168
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var attributeName = this.ReadMember();
					switch (attributeName.Length)
					{
						case 2:
						{
							switch (attributeName)
							{
								case "Id":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Integer' for required attribute 'Id' in entity 'StartingSet'.");
									}
									if(this.Node.Token != ReaderToken.Value)
									{
										throw ReaderException.UnexpectedToken(this, ReaderToken.Value);
									}

									entry.Id = (Int32) this.Node.AsInt32;
									this.NextToken();

									id = entry.Id;
									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 5:
						{
							switch (attributeName)
							{
								case "Items":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'DocumentList' for required attribute 'Items' in entity 'StartingSet'.");
									}
									var list = new List<ItemWithCount>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of instance of 'ItemWithCount' in 'Items' attribute in entity 'StartingSet'.");
										}

										var value = this.ReadItemWithCount();
										list.Add(value);
									}
									entry.Items = new ReadOnlyList<ItemWithCount>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 6:
						{
							switch (attributeName)
							{
								case "Heroes":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'ReferenceList' for required attribute 'Heroes' in entity 'StartingSet'.");
									}
									var list = new List<Reference<Hero>>();
									this.ReadArrayBegin();
									while(this.Node.Token != ReaderToken.EndOfArray)
									{
										if (this.Node.Token == ReaderToken.Null)
										{
											throw new InvalidOperationException("A null value is deserialized instead of reference to 'Reference<Hero>' in 'Heroes' attribute in entity 'StartingSet'.");
										}

										var value = this.ReadReference<Hero>();
										list.Add(value);
									}
									entry.Heroes_Reference = new ReadOnlyList<Reference<Hero>>(list);
									this.ReadArrayEnd();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						case 8:
						{
							switch (attributeName)
							{
								case "Location":
								{
									if (this.Node.Token == ReaderToken.Null)
									{
										throw new InvalidOperationException("A null value is deserialized instead of 'Reference' for required attribute 'Location' in entity 'StartingSet'.");
									}
									entry.Location_Reference = this.ReadReference<Location>();

									break;
								}
								default:
								{
									this.ReadAny();
									break;
								}
							}
							break;
						}
						default:
						{
							this.ReadAny();
							break;
						}
					}
				}
				this.ReadObjectEnd();
				return entry;
			}

			private void ReadArrayBegin(bool nextToken = true)
			{
				if (this.Node.Token != ReaderToken.BeginArray)
				{
					throw ReaderException.UnexpectedToken(this, ReaderToken.BeginArray);
				}
				if (this.IsEndOfStream())
				{
					throw ReaderException.UnexpectedToken(this, ReaderToken.EndOfArray);
				}

				if (nextToken)
					this.NextToken();
			}
			private void ReadArrayEnd(bool nextToken = true)
			{
				if (this.Node.Token != ReaderToken.EndOfArray)
				{
					throw ReaderException.UnexpectedToken(this, ReaderToken.EndOfArray);
				}

				if (!this.IsEndOfStream() && nextToken)
				{
					this.NextToken();
				}
			}
			private void ReadObjectBegin(bool nextToken = true)
			{
				if (this.Node.Token != ReaderToken.BeginObject)
				{
					throw ReaderException.UnexpectedToken(this, ReaderToken.BeginObject);
				}

				if (this.IsEndOfStream())
				{
					throw ReaderException.UnexpectedToken(this, ReaderToken.EndOfObject);
				}

				if (nextToken)
				{
					this.NextToken();
				}
			}
			private void ReadObjectEnd(bool nextToken = true)
			{
				if (this.Node.Token != ReaderToken.EndOfObject)
				{
					throw ReaderException.UnexpectedToken(this, ReaderToken.EndOfObject);
				}

				if (!this.IsEndOfStream() && nextToken)
				{
					this.NextToken();
				}
			}
			private string ReadMember(bool nextToken = true)
			{
				if (this.Node.Token != ReaderToken.Member && this.Node.Token != ReaderToken.Value)
				{
					throw ReaderException.UnexpectedToken(this, ReaderToken.Member, ReaderToken.Value);
				}

				var memberName = this.Node.AsString;

				if (!this.IsEndOfStream() && nextToken)
				{
					this.NextToken();
				}

				return memberName;
			}

			protected object ReadAny(bool nextToken = true)
			{
				switch(this.Node.Token)
				{
					case ReaderToken.BeginArray: return this.ReadArray(nextToken);
					case ReaderToken.BeginObject: return this.ReadObject(nextToken);
					case ReaderToken.Null: if (nextToken) this.NextToken(); return null;
					case ReaderToken.Value: var value = this.Node.AsObject; if (nextToken) this.NextToken(); return value;
					default: throw ReaderException.UnexpectedToken(this, ReaderToken.BeginArray, ReaderToken.BeginObject, ReaderToken.Null, ReaderToken.Value);
				}
			}
			private object[] ReadArray(bool nextToken = true)
			{
				var list = new List<object>();
				this.ReadArrayBegin();
				while(this.Node.Token != ReaderToken.EndOfArray)
				{
					var value = this.ReadAny();
					list.Add(value);
				}
				this.ReadArrayEnd( nextToken);
				return list.ToArray();
			}
			private Dictionary<string, object> ReadObject(bool nextToken = true)
			{
				var dictionary = new Dictionary<string, object>();
				this.ReadObjectBegin();
				while(this.Node.Token != ReaderToken.EndOfObject)
				{
					var key = this.ReadMember();
					var value = this.ReadAny();
					dictionary[key] = value;
				}
				this.ReadObjectEnd(nextToken);
				return dictionary;
			}
			private LocalizedString ReadLocalizedString(bool nextToken = true)
			{
				var locString = new LocalizedString();
				this.ReadObjectBegin();
				while(this.Node.Token != ReaderToken.EndOfObject)
				{
					var key = this.ReadMember();
					var value = Convert.ToString(this.ReadAny(), FormatProvider);
					((IDictionary<string, string>)locString)[key] = value;
				}
				this.ReadObjectEnd(nextToken);
				return locString;
			}
			private Reference<T> ReadReference<T>(bool nextToken = true) where T : Document
			{
				var reference = new Reference<T>();
				this.ReadObjectBegin();
				while (this.Node.Token != ReaderToken.EndOfObject)
				{
					var key = this.ReadMember();
					if (key == "Id")
						reference.Id = this.ReadAny();
					else
						this.ReadAny();
				}
				this.ReadObjectEnd(nextToken);
				return reference;
			}

			private bool IsEndOfStream()
			{
				return this.Node.Token == ReaderToken.EndOfStream;
			}
			private bool IsNull()
			{
				return this.Node.Token == ReaderToken.Null;
			}

			public override string ToString()
			{
				return this.Node.ToString();
			}
		}

		private struct ReaderNode
		{
			private readonly object value;

			public readonly ReaderToken Token;
			public readonly Type ValueType;

			public bool HasValue { get { return this.ValueType != typeof(void); } }

			public ReaderNode(ReaderToken token)
			{
				this.Token = token;
				this.value = null;
				this.ValueType = typeof(void);
			}
			public ReaderNode(ReaderToken token, object value)
			{
				if (value == null) throw new ArgumentNullException("value");

				this.Token = token;
				this.value = value;
				this.ValueType = value is IStrongBox ? ((IStrongBox)value).ValueType : value.GetType();
			}

			public bool AsBoolean
			{
				get
				{
					if (this.value is IStrongBox) return (this.value as IStrongBox).AsBoolean;
					return Convert.ToBoolean(this.value, FormatProvider);
				}
			}
			public byte AsByte
			{
				get
				{
					if (this.value is IStrongBox) return (this.value as IStrongBox).AsByte;
					return Convert.ToByte(this.value, FormatProvider);
				}
			}
			public short AsInt16
			{
				get
				{
					if (this.value is IStrongBox) return (this.value as IStrongBox).AsInt16;
					return Convert.ToInt16(this.value, FormatProvider);
				}
			}
			public int AsInt32
			{
				get
				{
					if (this.value is IStrongBox) return (this.value as IStrongBox).AsInt32;
					return Convert.ToInt32(this.value, FormatProvider);
				}
			}
			public long AsInt64
			{
				get
				{
					if (this.value is IStrongBox) return (this.value as IStrongBox).AsInt64;
					return Convert.ToInt64(this.value, FormatProvider);
				}
			}
			public sbyte AsSByte
			{
				get
				{
					if (this.value is IStrongBox) return (this.value as IStrongBox).AsSByte;
					return Convert.ToSByte(this.value, FormatProvider);
				}
			}
			public ushort AsUInt16
			{
				get
				{
					if (this.value is IStrongBox) return (this.value as IStrongBox).AsUInt16;
					return Convert.ToUInt16(this.value, FormatProvider);
				}
			}
			public uint AsUInt32
			{
				get
				{
					if (this.value is IStrongBox) return (this.value as IStrongBox).AsUInt32;
					return Convert.ToUInt32(this.value, FormatProvider);
				}
			}
			public ulong AsUInt64
			{
				get
				{
					if (this.value is IStrongBox) return (this.value as IStrongBox).AsUInt64;
					return Convert.ToUInt64(this.value, FormatProvider);
				}
			}
			public float AsSingle
			{
				get
				{
					if (this.value is IStrongBox) return (this.value as IStrongBox).AsSingle;
					return Convert.ToSingle(this.value, FormatProvider);
				}
			}
			public double AsDouble
			{
				get
				{
					if (this.value is IStrongBox) return (this.value as IStrongBox).AsDouble;
					return Convert.ToDouble(this.value, FormatProvider);
				}
			}
			public decimal AsDecimal
			{
				get
				{
					if (this.value is IStrongBox) return (this.value as IStrongBox).AsDecimal;
					return Convert.ToDecimal(this.value, FormatProvider);
				}
			}
			public string AsString
			{
				get
				{
					var value = this.value;
					if (this.value is IStrongBox) value = (this.value as IStrongBox).AsObject;
					return Convert.ToString(value, FormatProvider);
				}
			}
			public DateTime AsDateTime
			{
				get
				{
					var dateTimeStr = this.AsString;
					var date = DateTime.ParseExact(dateTimeStr, DateTimeFormat, FormatProvider, System.Globalization.DateTimeStyles.AssumeUniversal);
					return date;
				}
			}
			public TimeSpan AsTimeSpan
			{
				get
				{
					var timeSpanStr = this.AsString;
					var timeSpan = TimeSpan.Parse(timeSpanStr);
					return timeSpan;
				}
			}
			public object AsObject
			{
				get
				{
					if (this.value is IStrongBox) return (this.value as IStrongBox).AsObject;
					return this.value;
				}
			}

			public override string ToString()
			{
				return string.Format(FormatProvider, "{0}:{1}", this.Token, this.value);
			}
		}

		private interface IStrongBox
		{
			bool AsBoolean { get; }
			byte AsByte { get; }
			short AsInt16 { get; }
			int AsInt32 { get; }
			long AsInt64 { get; }
			sbyte AsSByte { get; }
			ushort AsUInt16 { get; }
			uint AsUInt32 { get; }
			ulong AsUInt64 { get; }
			float AsSingle { get; }
			double AsDouble { get; }
			decimal AsDecimal { get; }
			Type ValueType { get; }
			object AsObject { get; }

			void Store<T>(T value);
		}

		private sealed class StrongBox<ValueT> : IStrongBox
		{
			private static readonly Type ValueType = typeof(ValueT);

			private readonly IFormatProvider formatProvider;

			public ValueT Value;

			public StrongBox(ValueT value, IFormatProvider formatProvider)
				: this(formatProvider)
			{
				this.Value = value;
			}
			public StrongBox(IFormatProvider formatProvider)
			{
				if (formatProvider == null) throw new ArgumentNullException("formatProvider");

				this.formatProvider = formatProvider;
			}

			Type IStrongBox.ValueType { get { return ValueType; } }
			public bool AsBoolean { get	{ return Convert.ToBoolean((object)Value, this.formatProvider);	} }
			public byte AsByte { get { return Convert.ToByte((object)Value, this.formatProvider); } }
			public short AsInt16 { get { return Convert.ToInt16((object)Value, this.formatProvider); } }
			public int AsInt32 { get { return Convert.ToInt32((object)Value, this.formatProvider); } }
			public long AsInt64 { get { return Convert.ToInt64((object)Value, this.formatProvider); } }
			public sbyte AsSByte { get { return Convert.ToSByte((object)Value, this.formatProvider); } }
			public ushort AsUInt16 { get { return Convert.ToUInt16((object)Value, this.formatProvider); } }
			public uint AsUInt32 { get { return Convert.ToUInt32((object)Value, this.formatProvider); } }
			public ulong AsUInt64 { get { return Convert.ToUInt64((object)Value, this.formatProvider); } }
			public float AsSingle { get { return Convert.ToSingle((object)Value, this.formatProvider); } }
			public double AsDouble { get { return Convert.ToDouble((object)Value, this.formatProvider); } }
			public decimal AsDecimal { get { return Convert.ToDecimal((object)Value, this.formatProvider); } }
			public object AsObject { get { return this.Value; } }

			public void Store<T>(T value)
			{
				var type = typeof(T);
				if (type != ValueType)
				{
					throw new ArgumentException(string.Format("Unable to store value of type '{0}' in container of type '{1}'", typeof(ValueT), type));
				}
				this.Value = (ValueT)(object)value;
			}

			public override string ToString()
			{
				return Convert.ToString(this.Value, this.formatProvider);
			}
		}

		private enum ReaderToken
		{
			None = 0,
			BeginArray,
			EndOfArray,
			BeginObject,
			EndOfObject,
			Member,
			Null,
			Value,
			Comment,
			EndOfStream
		}

		[Serializable]
		private class ReaderException : SerializationException
		{
			public int Code { get; set; }
			public int LineNumber { get; set; }
			public int ColumnNumber { get; set; }

			private ReaderException(string message, Reader reader)
				: base(message)
			{
				if (message == null) throw new ArgumentNullException("message");

				if (reader != null)
					this.Update(reader);
			}

			protected ReaderException(SerializationInfo info, StreamingContext context)
				: base(info, context)
			{
				if (info == null) throw new ArgumentNullException("info");

				this.LineNumber = info.GetInt32("LineNumber");
				this.ColumnNumber = info.GetInt32("ColumnNumber");
			}

			private void Update(Reader reader)
			{
				if (reader == null) throw new ArgumentNullException("reader");

				this.LineNumber = reader.LineNumber;
				this.ColumnNumber = reader.ColumnNumber;
			}

			public override void GetObjectData(SerializationInfo info, StreamingContext context)
			{
				if (info == null) throw new ArgumentNullException("info");

				info.AddValue("Code", this.Code);
				info.AddValue("LineNumber", this.LineNumber);
				info.AddValue("ColumnNumber", this.ColumnNumber);

				base.GetObjectData(info, context);
			}

			public static Exception UnexpectedEndOfStream(Reader reader)
			{
				if (reader == null) throw new ArgumentNullException("reader");

				return new ReaderException(string.Format("Unexpected end of stream."), reader);
			}
			public static Exception UnexpectedToken(Reader reader, params ReaderToken[] expectedTokens)
			{
				if (reader == null) throw new ArgumentNullException("reader");
				if (expectedTokens == null) throw new ArgumentNullException("expectedTokens");

				var tokensStr = default(string);
				if (expectedTokens.Length == 0)
				{
					tokensStr = "<no tokens>";
				}
				else
				{
					var tokens = Array.ConvertAll(expectedTokens, c => c.ToString());
					tokensStr = String.Join(", ", tokens);
				}

				return new ReaderException(string.Format("Expected one of there '{2}' but found '{0}'({1}).", reader.Node.Token, reader.Node.ValueType.Name, tokensStr), reader);
			}
			public static Exception UnknownEscapeSequence(string escape, Reader reader)
			{
				if (escape == null) throw new ArgumentNullException("escape");
				if (reader == null) throw new ArgumentNullException("reader");

				return new ReaderException(string.Format("An unknown escape sequence '{0}'.", escape),reader);
			}
			public static Exception UnterminatedStringLiteral(Reader reader)
			{
				if (reader == null) throw new ArgumentNullException("reader");

				return new ReaderException(string.Format("An unterminated string literal."), reader);
			}
			public static Exception UnknownNotation(Reader reader, string notation)
			{
				if (reader == null) throw new ArgumentNullException("reader");

				return new ReaderException(string.Format("An unknown notation '{0}'.", notation), reader);
			}
			public static Exception StringLiteralIsTooLong(Reader reader, int size, int maxSize)
			{
				if (reader == null) throw new ArgumentNullException("reader");

				return new ReaderException(string.Format("String literal is too long '{0}'. Maximum size is {1}.", size, maxSize), reader);
			}
			public static Exception BinaryDataIsTooLong(Reader reader, int size, int maxSize)
			{
				if (reader == null) throw new ArgumentNullException("reader");

				return new ReaderException(string.Format("Binary data is too long '{0}'. Maximum size is {1}.", size, maxSize), reader);
			}
			public static Exception ReadingBrokenDocument(Reader reader, string additionalInformation)
			{
				if (reader == null) throw new ArgumentNullException("reader");

				return new ReaderException(string.Format("Failed to continue deserialize because document's structure is invalid. Additional information: {0}", additionalInformation), reader);
			}
			public static Exception UnknownMessagePackType(string type, Reader reader)
			{
				if (reader == null) throw new ArgumentNullException("reader");

				return new ReaderException(string.Format("An unknown Message Pack type '{0}'.", type), reader);
			}
		}
		#region EndianBitConverter by Jon Skeet and Marc Gravell
		/* "Miscellaneous Utility Library" Software Licence

		Version 1.0

		Copyright (c) 2004-2008 Jon Skeet and Marc Gravell.
		All rights reserved.

		Redistribution and use in source and binary forms, with or without
		modification, are permitted provided that the following conditions
		are met:

		1. Redistributions of source code must retain the above copyright
		notice, this list of conditions and the following disclaimer.

		2. Redistributions in binary form must reproduce the above copyright
		notice, this list of conditions and the following disclaimer in the
		documentation and/or other materials provided with the distribution.

		3. The end-user documentation included with the redistribution, if
		any, must include the following acknowledgment:

		"This product includes software developed by Jon Skeet
		and Marc Gravell. Contact skeet@pobox.com, or see
		http://www.pobox.com/~skeet/)."

		Alternately, this acknowledgment may appear in the software itself,
		if and wherever such third-party acknowledgments normally appear.

		4. The name "Miscellaneous Utility Library" must not be used to endorse
		or promote products derived from this software without prior written
		permission. For written permission, please contact skeet@pobox.com.

		5. Products derived from this software may not be called
		"Miscellaneous Utility Library", nor may "Miscellaneous Utility Library"
		appear in their name, without prior written permission of Jon Skeet.

		THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
		WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
		MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
		IN NO EVENT SHALL JON SKEET BE LIABLE FOR ANY DIRECT, INDIRECT,
		INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
		LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
		CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
		LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
		ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
		POSSIBILITY OF SUCH DAMAGE.
		*/

		internal enum Endianness
		{
			LittleEndian,

			BigEndian
		}

		private abstract class EndianBitConverter
		{
			#region Endianness of this converter

			public abstract bool IsLittleEndian();

			public abstract Endianness Endianness { get; }

			#endregion

			#region Factory properties

			private static readonly LittleEndianBitConverter little = new LittleEndianBitConverter();

			public static LittleEndianBitConverter Little
			{
				get { return little; }
			}

			private static readonly BigEndianBitConverter big = new BigEndianBitConverter();

			public static BigEndianBitConverter Big
			{
				get { return big; }
			}

			#endregion

			#region Double/primitive conversions

			public long DoubleToInt64Bits(double value)
			{
				return BitConverter.DoubleToInt64Bits(value);
			}

			public double Int64BitsToDouble(long value)
			{
				return BitConverter.Int64BitsToDouble(value);
			}

			public int SingleToInt32Bits(float value)
			{
				return new Int32SingleUnion(value).AsInt32;
			}

			public float Int32BitsToSingle(int value)
			{
				return new Int32SingleUnion(value).AsSingle;
			}

			#endregion

			#region To(PrimitiveType) conversions

			public bool ToBoolean(byte[] value, int startIndex)
			{
				CheckByteArgument(value, startIndex, 1);
				return BitConverter.ToBoolean(value, startIndex);
			}

			public char ToChar(byte[] value, int startIndex)
			{
				return unchecked((char)(CheckedFromBytes(value, startIndex, 2)));
			}

			public double ToDouble(byte[] value, int startIndex)
			{
				return Int64BitsToDouble(ToInt64(value, startIndex));
			}

			public float ToSingle(byte[] value, int startIndex)
			{
				return Int32BitsToSingle(ToInt32(value, startIndex));
			}

			public short ToInt16(byte[] value, int startIndex)
			{
				return unchecked((short)(CheckedFromBytes(value, startIndex, 2)));
			}

			public int ToInt32(byte[] value, int startIndex)
			{
				return unchecked((int)(CheckedFromBytes(value, startIndex, 4)));
			}

			public long ToInt64(byte[] value, int startIndex)
			{
				return CheckedFromBytes(value, startIndex, 8);
			}

			public ushort ToUInt16(byte[] value, int startIndex)
			{
				return unchecked((ushort)(CheckedFromBytes(value, startIndex, 2)));
			}

			public uint ToUInt32(byte[] value, int startIndex)
			{
				return unchecked((uint)(CheckedFromBytes(value, startIndex, 4)));
			}

			public ulong ToUInt64(byte[] value, int startIndex)
			{
				return unchecked((ulong)(CheckedFromBytes(value, startIndex, 8)));
			}

			private static void CheckByteArgument(byte[] value, int startIndex, int bytesRequired)
			{
				if (value == null)
				{
					throw new ArgumentNullException("value");
				}
				if (startIndex < 0 || startIndex > value.Length - bytesRequired)
				{
					throw new ArgumentOutOfRangeException("startIndex");
				}
			}

			private long CheckedFromBytes(byte[] value, int startIndex, int bytesToConvert)
			{
				CheckByteArgument(value, startIndex, bytesToConvert);
				return FromBytes(value, startIndex, bytesToConvert);
			}

			protected abstract long FromBytes(byte[] value, int startIndex, int bytesToConvert);

			#endregion

			#region ToString conversions

			public static string ToString(byte[] value)
			{
				return BitConverter.ToString(value);
			}

			public static string ToString(byte[] value, int startIndex)
			{
				return BitConverter.ToString(value, startIndex);
			}

			public static string ToString(byte[] value, int startIndex, int length)
			{
				return BitConverter.ToString(value, startIndex, length);
			}

			#endregion

			#region	Decimal conversions

			public decimal ToDecimal(byte[] value, int startIndex)
			{
				// HACK: This always assumes four parts, each in their own endianness,
				// starting with the first part at the start of the byte array.
				// On the other hand, there's no real format specified...
				var parts = new int[4];
				for (var i = 0; i < 4; i++)
				{
					parts[i] = ToInt32(value, startIndex + i * 4);
				}
				return new decimal(parts);
			}

			public byte[] GetBytes(decimal value)
			{
				var bytes = new byte[16];
				var parts = decimal.GetBits(value);
				for (var i = 0; i < 4; i++)
				{
					CopyBytesImpl(parts[i], 4, bytes, i * 4);
				}
				return bytes;
			}

			public void CopyBytes(decimal value, byte[] buffer, int index)
			{
				var parts = decimal.GetBits(value);
				for (var i = 0; i < 4; i++)
				{
					CopyBytesImpl(parts[i], 4, buffer, i * 4 + index);
				}
			}

			#endregion

			#region GetBytes conversions

			private byte[] GetBytes(long value, int bytes)
			{
				var buffer = new byte[bytes];
				CopyBytes(value, bytes, buffer, 0);
				return buffer;
			}

			public byte[] GetBytes(bool value)
			{
				return BitConverter.GetBytes(value);
			}

			public byte[] GetBytes(char value)
			{
				return GetBytes(value, 2);
			}

			public byte[] GetBytes(double value)
			{
				return GetBytes(DoubleToInt64Bits(value), 8);
			}

			public byte[] GetBytes(short value)
			{
				return GetBytes(value, 2);
			}

			public byte[] GetBytes(int value)
			{
				return GetBytes(value, 4);
			}

			public byte[] GetBytes(long value)
			{
				return GetBytes(value, 8);
			}

			public byte[] GetBytes(float value)
			{
				return GetBytes(SingleToInt32Bits(value), 4);
			}

			public byte[] GetBytes(ushort value)
			{
				return GetBytes(value, 2);
			}

			public byte[] GetBytes(uint value)
			{
				return GetBytes(value, 4);
			}

			public byte[] GetBytes(ulong value)
			{
				return GetBytes(unchecked((long)value), 8);
			}

			#endregion

			#region CopyBytes conversions

			private void CopyBytes(long value, int bytes, byte[] buffer, int index)
			{
				if (buffer == null)
				{
					throw new ArgumentNullException("buffer", "Byte array must not be null");
				}
				if (buffer.Length < index + bytes)
				{
					throw new ArgumentOutOfRangeException("Buffer not big enough for value");
				}
				CopyBytesImpl(value, bytes, buffer, index);
			}

			protected abstract void CopyBytesImpl(long value, int bytes, byte[] buffer, int index);

			public void CopyBytes(bool value, byte[] buffer, int index)
			{
				CopyBytes(value ? 1 : 0, 1, buffer, index);
			}

			public void CopyBytes(char value, byte[] buffer, int index)
			{
				CopyBytes(value, 2, buffer, index);
			}

			public void CopyBytes(double value, byte[] buffer, int index)
			{
				CopyBytes(DoubleToInt64Bits(value), 8, buffer, index);
			}

			public void CopyBytes(short value, byte[] buffer, int index)
			{
				CopyBytes(value, 2, buffer, index);
			}

			public void CopyBytes(int value, byte[] buffer, int index)
			{
				CopyBytes(value, 4, buffer, index);
			}

			public void CopyBytes(long value, byte[] buffer, int index)
			{
				CopyBytes(value, 8, buffer, index);
			}

			public void CopyBytes(float value, byte[] buffer, int index)
			{
				CopyBytes(SingleToInt32Bits(value), 4, buffer, index);
			}

			public void CopyBytes(ushort value, byte[] buffer, int index)
			{
				CopyBytes(value, 2, buffer, index);
			}

			public void CopyBytes(uint value, byte[] buffer, int index)
			{
				CopyBytes(value, 4, buffer, index);
			}

			public void CopyBytes(ulong value, byte[] buffer, int index)
			{
				CopyBytes(unchecked((long)value), 8, buffer, index);
			}

			#endregion

			#region Private struct used for Single/Int32 conversions

			[StructLayout(LayoutKind.Explicit)]
			private struct Int32SingleUnion
			{
				[FieldOffset(0)]
				private readonly int i;

				[FieldOffset(0)]
				private readonly float f;

				internal Int32SingleUnion(int i)
				{
					this.f = 0; // Just to keep the compiler happy
					this.i = i;
				}

				internal Int32SingleUnion(float f)
				{
					this.i = 0; // Just to keep the compiler happy
					this.f = f;
				}

				internal int AsInt32
				{
					get { return i; }
				}

				internal float AsSingle
				{
					get { return f; }
				}
			}

			#endregion
		}

		private sealed class BigEndianBitConverter : EndianBitConverter
		{
			public sealed override bool IsLittleEndian()
			{
				return false;
			}

			public sealed override Endianness Endianness
			{
				get { return Endianness.BigEndian; }
			}

			protected override void CopyBytesImpl(long value, int bytes, byte[] buffer, int index)
			{
				var endOffset = index + bytes - 1;
				for (var i = 0; i < bytes; i++)
				{
					buffer[endOffset - i] = unchecked((byte)(value & 0xff));
					value = value >> 8;
				}
			}

			protected override long FromBytes(byte[] buffer, int startIndex, int bytesToConvert)
			{
				long ret = 0;
				for (var i = 0; i < bytesToConvert; i++)
				{
					ret = unchecked((ret << 8) | buffer[startIndex + i]);
				}
				return ret;
			}
		}

		private sealed class LittleEndianBitConverter : EndianBitConverter
		{
			public sealed override bool IsLittleEndian()
			{
				return true;
			}

			public sealed override Endianness Endianness
			{
				get { return Endianness.LittleEndian; }
			}

			protected override void CopyBytesImpl(long value, int bytes, byte[] buffer, int index)
			{
				for (var i = 0; i < bytes; i++)
				{
					buffer[i + index] = unchecked((byte)(value & 0xff));
					value = value >> 8;
				}
			}

			protected override long FromBytes(byte[] buffer, int startIndex, int bytesToConvert)
			{
				long ret = 0;
				for (var i = 0; i < bytesToConvert; i++)
				{
					ret = unchecked((ret << 8) | buffer[startIndex + bytesToConvert - 1 - i]);
				}
				return ret;
			}
		}

		/* end of Jon Skeet and Marc Gravell code */
		#endregion

		#endregion

		#region Serialization: JSON
		private void ReadJson(RpgGameData gameData, Stream stream, Encoding encoding, bool leaveOpen)
		{
			if (gameData == null) throw new ArgumentNullException("gameData");
			if (stream == null) throw new ArgumentNullException("stream");
			if (encoding == null) throw new ArgumentNullException("encoding");

			var textReader = new StreamReader(stream, encoding);
			using(var jsonReader = new JsonReader(textReader, leaveOpen))
				jsonReader.ReadGameData(gameData);
		}

		private sealed partial class JsonReader : Reader, IDisposable
		{
			private const int DefaultBufferSize = 1024;

			const int LEXER_STATE_COMPLETE = -1;
			const int LEXER_STATE_START = 0;
			const int LEXER_STATE_LEXEME = 1;
			const int LEXER_STATE_QUOTED = 2;
			const int LEXER_STATE_QUOTED_ESCAPE = 3;
			const int LEXER_STATE_COMMENT_BEGINING = 4;
			const int LEXER_STATE_COMMENT_SINGLELINE = 5;
			const int LEXER_STATE_COMMENT_MULTILINE = 6;
			const int LEXER_STATE_COMMENT_MULTILINE_ENDING = 7;

			private readonly ArraySegment<char> LexemeTrue = new ArraySegment<char>(JsonNotation.True.ToCharArray(), 0, 4);
			private readonly ArraySegment<char> LexemeFalse = new ArraySegment<char>(JsonNotation.False.ToCharArray(), 0, 5);
			private readonly ArraySegment<char> LexemeNull = new ArraySegment<char>(JsonNotation.Null.ToCharArray(), 0, 4);

			private const int NumberNot = -1;
			private const int NumberInteger = 0;
			private const int NumberFloat = 1;
			private const int NumberFloatWithExp = 2;

			private readonly bool leaveOpen;
			private readonly TextReader textReader;

			// tokenizing
			private ArraySegment<char> buffer;
			private int lineNum = 1;
			private int colNum = 1;

			// parsing
			private ReaderNode node;
			private ArraySegment<char> rawJson;

			private StrongBox<bool> trueBox;
			private StrongBox<bool> falseBox;
			private StrongBox<int> intBox;
			private StrongBox<DateTime> dateBox;
			private JsonValueBox jsonValueBox;

			public override ReaderNode Node { get { if (this.node.Token == ReaderToken.None) this.NextToken(); return this.node; } }

			// statistics
			public override int LineNumber { get { return this.lineNum; } }
			public override int ColumnNumber { get { return this.colNum; } }

			public JsonReader(TextReader textReader, bool leaveOpen = false, int bufferSize = DefaultBufferSize)
			{
				if (textReader == null) throw new ArgumentNullException("textReader");
				if (bufferSize <= 0) throw new ArgumentOutOfRangeException("bufferSize");

				this.buffer = new ArraySegment<char>(new char[bufferSize], 0, 0);
				this.textReader = textReader;
				this.leaveOpen = leaveOpen;
			}

			public override bool NextToken()
			{
				this.rawJson = default(ArraySegment<char>);
				this.node = default(ReaderNode);

				var fragments = default(ArraySegment<char>[]);
				var state = LEXER_STATE_COMPLETE;
				var lexemeSize = 0;

				var lexeme = this.NextLexeme(ref state);
				if (lexeme.Count == 0)
				{
					this.node = new ReaderNode(ReaderToken.EndOfStream);
					return false;
				}
				if (state != LEXER_STATE_COMPLETE)
				{
					var firstFragment = lexeme;
					var secondFragment = this.NextLexeme(ref state);

					if (state == LEXER_STATE_COMPLETE)
					{
						if (secondFragment.Count == 0)
						{
							lexeme = firstFragment;
							lexemeSize = lexeme.Count;
						}
						else
						{
							fragments = new ArraySegment<char>[2] { firstFragment, secondFragment };
							lexemeSize = firstFragment.Count + secondFragment.Count;
						}
					}
					else
					{
						var f = 0;
						fragments = new ArraySegment<char>[8];
						fragments[f++] = firstFragment;
						fragments[f++] = secondFragment;
						lexemeSize = firstFragment.Count + secondFragment.Count;

						do
						{
							lexeme = this.NextLexeme(ref state);

							if (lexeme.Count == 0) break;
							if (f == fragments.Length) Array.Resize(ref fragments, fragments.Length * 2);

							fragments[f++] = lexeme;
							lexemeSize += lexeme.Count;

						} while (state != LEXER_STATE_COMPLETE);
					}
				}
				else
				{
					lexemeSize = lexeme.Count;
				}

				if (lexemeSize == 1)
				{
					this.rawJson = fragments != null ? fragments[0] : lexeme;
					switch (rawJson.Array[rawJson.Offset])
					{
						case JsonNotation.Const0: this.node = new ReaderNode(ReaderToken.Value, this.Box(0)); return true;
						case JsonNotation.Const1: this.node = new ReaderNode(ReaderToken.Value, this.Box(1)); return true;
						case JsonNotation.Const2: this.node = new ReaderNode(ReaderToken.Value, this.Box(2)); return true;
						case JsonNotation.Const3: this.node = new ReaderNode(ReaderToken.Value, this.Box(3)); return true;
						case JsonNotation.Const4: this.node = new ReaderNode(ReaderToken.Value, this.Box(4)); return true;
						case JsonNotation.Const5: this.node = new ReaderNode(ReaderToken.Value, this.Box(5)); return true;
						case JsonNotation.Const6: this.node = new ReaderNode(ReaderToken.Value, this.Box(6)); return true;
						case JsonNotation.Const7: this.node = new ReaderNode(ReaderToken.Value, this.Box(7)); return true;
						case JsonNotation.Const8: this.node = new ReaderNode(ReaderToken.Value, this.Box(8)); return true;
						case JsonNotation.Const9: this.node = new ReaderNode(ReaderToken.Value, this.Box(9)); return true;
						case JsonNotation.BeginArray: this.node = new ReaderNode(ReaderToken.BeginArray); return true;
						case JsonNotation.BeginObject: this.node = new ReaderNode(ReaderToken.BeginObject); return true;
						case JsonNotation.EndArray: this.node = new ReaderNode(ReaderToken.EndOfArray); return true;
						case JsonNotation.EndObject: this.node = new ReaderNode(ReaderToken.EndOfObject); return true;
						default: throw ReaderException.UnknownNotation(this, new string(this.rawJson.Array, this.rawJson.Offset, this.rawJson.Count));
					}
				}
				if (lexemeSize == 4)
				{
					if (this.Match(lexeme, fragments, 0, LexemeTrue))
					{
						this.rawJson = LexemeTrue;
						this.node = new ReaderNode(ReaderToken.Value, this.Box(true));
						return true;
					}
					if (this.Match(lexeme, fragments, 0, LexemeNull))
					{
						this.rawJson = LexemeNull;
						this.node = new ReaderNode(ReaderToken.Null);
						return true;
					}
				}
				if (lexemeSize == 5 && this.Match(lexeme, fragments, 0, LexemeFalse))
				{
					this.rawJson = LexemeFalse;
					this.node = new ReaderNode(ReaderToken.Value, this.Box(false));
					return true;
				}

				// combine fragments into one lexeme
				if (fragments != null)
				{
					var combined = new char[lexemeSize];
					var offset = 0;
					foreach (var fragment in fragments)
					{
						if (fragment.Array == null) break;
						Buffer.BlockCopy(fragment.Array, fragment.Offset * 2, combined, offset * 2, fragment.Count * 2);
						offset += fragment.Count;
					}
					lexeme = new ArraySegment<char>(combined, 0, offset);
					//fragments = null;
				}

				this.rawJson = lexeme;
				if (lexeme.Array[lexeme.Offset] == JsonNotation.Quote) // start with quote
				{
					if (lexeme.Array[lexeme.Offset + lexeme.Count - 1] != JsonNotation.Quote) // not ending with quote
						throw ReaderException.UnterminatedStringLiteral(this);

					if (lexemeSize == 2)
					{
						this.node = new ReaderNode(ReaderToken.Value, string.Empty);
						return true;
					}

					this.node = new ReaderNode(ReaderToken.Value, this.Box(lexeme));
					return true;
				}

				switch (this.ClasssifyNumber(lexeme))
				{
					case NumberInteger:
						this.node = new ReaderNode(ReaderToken.Value, this.Box(lexeme, typeof(long)));
						return true;
					case NumberFloat:
					case NumberFloatWithExp:
						this.node = new ReaderNode(ReaderToken.Value, this.Box(lexeme, typeof(double)));
						return true;
				}

				throw ReaderException.UnknownNotation(this, new string(this.rawJson.Array, this.rawJson.Offset, this.rawJson.Count));
			}

			private object Box(ArraySegment<char> lexeme)
			{
				if (this.jsonValueBox == null)
					this.jsonValueBox = new JsonValueBox(FormatProvider);

				this.jsonValueBox.Store(lexeme, typeof(string));

				return this.jsonValueBox;
			}
			private object Box(ArraySegment<char> lexeme, Type type)
			{
				if (type == null) throw new ArgumentNullException("type");

				if (this.jsonValueBox == null)
					this.jsonValueBox = new JsonValueBox(FormatProvider);

				this.jsonValueBox.Store(lexeme, type);
				return this.jsonValueBox;
			}
			private object Box(int value)
			{
				if (this.intBox == null)
					this.intBox = new StrongBox<int>(FormatProvider);

				this.intBox.Store(value);
				return this.intBox;
			}
			private object Box(DateTime value)
			{
				if (this.dateBox == null)
					this.dateBox = new StrongBox<DateTime>(FormatProvider);

				this.dateBox.Store(value);

				return this.intBox;
			}
			private object Box(bool value)
			{
				if (value)
				{
					if (this.trueBox == null)
						this.trueBox = new StrongBox<bool>(true, FormatProvider);
					return trueBox;
				}
				if (this.falseBox == null)
					this.falseBox = new StrongBox<bool>(false, FormatProvider);
				return falseBox;
			}

			private bool Match(ArraySegment<char> lexeme, ArraySegment<char>[] fragments, int offset, ArraySegment<char> matchTo)
			{
				var count = matchTo.Count;
				if (fragments == null)
				{
					for (int i = 0; i < count; i++)
					{
						if (lexeme.Array[lexeme.Offset + i] != matchTo.Array[matchTo.Offset + i])
							return false;
					}

					return true;
				}
				var mo = 0;
				foreach (var fg in fragments)
				{
					if (fg.Array == null) break;

					for (int i = 0; i < fg.Count; i++)
					{
						if (fg.Array[fg.Offset + i] != matchTo.Array[mo])
							return false;

						mo++;
					}
				}

				return true;
			}
			private int ClasssifyNumber(ArraySegment<char> lexeme)
			{
				const int IntPart = 0;
				const int FracPart = 1;
				const int ExpPart = 2;
				const char POINT = '.';
				const char EXP = 'E';
				const char PLUS = '+';
				const char MINUS = '-';

				var buffer = lexeme.Array;
				var offset = lexeme.Offset;
				var count = lexeme.Offset + lexeme.Count;

				var part = IntPart;

				for (int i = offset; i < count; i++)
				{
					var ch = buffer[i];

					switch (part)
					{
						case IntPart:
							if (ch == MINUS)
							{
								if (i != offset)
									return NumberNot;
							}
							else if (ch == POINT)
							{
								if (i == offset)
									return NumberNot; // decimal point as first character
								part = FracPart;
							}
							else if (Char.ToUpper(ch) == EXP)
							{
								if (i == offset)
									return NumberNot; // exp at first character
								part = ExpPart;
							}
							else if (!Char.IsDigit(ch))
								return NumberNot; // non digit character in int part
							break;
						case FracPart:
							if (Char.ToUpper(ch) == EXP)
							{
								if (i == offset)
									return NumberNot; // exp at first character
								part = ExpPart;
							}
							else if (!Char.IsDigit(ch))
								return NumberNot; // non digit character in frac part
							break;
						case ExpPart:
							if ((ch == PLUS || ch == MINUS))
							{
								if (Char.ToUpper(buffer[i - 1]) != EXP)
									return NumberNot; // sign not at start of exp part
							}
							else if (!Char.IsDigit(ch))
								return NumberNot; // non digit character in exp part
							break;
					}
				}
				return part;
			}
			private ArraySegment<char> NextLexeme(ref int state)
			{
			start:
				if (this.buffer.Count == 0 && this.EnsureBuffer() == 0)
				{
					state = LEXER_STATE_COMPLETE;
					return this.buffer; // end of stream
				}

				var array = this.buffer.Array;
				var offset = this.buffer.Offset;
				var length = offset + this.buffer.Count;

				if (state == LEXER_STATE_COMPLETE)
					state = LEXER_STATE_START;

				for (var i = offset; i < length; i++)
				{
					this.colNum++;
					switch (state)
					{
						case LEXER_STATE_START:
							switch (array[i])
							{
								case JsonNotation.Newline: this.lineNum++; this.colNum = 1; goto case JsonNotation.Space;
								case JsonNotation.Space:
								case JsonNotation.Return:
								case JsonNotation.Tab:
								case JsonNotation.IdentifierSeparator:
								case JsonNotation.ValueSeparator:
									continue; // insignificant whitespaces
								case JsonNotation.Comment:
									state = LEXER_STATE_COMMENT_BEGINING;
									continue;
								case JsonNotation.EndArray:
								case JsonNotation.EndObject:
								case JsonNotation.BeginObject:
								case JsonNotation.BeginArray:
									state = LEXER_STATE_COMPLETE;
									this.buffer = new ArraySegment<char>(array, i + 1, length - i - 1);
									return new ArraySegment<char>(array, i, 1);
								case JsonNotation.Quote:
									offset = i;
									state = LEXER_STATE_QUOTED;
									continue;
								default:
									if (Char.IsWhiteSpace(array[i]))
										goto case JsonNotation.Space;
									offset = i;
									state = LEXER_STATE_LEXEME;
									continue;
							}
						case LEXER_STATE_LEXEME:
							switch (array[i])
							{
								// lexeme terminators
								case JsonNotation.Space:
								case JsonNotation.Newline:
								case JsonNotation.Return:
								case JsonNotation.Tab:
								case JsonNotation.IdentifierSeparator:
								case JsonNotation.ValueSeparator:
								case JsonNotation.EndArray:
								case JsonNotation.EndObject:
								case JsonNotation.BeginObject:
								case JsonNotation.BeginArray:
									state = LEXER_STATE_COMPLETE;
									this.buffer = new ArraySegment<char>(array, i, length - i);
									return new ArraySegment<char>(array, offset, i - offset);
								default:
									if (Char.IsWhiteSpace(array[i]))
										goto case JsonNotation.Space;
									continue;
							}
						case LEXER_STATE_QUOTED:
						case LEXER_STATE_QUOTED_ESCAPE:
							switch (array[i])
							{
								case JsonNotation.Newline:
								case JsonNotation.Return:
									throw ReaderException.UnterminatedStringLiteral(this);
								case JsonNotation.Quote:
									if (state == LEXER_STATE_QUOTED_ESCAPE)
									{
										state = LEXER_STATE_QUOTED;
										continue;
									}

									state = LEXER_STATE_COMPLETE;
									this.buffer = new ArraySegment<char>(array, i + 1, length - i - 1);
									return new ArraySegment<char>(array, offset, i - offset + 1);
								case JsonNotation.Escape:
									state = LEXER_STATE_QUOTED_ESCAPE; // skips escaped quotes - \"
									continue;
								default:
									if (state == LEXER_STATE_QUOTED_ESCAPE)
										state = LEXER_STATE_QUOTED;
									continue;
							}
						case LEXER_STATE_COMMENT_BEGINING:
							switch (array[i])
							{
								case JsonNotation.Comment:
									state = LEXER_STATE_COMMENT_SINGLELINE;
									continue;
								case JsonNotation.CommentMultiline:
									state = LEXER_STATE_COMMENT_MULTILINE;
									continue;
								default:
									throw ReaderException.UnknownNotation(this, JsonNotation.Comment + array[i].ToString());
							}
						case LEXER_STATE_COMMENT_SINGLELINE:
							switch (array[i])
							{
								case JsonNotation.Newline:
								case JsonNotation.Return:
									state = LEXER_STATE_START;
									continue;
								default: continue;
							}
						case LEXER_STATE_COMMENT_MULTILINE_ENDING:
						case LEXER_STATE_COMMENT_MULTILINE:
							switch (array[i])
							{
								case JsonNotation.CommentMultiline:
									state = LEXER_STATE_COMMENT_MULTILINE_ENDING;
									continue;
								case JsonNotation.Comment:
									if (state == LEXER_STATE_COMMENT_MULTILINE_ENDING)
										state = LEXER_STATE_START;
									continue;
								default: continue;
							}

					}
				}

				if (state == LEXER_STATE_START || state == LEXER_STATE_COMMENT_BEGINING || state == LEXER_STATE_COMMENT_MULTILINE || state == LEXER_STATE_COMMENT_MULTILINE_ENDING || state == LEXER_STATE_COMMENT_SINGLELINE)
				{
					// no lexemes found in current buffer
					this.buffer = new ArraySegment<char>(array, 0, 0); // empty buffer
					goto start; // restart
				}

				// allocate new buffer for next fragment
				this.buffer = new ArraySegment<char>(new char[array.Length], 0, 0);

				return new ArraySegment<char>(array, offset, length - offset);
			}
			private int EnsureBuffer()
			{
				var chars = this.buffer.Array;
				var offset = this.buffer.Offset;
				var count = this.buffer.Count;

				if (count == 0)
				{
					offset = 0;
					count = this.FillBuffer(chars, 0);
				}
				else if (offset >= chars.Length / 2)
				{
					Buffer.BlockCopy(chars, offset * 2, chars, 0, count);
					offset = 0;
					count += this.FillBuffer(chars, offset + count);
				}
				else
				{
					count += this.FillBuffer(chars, offset + count);
				}

				this.buffer = new ArraySegment<char>(chars, offset, count);
				return count;
			}

			private int FillBuffer(char[] buffer, int offset)
			{
				var count = buffer.Length - offset;
				if (count <= 0)
					return offset;

				var read = this.textReader.Read(buffer, offset, count);
				return offset + read;
			}


			public void Dispose()
			{
				if (this.leaveOpen == false)
					this.textReader.Dispose();
			}

			private sealed class JsonValueBox : IStrongBox
			{
				private readonly IFormatProvider formatProvider;
				private ArraySegment<char> value;
				private Type valueType;

				public Type ValueType { get { return this.valueType; } }

				public bool AsBoolean { get { return Convert.ToBoolean(this.LoadString(), FormatProvider); } }
				public byte AsByte { get { return checked((byte)this.LoadUInt32()); } }
				public short AsInt16 { get { return checked((short)this.LoadInt32()); } }
				public int AsInt32 { get { return this.LoadInt32(); } }
				public long AsInt64 { get { return this.LoadInt64(); } }
				public sbyte AsSByte { get { return checked((sbyte)this.LoadInt32()); } }
				public ushort AsUInt16 { get { return checked((ushort)this.LoadUInt32()); } }
				public uint AsUInt32 { get { return this.LoadUInt32(); } }
				public ulong AsUInt64 { get { return this.LoadUInt64(); } }
				public float AsSingle { get { return Convert.ToSingle(this.LoadString(), FormatProvider); } }
				public double AsDouble { get { return Convert.ToDouble(this.LoadString(), FormatProvider); } }
				public decimal AsDecimal { get { return Convert.ToDecimal(this.LoadString(), FormatProvider); } }
				public object AsObject { get { return this.LoadString(); } }

				public JsonValueBox(IFormatProvider formatProvider)
				{
					if (formatProvider == null) throw new ArgumentNullException("formatProvider");

					this.formatProvider = formatProvider;
				}

				private uint LoadUInt32()
				{
					var array = this.value.Array;
					var offset = this.value.Offset;
					var count = this.value.Count;

					if (array[offset] == JsonNotation.Quote && array[offset + count - 1] == JsonNotation.Quote) // quoted
					{
						offset++;
						count -= 2;
					}

					return JsonUtils.StringToUInt32(array, offset, count, this.formatProvider);
				}
				private ulong LoadUInt64()
				{
					var array = this.value.Array;
					var offset = this.value.Offset;
					var count = this.value.Count;

					if (array[offset] == JsonNotation.Quote && array[offset + count - 1] == JsonNotation.Quote) // quoted
					{
						offset++;
						count -= 2;
					}

					return JsonUtils.StringToUInt64(array, offset, count, this.formatProvider);
				}
				private int LoadInt32()
				{
					var array = this.value.Array;
					var offset = this.value.Offset;
					var count = this.value.Count;

					if (array[offset] == JsonNotation.Quote && array[offset + count - 1] == JsonNotation.Quote) // quoted
					{
						offset++;
						count -= 2;
					}

					return JsonUtils.StringToInt32(array, offset, count, this.formatProvider);
				}
				private long LoadInt64()
				{
					var array = this.value.Array;
					var offset = this.value.Offset;
					var count = this.value.Count;

					if (array[offset] == JsonNotation.Quote && array[offset + count - 1] == JsonNotation.Quote) // quoted
					{
						offset++;
						count -= 2;
					}

					return JsonUtils.StringToInt64(array, offset, count, this.formatProvider);
				}
				private string LoadString()
				{
					var array = this.value.Array;
					var offset = this.value.Offset;
					var count = this.value.Count;

					if (array[offset] == JsonNotation.Quote && array[offset + count - 1] == JsonNotation.Quote) // quoted
					{
						offset++;
						count -= 2;
					}

					return JsonUtils.UnescapeBuffer(array, offset, count);
				}

				public void Store<T>(T value)
				{
					this.value = (ArraySegment<char>)(object)value;
					this.valueType = typeof(string);
				}

				public void Store(ArraySegment<char> value, Type valueType)
				{
					if (valueType == null) throw new ArgumentNullException("valueType");

					this.value = value;
					this.valueType = valueType;
				}

				public override string ToString()
				{
					return this.LoadString();
				}
			}

			private static class JsonUtils
			{
				public static string UnescapeBuffer(char[] charsToUnescape, int offset, int count)
				{
					var sb = new StringBuilder(count);
					var plainStart = offset;
					var plainLen = 0;
					var end = offset + count;
					for (int i = offset; i < end; i++)
					{

						var ch = charsToUnescape[i];
						if (ch == '\\')
						{
							var seqLength = 1;
							// append unencoded chunk
							if (plainLen != 0)
							{
								sb.Append(charsToUnescape, plainStart, plainLen);
								plainLen = 0;
							}

							var seqKind = charsToUnescape[i + 1];
							switch (seqKind)
							{
								case 'n': sb.Append('\n'); break;
								case 'r': sb.Append('\r'); break;
								case 'b': sb.Append('\b'); break;
								case 'f': sb.Append('\f'); break;
								case 't': sb.Append('\t'); break;
								case '\\': sb.Append('\\'); break;
								case '\'': sb.Append('\''); break;
								case '\"': sb.Append('\"'); break;
								// unicode symbol
								case 'u':
									sb.Append((char)HexStringToUInt32(charsToUnescape, i + 2, 4));
									seqLength = 5;
									break;
								// latin hex encoded symbol
								case 'x':
									sb.Append((char)HexStringToUInt32(charsToUnescape, i + 2, 2));
									seqLength = 3;
									break;
								// latin dec encoded symbol
								case '1':
								case '2':
								case '3':
								case '4':
								case '5':
								case '6':
								case '7':
								case '8':
								case '9':
								case '0':
									sb.Append((char)StringToInt32(charsToUnescape, i + 1, 3));
									seqLength = 3;
									break;
								default:
									throw ReaderException.UnknownEscapeSequence("\\" + seqKind, null);
							}

							// set next chunk start right after this escape
							plainStart = i + seqLength + 1;
							i += seqLength;
						}
						else
							plainLen++;
					}

					// append last unencoded chunk
					if (plainLen != 0)
						sb.Append(charsToUnescape, plainStart, plainLen);

					return sb.ToString();
				}

				public static uint HexStringToUInt32(char[] buffer, int offset, int count)
				{
					const uint ZERO = (ushort)'0';
					const uint a = (ushort)'a';
					const uint A = (ushort)'A';

					var result = 0u;
					for (var i = 0; i < count; i++)
					{
						var c = buffer[offset + i];
						var d = 0u;
						if (c >= '0' && c <= '9')
							d = (c - ZERO);
						else if (c >= 'a' && c <= 'f')
							d = 10u + (c - a);
						else if (c >= 'A' && c <= 'F')
							d = 10u + (c - A);
						else
							throw new FormatException();

						result = 16u * result + d;
					}

					return result;
				}

				public static long StringToInt64(char[] buffer, int offset, int count, IFormatProvider formatProvider = null)
				{
					const ulong ZERO = (ushort)'0';

					var result = 0UL;
					var neg = false;
					for (var i = 0; i < count; i++)
					{
						var c = buffer[offset + i];
						if (i == 0 && c == '-')
						{
							neg = true;
							continue;
						}
						if (c < '0' || c > '9')
							throw new FormatException();

						result = checked(10UL * result + (c - ZERO));
					}

					if (neg)
						return -(long)(result);
					return (long)result;
				}
				public static int StringToInt32(char[] buffer, int offset, int count, IFormatProvider formatProvider = null)
				{
					const uint ZERO = (ushort)'0';

					var result = 0u;
					var neg = false;
					for (var i = 0; i < count; i++)
					{
						var c = buffer[offset + i];
						if (i == 0 && c == '-')
						{
							neg = true;
							continue;
						}
						if (c < '0' || c > '9')
							throw new FormatException();

						result = checked(10u * result + (c - ZERO));
					}

					if (neg)
						return -(int)(result);
					return (int)result;
				}
				public static ulong StringToUInt64(char[] buffer, int offset, int count, IFormatProvider formatProvider = null)
				{
					const ulong ZERO = (ushort)'0';

					var result = 0UL;
					for (var i = 0; i < count; i++)
					{
						var c = buffer[offset + i];
						if (c < '0' || c > '9')
							throw new FormatException();

						result = checked(10UL * result + (c - ZERO));
					}

					return result;
				}
				public static uint StringToUInt32(char[] buffer, int offset, int count, IFormatProvider formatProvider = null)
				{
					const uint ZERO = (ushort)'0';

					var result = 0U;
					for (var i = 0; i < count; i++)
					{
						var c = buffer[offset + i];
						if (c < '0' || c > '9')
							throw new FormatException();

						result = checked(10 * result + (c - ZERO));
					}

					return result;
				}
			}

			private static class JsonNotation
			{
				public const char Tab = '\t';
				public const char Space = ' ';
				public const char Newline = '\n';
				public const char Return = '\r';
				public const char IdentifierSeparator = ':';
				public const char ValueSeparator = ',';
				public const char BeginArray = '[';
				public const char EndArray = ']';
				public const char BeginObject = '{';
				public const char EndObject = '}';
				public const char Escape = '\\';
				public const char Comment = '/';
				public const char CommentMultiline = '*';
				public const char Quote = '\"';
				public const char Const0 = '0';
				public const char Const1 = '1';
				public const char Const2 = '2';
				public const char Const3 = '3';
				public const char Const4 = '4';
				public const char Const5 = '5';
				public const char Const6 = '6';
				public const char Const7 = '7';
				public const char Const8 = '8';
				public const char Const9 = '9';
				public const string True = "true";
				public const string False = "false";
				public const string Null = "null";
			}
		}
		#endregion
		#region Serialization: Message Pack
		private void ReadMessagePack(RpgGameData gameData, Stream stream, Encoding encoding, bool leaveOpen)
		{
			if (gameData == null) throw new ArgumentNullException("gameData");
			if (stream == null) throw new ArgumentNullException("stream");
			if (encoding == null) throw new ArgumentNullException("encoding");

			using(var msgPackReader = new MessagePackReader(stream, leaveOpen))
				msgPackReader.ReadGameData(gameData);
		}

		private sealed class MessagePackReader : Reader, IDisposable
		{
			private const int DEFAULT_BUFFER_SIZE = 8 * 1024;
			private const int MAX_BINARY_LENGTH = 16 * 1024 * 1024;
			private const int MAX_STRING_LENGTH = 16 * 1024 * 1024;

			internal struct Map
			{
				public ReaderToken Token;
				public long Counter;
			}

			private readonly Stream inputStream;
			private readonly bool leaveOpen;
			private readonly byte[] buffer;
			private readonly EndianBitConverter bitConverter;
			private readonly Stack<Map> maps;
			private ReaderNode node;
			private int bufferOffset;
			private int bufferReaded;
			private int bufferAvailable;
			private int totalBytesReaded;

			private StrongBox<int> int32Box;
			private StrongBox<uint> uInt32Box;
			private StrongBox<long> int64Box;
			private StrongBox<ulong> uInt64Box;
			private StrongBox<float> singleBox;
			private StrongBox<double> doubleBox;
			private StrongBox<decimal> decimalBox;
			private StrongBox<DateTime> dateBox;
			private StrongBox<DateTimeOffset> dateOffsetBox;
			private StrongBox<bool> trueBox;
			private StrongBox<bool> falseBox;

			public override int LineNumber { get { return 0; } }
			public override int ColumnNumber { get { return this.totalBytesReaded; } }
			public override ReaderNode Node { get { if (this.node.Token == ReaderToken.None) this.NextToken(); return this.node; } }

			public MessagePackReader(Stream stream, bool leaveOpen = false, int bufferSize = DEFAULT_BUFFER_SIZE)
			{
				if (stream == null) throw new ArgumentNullException("stream");

				if (bufferSize < DEFAULT_BUFFER_SIZE)
					bufferSize = DEFAULT_BUFFER_SIZE;

				this.inputStream = stream;
				this.leaveOpen = leaveOpen;
				this.buffer = new byte[bufferSize];
				this.bufferOffset = 0;
				this.bufferReaded = 0;
				this.bufferAvailable = 0;
				this.bitConverter = EndianBitConverter.Big;
				this.maps = new Stack<Map>();
			}

			public override bool NextToken()
			{
				if (this.maps.Count > 0 && this.maps.Peek().Counter == 0)
				{
					var closingToken = this.maps.Pop();
					this.node = new ReaderNode(closingToken.Token);

					this.DecrementClosingTokenCounter();
					return true;
				}

				if (!this.ReadToBuffer(1, throwOnEos: false))
				{
					this.node = new ReaderNode(ReaderToken.EndOfStream);
					return false;
				}

				var formatValue = buffer[this.bufferOffset];
				if (formatValue >= (byte)MessagePackType.FixArrayStart && formatValue <= (byte)MessagePackType.FixArrayEnd)
				{
					var arrayCount = formatValue - (byte)MessagePackType.FixArrayStart;

					this.maps.Push(new Map { Token = ReaderToken.EndOfArray, Counter = arrayCount + 1 });
					this.node = new ReaderNode(ReaderToken.BeginArray);
				}
				else if (formatValue >= (byte)MessagePackType.FixStrStart && formatValue <= (byte)MessagePackType.FixStrEnd)
				{
					var strCount = formatValue - (byte)MessagePackType.FixStrStart;
					var strBytes = this.ReadBytes(strCount);
					var strValue = Encoding.UTF8.GetString(strBytes.Array, strBytes.Offset, strBytes.Count);

					var token = ReaderToken.Value;
					if (this.maps.Count > 0)
					{
						var closingToken = this.maps.Peek();
						if (closingToken.Token == ReaderToken.EndOfObject && closingToken.Counter > 0 && closingToken.Counter % 2 == 0)
							token = ReaderToken.Member;
					}
					this.node = new ReaderNode(token, strValue);
				}
				else if (formatValue >= (byte)MessagePackType.FixMapStart && formatValue <= (byte)MessagePackType.FixMapEnd)
				{
					var mapCount = formatValue - (byte)MessagePackType.FixMapStart;
					this.maps.Push(new Map { Token = ReaderToken.EndOfObject, Counter = mapCount * 2 + 1 });
					this.node = new ReaderNode(ReaderToken.BeginObject);
				}
				else if (formatValue >= (byte)MessagePackType.NegativeFixIntStart && formatValue <= (byte)MessagePackType.NegativeFixIntEnd)
				{
					var value = -(formatValue - (byte)MessagePackType.NegativeFixIntStart);
					this.node = new ReaderNode(ReaderToken.Value, this.Box(value));
				}
				else if (formatValue >= (byte)MessagePackType.PositiveFixIntStart && formatValue <= (byte)MessagePackType.PositiveFixIntEnd)
				{
					var value = formatValue - (byte)MessagePackType.PositiveFixIntStart;
					this.node = new ReaderNode(ReaderToken.Value, this.Box(value));
				}
				else
				{
					switch ((MessagePackType)formatValue)
					{
						case MessagePackType.Nil:
							this.node = new ReaderNode(ReaderToken.Null);
							break;
						case MessagePackType.Array16:
						case MessagePackType.Array32:
							var arrayCount = 0L;
							if (formatValue == (int)MessagePackType.Array16)
							{
								this.ReadToBuffer(2, throwOnEos: true);
								arrayCount = bitConverter.ToUInt16(this.buffer, this.bufferOffset);
							}
							else if (formatValue == (int)MessagePackType.Array32)
							{
								this.ReadToBuffer(4, throwOnEos: true);
								arrayCount = bitConverter.ToUInt32(this.buffer, this.bufferOffset);
							}

							if (arrayCount < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of array");
							this.maps.Push(new Map { Token = ReaderToken.EndOfArray, Counter = arrayCount + 1 });
							this.node = new ReaderNode(ReaderToken.BeginArray);
							break;
						case MessagePackType.Map16:
						case MessagePackType.Map32:
							var mapCount = 0L;
							if (formatValue == (int)MessagePackType.Map16)
							{
								this.ReadToBuffer(2, throwOnEos: true);
								mapCount = bitConverter.ToUInt16(this.buffer, this.bufferOffset);
							}
							else if (formatValue == (int)MessagePackType.Map32)
							{
								this.ReadToBuffer(4, throwOnEos: true);
								mapCount = bitConverter.ToUInt32(this.buffer, this.bufferOffset);
							}

							if (mapCount < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of map");
							this.maps.Push(new Map { Token = ReaderToken.EndOfObject, Counter = mapCount * 2 + 1 });
							this.node = new ReaderNode(ReaderToken.BeginObject);
							break;
						case MessagePackType.Str16:
						case MessagePackType.Str32:
						case MessagePackType.Str8:
							var strBytesCount = 0L;
							if (formatValue == (int)MessagePackType.Str8)
							{
								this.ReadToBuffer(1, throwOnEos: true);
								strBytesCount = this.buffer[this.bufferOffset];
							}
							else if (formatValue == (int)MessagePackType.Str16)
							{
								this.ReadToBuffer(2, throwOnEos: true);
								strBytesCount = bitConverter.ToUInt16(this.buffer, this.bufferOffset);
							}
							else if (formatValue == (int)MessagePackType.Str32)
							{
								this.ReadToBuffer(4, throwOnEos: true);
								strBytesCount = bitConverter.ToUInt32(this.buffer, this.bufferOffset);
							}

							var token = ReaderToken.Value;
							if (this.maps.Count > 0)
							{
								var closingToken = this.maps.Peek();
								if (closingToken.Token == ReaderToken.EndOfObject && closingToken.Counter > 0 && closingToken.Counter % 2 == 0)
									token = ReaderToken.Member;
							}

							if (strBytesCount > MAX_STRING_LENGTH) throw ReaderException.StringLiteralIsTooLong(this, (int)strBytesCount, MAX_STRING_LENGTH);
							if (strBytesCount < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of string");

							var strBytes = this.ReadBytes(strBytesCount);
							var strValue = Encoding.UTF8.GetString(strBytes.Array, strBytes.Offset, strBytes.Count);

							this.node = new ReaderNode(token, strValue);
							break;
						case MessagePackType.Bin32:
						case MessagePackType.Bin16:
						case MessagePackType.Bin8:
							var bytesCount = 0L;
							if (formatValue == (int)MessagePackType.Bin8)
							{
								this.ReadToBuffer(1, throwOnEos: true);
								bytesCount = this.buffer[this.bufferOffset];
							}
							else if (formatValue == (int)MessagePackType.Bin16)
							{
								this.ReadToBuffer(2, throwOnEos: true);
								bytesCount = bitConverter.ToUInt16(this.buffer, this.bufferOffset);
							}
							else if (formatValue == (int)MessagePackType.Bin32)
							{
								this.ReadToBuffer(4, throwOnEos: true);
								bytesCount = bitConverter.ToUInt32(this.buffer, this.bufferOffset);
							}

							if (bytesCount > MAX_BINARY_LENGTH) throw ReaderException.BinaryDataIsTooLong(this, (int)bytesCount, MAX_BINARY_LENGTH);
							if (bytesCount < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of binary data");
							var bytes = this.ReadBytes(bytesCount, forceNewBuffer: true);
							this.node = new ReaderNode(ReaderToken.Value, bytes.Array);
							break;
						case MessagePackType.FixExt1:
						case MessagePackType.FixExt16:
						case MessagePackType.FixExt2:
						case MessagePackType.FixExt4:
						case MessagePackType.FixExt8:
						case MessagePackType.Ext32:
						case MessagePackType.Ext16:
						case MessagePackType.Ext8:
							var extLength = 0L;
							if (formatValue == (int)MessagePackType.FixExt1)
								extLength = 1;
							else if (formatValue == (int)MessagePackType.FixExt2)
								extLength = 2;
							else if (formatValue == (int)MessagePackType.FixExt4)
								extLength = 4;
							else if (formatValue == (int)MessagePackType.FixExt8)
								extLength = 8;
							else if (formatValue == (int)MessagePackType.FixExt16)
								extLength = 16;
							if (formatValue == (int)MessagePackType.Ext8)
							{
								this.ReadToBuffer(1, throwOnEos: true);
								extLength = this.buffer[this.bufferOffset];
							}
							else if (formatValue == (int)MessagePackType.Ext16)
							{
								this.ReadToBuffer(2, throwOnEos: true);
								extLength = bitConverter.ToUInt16(this.buffer, this.bufferOffset);
							}
							else if (formatValue == (int)MessagePackType.Ext32)
							{
								this.ReadToBuffer(4, throwOnEos: true);
								extLength = bitConverter.ToUInt32(this.buffer, this.bufferOffset);
							}

							this.ReadToBuffer(1, throwOnEos: true);
							var extType = buffer[this.bufferOffset];

							if (extLength > MAX_BINARY_LENGTH) throw ReaderException.BinaryDataIsTooLong(this, (int)extLength, MAX_BINARY_LENGTH);
							if (extLength < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of binary data");

							var data = this.ReadBytes(extLength, forceNewBuffer: true);
							if (!this.TryReadExtType(extType, data, out this.node))
								this.node = new ReaderNode(ReaderToken.Value, data.Array);
							break;
						case MessagePackType.False:
							this.node = new ReaderNode(ReaderToken.Value, this.Box(false));
							break;
						case MessagePackType.True:
							this.node = new ReaderNode(ReaderToken.Value, this.Box(true));
							break;
						case MessagePackType.Float32:
							this.ReadToBuffer(4, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToSingle(buffer, this.bufferOffset)));
							break;
						case MessagePackType.Float64:
							this.ReadToBuffer(8, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToDouble(buffer, this.bufferOffset)));
							break;
						case MessagePackType.Int16:
							this.ReadToBuffer(2, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToInt16(buffer, this.bufferOffset)));
							break;
						case MessagePackType.Int32:
							this.ReadToBuffer(4, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToInt32(buffer, this.bufferOffset)));
							break;
						case MessagePackType.Int64:
							this.ReadToBuffer(8, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToInt64(buffer, this.bufferOffset)));
							break;
						case MessagePackType.Int8:
							this.ReadToBuffer(1, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box((sbyte)buffer[this.bufferOffset]));
							break;
						case MessagePackType.UInt16:
							this.ReadToBuffer(2, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box((uint)bitConverter.ToUInt16(buffer, this.bufferOffset)));
							break;
						case MessagePackType.UInt32:
							this.ReadToBuffer(4, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToUInt32(buffer, this.bufferOffset)));
							break;
						case MessagePackType.UInt64:
							this.ReadToBuffer(8, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToUInt64(buffer, this.bufferOffset)));
							break;
						case MessagePackType.UInt8:
							this.ReadToBuffer(1, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box((uint)buffer[this.bufferOffset]));
							break;
						case MessagePackType.PositiveFixIntStart:
						case MessagePackType.PositiveFixIntEnd:
						case MessagePackType.FixMapStart:
						case MessagePackType.FixMapEnd:
						case MessagePackType.FixArrayStart:
						case MessagePackType.FixArrayEnd:
						case MessagePackType.FixStrStart:
						case MessagePackType.FixStrEnd:
						case MessagePackType.Unused:
						case MessagePackType.NegativeFixIntStart:
						case MessagePackType.NegativeFixIntEnd:
						default: throw ReaderException.UnknownMessagePackType(((MessagePackType)formatValue).ToString(), this);
					}
				}

				this.DecrementClosingTokenCounter();

				return true;
			}

			private bool ReadToBuffer(int bytesRequired, bool throwOnEos)
			{
				this.bufferAvailable -= this.bufferReaded;
				this.bufferOffset += this.bufferReaded;
				this.bufferReaded = 0;

				if (this.bufferAvailable < bytesRequired)
				{
					if (this.bufferAvailable > 0)
						Buffer.BlockCopy(this.buffer, this.bufferOffset, this.buffer, 0, this.bufferAvailable);

					this.bufferOffset = 0;
					while (this.bufferAvailable < bytesRequired)
					{
						var read = this.inputStream.Read(this.buffer, this.bufferAvailable, this.buffer.Length - this.bufferAvailable);
						this.bufferAvailable += read;

						if (read != 0 || this.bufferAvailable >= bytesRequired)
							continue;

						if (throwOnEos)
							ReaderException.UnexpectedEndOfStream(this);
						else
							return false;
					}
				}

				this.bufferReaded = bytesRequired;
				this.totalBytesReaded += bytesRequired;
				return true;
			}
			private ArraySegment<byte> ReadBytes(long bytesRequired, bool forceNewBuffer = false)
			{
				if (bytesRequired > int.MaxValue) throw new ArgumentOutOfRangeException("bytesRequired");

				this.bufferAvailable -= this.bufferReaded;
				this.bufferOffset += this.bufferReaded;
				this.bufferReaded = 0;

				if (this.bufferAvailable >= bytesRequired && !forceNewBuffer)
				{
					var bytes = new ArraySegment<byte>(this.buffer, this.bufferOffset, (int)bytesRequired);

					this.bufferAvailable -= (int)bytesRequired;
					this.bufferOffset += (int)bytesRequired;
					this.totalBytesReaded += (int)bytesRequired;

					return bytes;
				}
				else
				{
					var bytes = new byte[bytesRequired];
					var bytesOffset = 0;
					if (this.bufferAvailable > 0 && bytesOffset < bytes.Length)
					{
						var bytesToCopy = Math.Min(bytes.Length - bytesOffset, this.bufferAvailable);
						Buffer.BlockCopy(this.buffer, this.bufferOffset, bytes, bytesOffset, bytesToCopy);

						bytesOffset += bytesToCopy;
						this.bufferOffset += bytesToCopy;

						this.bufferAvailable -= bytesToCopy;
						this.totalBytesReaded += bytesToCopy;
					}

					if (this.bufferAvailable == 0)
						this.bufferOffset = 0;

					while (bytesOffset < bytes.Length)
					{
						var read = this.inputStream.Read(bytes, bytesOffset, bytes.Length - bytesOffset);

						bytesOffset += read;
						this.totalBytesReaded += read;

						if (read == 0 && bytesOffset < bytes.Length)
							throw ReaderException.UnexpectedEndOfStream(this);
					}

					return new ArraySegment<byte>(bytes, 0, bytes.Length);
				}
			}
			private bool TryReadExtType(byte extType, ArraySegment<byte> data, out ReaderNode node)
			{
				switch ((MessagePackExtentionType)extType)
				{
					case MessagePackExtentionType.DateTime:
						var dateTime = new DateTime(bitConverter.ToInt64(data.Array, data.Offset + 1), (DateTimeKind)data.Array[data.Offset]);
						node = new ReaderNode(ReaderToken.Value, this.Box(dateTime));
						return true;
					case MessagePackExtentionType.DateTimeOffset:
						var time = new DateTime(bitConverter.ToInt64(data.Array, data.Offset), DateTimeKind.Utc);
						var offset = new TimeSpan(bitConverter.ToInt64(data.Array, data.Offset + 8));
						var dateTimeOffset = new DateTimeOffset(time, offset);
						node = new ReaderNode(ReaderToken.Value, this.Box(dateTimeOffset));
						return true;
					case MessagePackExtentionType.Decimal:
						var decimalValue = bitConverter.ToDecimal(data.Array, data.Offset);
						node = new ReaderNode(ReaderToken.Value, this.Box(decimalValue));
						return true;
					default:
						node = default(ReaderNode);
						return false;
				}
			}

			private object Box(int value)
			{
				if (this.int32Box == null)
					this.int32Box = new StrongBox<int>(FormatProvider);

				this.int32Box.Store(value);

				return this.int32Box;
			}
			private object Box(uint value)
			{
				if (this.uInt32Box == null)
					this.uInt32Box = new StrongBox<uint>(FormatProvider);

				this.uInt32Box.Store(value);

				return this.uInt32Box;
			}
			private object Box(long value)
			{
				if (this.int64Box == null)
					this.int64Box = new StrongBox<long>(FormatProvider);

				this.int64Box.Store(value);

				return this.int64Box;
			}
			private object Box(ulong value)
			{
				if (this.uInt64Box == null)
					this.uInt64Box = new StrongBox<ulong>(FormatProvider);

				this.uInt64Box.Store(value);

				return this.uInt64Box;
			}
			private object Box(float value)
			{
				if (this.singleBox == null)
					this.singleBox = new StrongBox<float>(FormatProvider);

				this.singleBox.Store(value);

				return this.singleBox;
			}
			private object Box(double value)
			{
				if (this.doubleBox == null)
					this.doubleBox = new StrongBox<double>(FormatProvider);

				this.doubleBox.Store(value);

				return this.doubleBox;
			}
			private object Box(decimal value)
			{
				if (this.decimalBox == null)
					this.decimalBox = new StrongBox<decimal>(FormatProvider);

				this.decimalBox.Store(value);

				return this.decimalBox;
			}
			private object Box(DateTime value)
			{
				if (this.dateBox == null)
					this.dateBox = new StrongBox<DateTime>(FormatProvider);

				this.dateBox.Store(value);
				return this.dateBox;
			}
			private object Box(DateTimeOffset value)
			{
				if (this.dateOffsetBox == null)
					this.dateOffsetBox = new StrongBox<DateTimeOffset>(FormatProvider);

				this.dateOffsetBox.Store(value);
				return this.dateOffsetBox;
			}
			private object Box(bool value)
			{
				if (value)
				{
					if (this.trueBox == null)
						this.trueBox = new StrongBox<bool>(true, FormatProvider);
					return trueBox;
				}
				else
				{
					if (this.falseBox == null)
						this.falseBox = new StrongBox<bool>(false, FormatProvider);
					return falseBox;
				}
			}

			private void DecrementClosingTokenCounter()
			{
				if (this.maps.Count > 0)
				{
					var closingToken = this.maps.Pop();
					closingToken.Counter--;
					this.maps.Push(closingToken);
				}
			}

			public void Dispose()
			{
				if (this.leaveOpen == false)
					this.inputStream.Dispose();
			}


			private enum MessagePackType : byte
			{
				PositiveFixIntStart = 0x00,
				PositiveFixIntEnd = 0x7f,
				FixMapStart = 0x80,
				FixMapEnd = 0x8f,
				FixArrayStart = 0x90,
				FixArrayEnd = 0x9f,
				FixStrStart = 0xa0,
				FixStrEnd = 0xbf,
				Nil = 0xc0,
				Unused = 0xc1,
				False = 0xc2,
				True = 0xc3,
				Bin8 = 0xc4,
				Bin16 = 0xc5,
				Bin32 = 0xc6,
				Ext8 = 0xc7,
				Ext16 = 0xc8,
				Ext32 = 0xc9,
				Float32 = 0xca,
				Float64 = 0xcb,
				UInt8 = 0xcc,
				UInt16 = 0xcd,
				UInt32 = 0xce,
				UInt64 = 0xcf,
				Int8 = 0xd0,
				Int16 = 0xd1,
				Int32 = 0xd2,
				Int64 = 0xd3,
				FixExt1 = 0xd4,
				FixExt2 = 0xd5,
				FixExt4 = 0xd6,
				FixExt8 = 0xd7,
				FixExt16 = 0xd8,
				Str8 = 0xd9,
				Str16 = 0xda,
				Str32 = 0xdb,
				Array16 = 0xdc,
				Array32 = 0xdd,
				Map16 = 0xde,
				Map32 = 0xdf,
				NegativeFixIntStart = 0xe0,
				NegativeFixIntEnd = 0xff
			}

			private enum MessagePackExtentionType : byte
			{
				None = 0,
				DateTime = 40,
				DateTimeOffset = 41,
				Decimal = 42
			}
		}
		#endregion
		#region Serialization: BSON
		private void ReadBson(RpgGameData gameData, Stream stream, Encoding encoding, bool leaveOpen)
		{
			if (gameData == null) throw new ArgumentNullException("gameData");
			if (stream == null) throw new ArgumentNullException("stream");
			if (encoding == null) throw new ArgumentNullException("encoding");

			using(var bsonReader = new BsonReader(stream, leaveOpen))
				bsonReader.ReadGameData(gameData);
		}

		private class BsonReader : Reader, IDisposable
		{
			private const int DEFAULT_BUFFER_SIZE = ushort.MaxValue;
			private const int MAX_BINARY_LENGTH = 16 * 1024 * 1024;
			private const int MAX_STRING_LENGTH = 16 * 1024 * 1024;

			private static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);

			private struct Document
			{
				public readonly int Length;
				public readonly BsonType Type;
				public readonly int End;

				public Document(BsonType docType, int length, int end)
				{
					this.Type = docType;
					this.Length = length;
					this.End = end;
				}
			}

			private readonly Stream inputStream;
			private readonly bool leaveOpen;
			private readonly byte[] buffer;
			private readonly EndianBitConverter bitConverter;
			private readonly Stack<Document> documents;
			private ReaderNode node;
			private int bufferOffset;
			private int bufferReaded;
			private int bufferAvailable;
			private int totalBytesReaded;
			private BsonType memberType;

			private StrongBox<int> int32Box;
			private StrongBox<long> int64Box;
			private StrongBox<double> doubleBox;
			private StrongBox<decimal> decimalBox;
			private StrongBox<DateTime> dateBox;
			private StrongBox<DateTimeOffset> dateOffsetBox;
			private StrongBox<bool> trueBox;
			private StrongBox<bool> falseBox;

			public override int LineNumber { get { return 0; } }
			public override int ColumnNumber { get { return this.totalBytesReaded; } }
			public override ReaderNode Node { get { if (this.node.Token == ReaderToken.None) this.NextToken(); return this.node; } }

			public BsonReader(Stream stream, bool leaveOpen = false, int bufferSize = DEFAULT_BUFFER_SIZE)
			{
				if (stream == null) throw new ArgumentNullException("stream");

				if (bufferSize < DEFAULT_BUFFER_SIZE)
					bufferSize = DEFAULT_BUFFER_SIZE;

				this.inputStream = stream;
				this.leaveOpen = leaveOpen;
				this.buffer = new byte[bufferSize];
				this.bufferOffset = 0;
				this.bufferReaded = 0;
				this.bufferAvailable = 0;
				this.bitConverter = EndianBitConverter.Little;
				this.documents = new Stack<Document>();
			}

			public override bool NextToken()
			{
				var length = 0;
				var end = 0;
				if (this.documents.Count == 0)
				{
					if (!this.ReadToBuffer(4, throwOnEos: false))
					{
						this.node = new ReaderNode(ReaderToken.EndOfStream);
						return false;
					}
					length = this.bitConverter.ToInt32(this.buffer, this.bufferOffset);
					end = length <= 0 ? 0 : this.totalBytesReaded - this.bufferReaded + length;
					var newDocument = new Document(BsonType.Document, length, end);
					this.documents.Push(newDocument);
					this.node = new ReaderNode(ReaderToken.BeginObject);
					return true;
				}

				var document = this.documents.Peek();
				if (this.memberType == BsonType.None)
				{
					this.ReadToBuffer(1, throwOnEos: true);
					memberType = (BsonType)this.buffer[this.bufferOffset];
					if (memberType != BsonType.None && document.Type == BsonType.Document)
					{
						var memberName = this.ReadCString();
						this.node = new ReaderNode(ReaderToken.Member, memberName);
						return true;
					}
					else if (memberType != BsonType.None)
					{
						this.SkipCString();
					}
				}

				var type = this.memberType;
				this.memberType = BsonType.None;
				switch (type)
				{
					case BsonType.Double:
						this.ReadToBuffer(8, throwOnEos: true);
						var doubleValue = this.bitConverter.ToDouble(this.buffer, this.bufferOffset);
						this.node = new ReaderNode(ReaderToken.Value, this.Box(doubleValue));
						return true;
					case BsonType.String:
						var stringValue = this.ReadUtf8String();
						this.node = new ReaderNode(ReaderToken.Value, stringValue);
						return true;
					case BsonType.Array:
					case BsonType.Document:
						this.ReadToBuffer(4, throwOnEos: true);
						length = this.bitConverter.ToInt32(this.buffer, this.bufferOffset);
						end = length <= 0 ? 0 : this.totalBytesReaded - this.bufferReaded + length;
						var newDocument = new Document(type, length, end);
						this.documents.Push(newDocument);
						this.node = new ReaderNode(type == BsonType.Document ? ReaderToken.BeginObject : ReaderToken.BeginArray);
						return true;
					case BsonType.Binary:
						this.ReadToBuffer(5, throwOnEos: true);
						length = this.bitConverter.ToInt32(this.buffer, this.bufferOffset);

						if (length > MAX_BINARY_LENGTH) throw ReaderException.BinaryDataIsTooLong(this, length, MAX_BINARY_LENGTH);
						if (length < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of binary data");

						var binaryType = (BsonBinaryType)this.buffer[this.bufferOffset + 4];
						switch (binaryType)
						{
							case BsonBinaryType.Decimal:
								this.ReadToBuffer(length, throwOnEos: true);
								var decimalValue = this.bitConverter.ToDecimal(this.buffer, this.bufferOffset);
								this.node = new ReaderNode(ReaderToken.Value, this.Box(decimalValue));
								return true;
							case BsonBinaryType.DateTime:
								this.ReadToBuffer(length, throwOnEos: true);
								var dateTimeBinary = this.bitConverter.ToInt64(this.buffer, this.bufferOffset);
								this.node = new ReaderNode(ReaderToken.Value, this.Box(DateTime.FromBinary(dateTimeBinary)));
								return true;
							case BsonBinaryType.DateTimeOffset:
								this.ReadToBuffer(length, throwOnEos: true);
								var dateTicks = this.bitConverter.ToInt64(this.buffer, this.bufferOffset);
								var offsetTicks = this.bitConverter.ToInt64(this.buffer, this.bufferOffset + 8);
								this.node = new ReaderNode(ReaderToken.Value, this.Box(new DateTimeOffset(dateTicks, new TimeSpan(offsetTicks))));
								return true;
							case BsonBinaryType.Bytes:
							case BsonBinaryType.Function:
							case BsonBinaryType.BytesOld:
							case BsonBinaryType.UUIDOld:
							case BsonBinaryType.UUID:
							case BsonBinaryType.MD5:
							case BsonBinaryType.UserDefined:
							default:
								var bytes = this.ReadBytes(length, forceNewBuffer: true);
								this.node = new ReaderNode(ReaderToken.Value, bytes.Array);
								return true;
						}
					case BsonType.Undefined:
						this.node = new ReaderNode(ReaderToken.Null);
						return true;
					case BsonType.ObjectId:
						var objectIdStr = this.ReadObjectId();
						this.node = new ReaderNode(ReaderToken.Value, objectIdStr);
						return true;
					case BsonType.Boolean:
						this.ReadToBuffer(1, throwOnEos: true);
						var boolValue = this.buffer[this.bufferOffset] > 0;
						this.node = new ReaderNode(ReaderToken.Value, this.Box(boolValue));
						return true;
					case BsonType.DateTime:
						this.ReadToBuffer(8, throwOnEos: true);
						var dateTimeMilliseconds = this.bitConverter.ToInt64(this.buffer, this.bufferOffset);
						this.node = new ReaderNode(ReaderToken.Value, this.Box(Epoch.AddTicks(checked(dateTimeMilliseconds * TimeSpan.TicksPerMillisecond))));
						return true;
					case BsonType.Null:
						this.node = new ReaderNode(ReaderToken.Null);
						return true;
					case BsonType.Regex:
						var regexPattern = this.ReadCString();
						var regexOptions = this.ReadCString();
						this.node = new ReaderNode(ReaderToken.Value, string.Concat("/", regexPattern, "/", regexOptions));
						return true;
					case BsonType.Reference:
						var reference = this.ReadUtf8String();
						var referenceId = this.ReadObjectId();
						this.node = new ReaderNode(ReaderToken.Value, reference + " -> " + referenceId);
						return true;
					case BsonType.JavaScript:
						var javascriptCode = this.ReadUtf8String();
						this.node = new ReaderNode(ReaderToken.Value, javascriptCode);
						return true;
					case BsonType.JavaScriptWithScope:
						this.ReadToBuffer(4, throwOnEos: true);
						var javascriptScopedCode = this.ReadUtf8String();
						this.memberType = BsonType.Document;
						this.ReadAny(nextToken: false); // scope
						this.node = new ReaderNode(ReaderToken.Value, javascriptScopedCode);
						return true;
					case BsonType.Symbol:
						var symbolString = this.ReadUtf8String();
						this.node = new ReaderNode(ReaderToken.Value, symbolString);
						return true;
					case BsonType.Int32:
						this.ReadToBuffer(4, throwOnEos: true);
						var intValue = this.bitConverter.ToInt32(this.buffer, this.bufferOffset);
						this.node = new ReaderNode(ReaderToken.Value, this.Box(intValue));
						return true;
					case BsonType.Timestamp:
						this.ReadToBuffer(8, throwOnEos: true);
						var timestampSeconds = (this.bitConverter.ToInt64(this.buffer, this.bufferOffset) & uint.MaxValue);
						this.node = new ReaderNode(ReaderToken.Value, this.Box(Epoch.AddTicks(checked(timestampSeconds * TimeSpan.TicksPerSecond))));
						return true;
					case BsonType.Int64:
						this.ReadToBuffer(8, throwOnEos: true);
						var longValue = this.bitConverter.ToInt64(this.buffer, this.bufferOffset);
						this.node = new ReaderNode(ReaderToken.Value, this.Box(longValue));
						return true;
					case BsonType.MinKey:
						this.node = new ReaderNode(ReaderToken.Value, "min");
						return true;
					case BsonType.MaxKey:
						this.node = new ReaderNode(ReaderToken.Value, "max");
						return true;
					case BsonType.None:
						if (this.documents.Count == 0)
							goto default;

						document = this.documents.Pop();
						if (document.End != 0 && document.End != this.totalBytesReaded)
							throw ReaderException.ReadingBrokenDocument(this, string.Format("invalid BSON document length '{0:##,###}' readed, while actual size is '{1:##,###}'", document.Length, document.Length + (this.totalBytesReaded - document.End)));
						this.node = new ReaderNode(document.Type == BsonType.Document ? ReaderToken.EndOfObject : ReaderToken.EndOfArray);
						return true;
					default:
						throw ReaderException.UnknownNotation(this, type.ToString());
				}
			}

			private void SkipCString()
			{
				this.bufferAvailable -= this.bufferReaded;
				this.bufferOffset += this.bufferReaded;
				this.bufferReaded = 0;

				var length = 0;
				var originalTotalBytesReaded = this.totalBytesReaded;

				while (true)
				{
					while (this.bufferAvailable > 0)
					{
						var isTerminated = this.buffer[this.bufferOffset] == 0;

						length++;
						this.bufferOffset++;
						this.bufferAvailable--;

						if (isTerminated)
						{
							this.totalBytesReaded = originalTotalBytesReaded + length; // length includes trailing zero
							return;
						}
					}

					this.bufferOffset = 0;
					this.bufferAvailable = 0;
					this.ReadToBuffer(this.buffer.Length, false);
					if (this.bufferAvailable == 0)
						throw ReaderException.UnterminatedStringLiteral(this);
				}
			}
			private string ReadCString()
			{
				this.bufferAvailable -= this.bufferReaded;
				this.bufferOffset += this.bufferReaded;
				this.bufferReaded = 0;

				var originalTotalBytesReaded = this.totalBytesReaded;

				var tmpBuffer = default(byte[]);
				var tmpBufferOffset = 0;
				while (true)
				{
					var originalOffset = this.bufferOffset;
					var isTerminated = false;
					while (this.bufferAvailable > 0)
					{
						isTerminated = this.buffer[bufferOffset] == 0;

						this.bufferOffset++;
						this.bufferAvailable--;

						if (isTerminated)
							break;
					}

					var chunkLength = this.bufferOffset - originalOffset - 1;
					if (isTerminated && tmpBufferOffset == 0)
					{
						this.totalBytesReaded = originalTotalBytesReaded + chunkLength + 1;
						var strValue = chunkLength <= 0 ? string.Empty : Encoding.UTF8.GetString(this.buffer, originalOffset, chunkLength);
						return strValue;
					}

					if (chunkLength > 0)
					{
						if (chunkLength + tmpBufferOffset > MAX_STRING_LENGTH)
							throw ReaderException.StringLiteralIsTooLong(this, tmpBufferOffset + chunkLength, MAX_STRING_LENGTH);

						if (tmpBuffer == null) tmpBuffer = new byte[Math.Max(DEFAULT_BUFFER_SIZE, chunkLength)];
						if (tmpBufferOffset + chunkLength > tmpBuffer.Length)
							Array.Resize(ref tmpBuffer, Math.Max((int)(tmpBuffer.Length * 1.5), tmpBufferOffset + chunkLength));

						Array.Copy(this.buffer, originalOffset, tmpBuffer, tmpBufferOffset, chunkLength);
						tmpBufferOffset += chunkLength;
					}

					if (isTerminated)
					{
						this.totalBytesReaded = originalTotalBytesReaded + tmpBufferOffset + 1;
						var strValue = tmpBufferOffset == 0 || tmpBuffer == null ? string.Empty : Encoding.UTF8.GetString(tmpBuffer, 0, tmpBufferOffset);
						return strValue;
					}

					this.bufferOffset = 0;
					this.bufferAvailable = 0;
					this.ReadToBuffer(this.buffer.Length, false);

					if (this.bufferAvailable == 0)
						throw ReaderException.UnterminatedStringLiteral(this);
				}
			}
			private string ReadUtf8String()
			{
				this.ReadToBuffer(4, throwOnEos: true);
				var length = this.bitConverter.ToInt32(this.buffer, this.bufferOffset);

				if (length > MAX_STRING_LENGTH) throw ReaderException.StringLiteralIsTooLong(this, length, MAX_STRING_LENGTH);
				if (length < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of string literal");

				var bytes = this.ReadBytes(length);
				return Encoding.UTF8.GetString(bytes.Array, bytes.Offset, bytes.Count - 1);
			}
			private string ReadObjectId()
			{
				this.ReadToBuffer(12, throwOnEos: true);

				var timeStamp = this.bitConverter.ToUInt32(this.buffer, this.bufferOffset);
				var machineAndPid = this.bitConverter.ToUInt32(this.buffer, this.bufferOffset + 4);
				var pidAndIncrement = this.bitConverter.ToUInt32(this.buffer, this.bufferOffset + 8);
				var objectIdStr = string.Concat(timeStamp.ToString("X8"), machineAndPid.ToString("X8"), pidAndIncrement.ToString("X8"));

				return objectIdStr;
			}
			private bool ReadToBuffer(int bytesRequired, bool throwOnEos)
			{
				this.bufferAvailable -= this.bufferReaded;
				this.bufferOffset += this.bufferReaded;
				this.bufferReaded = 0;

				if (this.bufferAvailable < bytesRequired)
				{
					if (this.bufferAvailable > 0)
						Buffer.BlockCopy(this.buffer, this.bufferOffset, this.buffer, 0, this.bufferAvailable);

					this.bufferOffset = 0;
					while (this.bufferAvailable < bytesRequired)
					{
						var read = this.inputStream.Read(this.buffer, this.bufferAvailable, this.buffer.Length - this.bufferAvailable);
						this.bufferAvailable += read;

						if (read != 0 || this.bufferAvailable >= bytesRequired)
							continue;

						if (throwOnEos)
							ReaderException.UnexpectedEndOfStream(this);
						else
							return false;
					}
				}

				this.bufferReaded = bytesRequired;
				this.totalBytesReaded += bytesRequired;
				return true;
			}
			private ArraySegment<byte> ReadBytes(long bytesRequired, bool forceNewBuffer = false)
			{
				if (bytesRequired > int.MaxValue) throw new ArgumentOutOfRangeException("bytesRequired");

				this.bufferAvailable -= this.bufferReaded;
				this.bufferOffset += this.bufferReaded;
				this.bufferReaded = 0;

				if (this.bufferAvailable >= bytesRequired && !forceNewBuffer)
				{
					var bytes = new ArraySegment<byte>(this.buffer, this.bufferOffset, (int)bytesRequired);

					this.bufferAvailable -= (int)bytesRequired;
					this.bufferOffset += (int)bytesRequired;
					this.totalBytesReaded += (int)bytesRequired;

					return bytes;
				}
				else
				{
					var bytes = new byte[bytesRequired];
					var bytesOffset = 0;
					if (this.bufferAvailable > 0 && bytesOffset < bytes.Length)
					{
						var bytesToCopy = Math.Min(bytes.Length - bytesOffset, this.bufferAvailable);
						Buffer.BlockCopy(this.buffer, this.bufferOffset, bytes, bytesOffset, bytesToCopy);

						bytesOffset += bytesToCopy;
						this.bufferOffset += bytesToCopy;

						this.bufferAvailable -= bytesToCopy;
						this.totalBytesReaded += bytesToCopy;
					}

					if (this.bufferAvailable == 0)
						this.bufferOffset = 0;

					while (bytesOffset < bytes.Length)
					{
						var read = this.inputStream.Read(bytes, bytesOffset, bytes.Length - bytesOffset);

						bytesOffset += read;
						this.totalBytesReaded += read;

						if (read == 0 && bytesOffset < bytes.Length)
							throw ReaderException.UnexpectedEndOfStream(this);
					}

					return new ArraySegment<byte>(bytes, 0, bytes.Length);
				}
			}

			private object Box(DateTime value)
			{
				if (this.dateBox == null)
					this.dateBox = new StrongBox<DateTime>(FormatProvider);

				this.dateBox.Store(value);
				return this.dateBox;
			}
			private object Box(DateTimeOffset value)
			{
				if (this.dateOffsetBox == null)
					this.dateOffsetBox = new StrongBox<DateTimeOffset>(FormatProvider);

				this.dateOffsetBox.Store(value);
				return this.dateOffsetBox;
			}
			private object Box(int value)
			{
				if (this.int32Box == null)
					this.int32Box = new StrongBox<int>(FormatProvider);

				this.int32Box.Store(value);

				return this.int32Box;
			}
			private object Box(long value)
			{
				if (this.int64Box == null)
					this.int64Box = new StrongBox<long>(FormatProvider);

				this.int64Box.Store(value);

				return this.int64Box;
			}
			private object Box(double value)
			{
				if (this.doubleBox == null)
					this.doubleBox = new StrongBox<double>(FormatProvider);

				this.doubleBox.Store(value);

				return this.doubleBox;
			}
			private object Box(decimal value)
			{
				if (this.decimalBox == null)
					this.decimalBox = new StrongBox<decimal>(FormatProvider);

				this.decimalBox.Store(value);

				return this.decimalBox;
			}
			private object Box(bool value)
			{
				if (value)
				{
					if (this.trueBox == null)
						this.trueBox = new StrongBox<bool>(true, FormatProvider);
					return trueBox;
				}
				else
				{
					if (this.falseBox == null)
						this.falseBox = new StrongBox<bool>(false, FormatProvider);
					return falseBox;
				}
			}

			public void Dispose()
			{
				if (this.leaveOpen == false)
					this.inputStream.Dispose();
			}

			public enum BsonBinaryType
			{
				Bytes = 0,
				Function = 1,
				BytesOld = 2,
				UUIDOld = 3,
				UUID = 4,
				MD5 = 5,
				UserDefined = 80,

				// 16 bytes
				Decimal = 120,
				// 16 bytes
				DateTime = 121,
				// 16 bytes
				DateTimeOffset = 122,
			}

			public enum BsonType : byte
			{
				None = 0,
				Double = 1,
				String = 2,
				Document = 3,
				Array = 4,
				Binary = 5,
				Undefined = 6,
				ObjectId = 7,
				Boolean = 8,
				DateTime = 9,
				Null = 10,
				Regex = 11,
				Reference = 12,
				JavaScript = 13,
				Symbol = 14,
				JavaScriptWithScope = 15,
				Int32 = 16,
				Timestamp = 17,
				Int64 = 18,
				MinKey = 255,
				MaxKey = 127
			}
		}
		#endregion
		#region Serialization: XML
		private void ReadXml(RpgGameData gameData, Stream stream, Encoding encoding, bool leaveOpen)
		{
			if (gameData == null) throw new ArgumentNullException("gameData");
			if (stream == null) throw new ArgumentNullException("stream");
			if (encoding == null) throw new ArgumentNullException("encoding");

			var textReader = new StreamReader(stream, encoding);
			using(var xmlReader = new XmlFormattingReader(textReader, leaveOpen))
				xmlReader.ReadGameData(gameData);
		}

		private class XmlFormattingReader : Reader, IDisposable
		{
			private const int STATE_INITIAL = 0;
			private const int STATE_ARRAY = 1;
			private const int STATE_OBJECT = 2;
			private const int STATE_MEMBER = 3;
			private const int STATE_VALUE = 4;
			private const int STATE_ATTRIBUTE_MEMBER = 5;
			private const int STATE_ATTRIBUTE_VALUE = 6;
			private const int STATE_EMPTY = 7;

			private readonly XmlReader innerReader;
			private readonly bool leaveOpen;
			private readonly Stack<int> states;
			private string memberName;
			private ReaderNode node;

			public override ReaderNode Node { get { if (this.node.Token == ReaderToken.None) this.NextToken(); return this.node; } }
			public override int LineNumber { get { return this.innerReader is IXmlLineInfo ? ((IXmlLineInfo)this.innerReader).LineNumber : 0; } }
			public override int ColumnNumber { get { return this.innerReader is IXmlLineInfo ? ((IXmlLineInfo)this.innerReader).LinePosition : 0; } }

			public XmlFormattingReader(TextReader reader, bool leaveOpen = false)
			{
				if (reader == null) throw new ArgumentNullException("reader");

				this.innerReader = new XmlTextReader(reader);
				this.leaveOpen = leaveOpen;
				this.states = new Stack<int>();
			}

			public override bool NextToken()
			{
				this.node = this.ReadNext();
				return this.node.Token != ReaderToken.EndOfStream;
			}

			private ReaderNode ReadNext()
			{
				var state = this.states.Count == 0 ? STATE_INITIAL : this.states.Peek();

				if (state == STATE_EMPTY)
					return this.ReadEmptyElement();

				if (state == STATE_ATTRIBUTE_MEMBER || state == STATE_ATTRIBUTE_VALUE)
					return this.ReadAttributes();

				while (this.innerReader.Read())
				{
					switch (this.innerReader.NodeType)
					{
						case XmlNodeType.Element:
							switch (this.innerReader.Name)
							{
								case XmlNotation.ValueElementName:
									if (state == STATE_OBJECT)
										goto default;
									if (state != STATE_INITIAL && state != STATE_ARRAY)
										throw this.NewUnknownNotationException();

									this.states.Push(STATE_VALUE);
									if (this.innerReader.IsEmptyElement)
										this.states.Push(STATE_EMPTY);

									return ReadNext();
								case XmlNotation.ArrayElementName:
									if (state == STATE_OBJECT)
										goto default;

									this.states.Push(STATE_ARRAY);

									if (this.innerReader.IsEmptyElement)
										this.states.Push(STATE_EMPTY);

									return new ReaderNode(ReaderToken.BeginArray);
								case XmlNotation.ObjectElementName:
									if (state == STATE_OBJECT)
										goto default;
									this.states.Push(STATE_OBJECT);

									if (this.innerReader.IsEmptyElement)
										this.states.Push(STATE_EMPTY);

									if (this.innerReader.HasAttributes)
										this.states.Push(STATE_ATTRIBUTE_MEMBER);

									return new ReaderNode(ReaderToken.BeginObject);
								default:
									if (state != STATE_OBJECT)
										throw this.NewUnknownNotationException();

									this.memberName = this.innerReader.Name;
									this.states.Push(STATE_MEMBER);

									if (this.innerReader.IsEmptyElement)
										this.states.Push(STATE_EMPTY);

									return new ReaderNode(ReaderToken.Member, this.memberName);
							}
						case XmlNodeType.EndElement:
							switch (state)
							{
								case STATE_VALUE:
									if (this.innerReader.Name != XmlNotation.ValueElementName)
										throw this.NewUnknownNotationException();
									this.states.Pop(); // pop VALUE
									return this.ReadNext();
								case STATE_MEMBER:
									this.states.Pop(); // pop MEMBER
									return this.ReadNext();
								case STATE_ARRAY:
									if (this.innerReader.Name != XmlNotation.ArrayElementName)
										throw this.NewUnknownNotationException();
									this.states.Pop(); // pop ARRAY
									return new ReaderNode(ReaderToken.EndOfArray);
								case STATE_OBJECT:
									if (this.innerReader.Name != XmlNotation.ObjectElementName)
										throw this.NewUnknownNotationException();
									this.states.Pop(); // pop OBJECT
									return new ReaderNode(ReaderToken.EndOfObject);
							}
							throw this.NewUnknownNotationException();
						case XmlNodeType.Text:
						case XmlNodeType.CDATA:
							if (state == STATE_VALUE || state == STATE_MEMBER)
								return new ReaderNode(ReaderToken.Value, this.innerReader.Value);
							throw this.NewUnknownNotationException();
						case XmlNodeType.SignificantWhitespace:
						case XmlNodeType.Whitespace:
						case XmlNodeType.Comment:
						case XmlNodeType.XmlDeclaration:
						case XmlNodeType.DocumentType:
						case XmlNodeType.Document:
							continue;
						case XmlNodeType.None:
						case XmlNodeType.EntityReference:
						case XmlNodeType.Entity:
						case XmlNodeType.EndEntity:
						case XmlNodeType.ProcessingInstruction:
						case XmlNodeType.DocumentFragment:
						case XmlNodeType.Notation:
						default:
							throw this.NewUnknownNotationException();
					}
				}

				return new ReaderNode(ReaderToken.EndOfStream);
			}

			private ReaderNode ReadEmptyElement()
			{
				this.states.Pop(); // pop EMPTY
				var state = this.states.Count > 0 ? this.states.Peek() : STATE_INITIAL;
				switch (state)
				{
					case STATE_MEMBER:
						this.states.Pop(); // pop MEMBER
						this.memberName = null;
						if (this.innerReader["nil", XmlNotation.XmlSchemaInstanceUrl] == XmlNotation.NullEntityTrue)
							return new ReaderNode(ReaderToken.Null);
						else
							return new ReaderNode(ReaderToken.Value, "");
					case STATE_VALUE:
						this.states.Pop(); // pop VALUE
						return new ReaderNode(ReaderToken.Null);
					case STATE_OBJECT:
						this.states.Pop(); // pop OBJECT
						return new ReaderNode(ReaderToken.EndOfObject);
					case STATE_ARRAY:
						this.states.Pop(); // pop ARRAY
						return new ReaderNode(ReaderToken.EndOfArray);
				}
				return this.ReadNext();
			}
			private ReaderNode ReadAttributes()
			{
				switch (this.states.Pop())
				{
					case STATE_ATTRIBUTE_MEMBER:
						while (this.innerReader.MoveToNextAttribute())
						{
							if (this.innerReader.Prefix == "xmlns" || this.innerReader.Prefix == "xsi")
								continue;

							this.states.Push(STATE_ATTRIBUTE_VALUE);
							return new ReaderNode(ReaderToken.Member, this.innerReader.Name);
						}
						break;
					case STATE_ATTRIBUTE_VALUE:
						this.states.Push(STATE_ATTRIBUTE_MEMBER);
						return new ReaderNode(ReaderToken.Value, this.innerReader.Value);
				}
				return this.ReadNext();
			}

			private Exception NewUnknownNotationException()
			{
				throw ReaderException.UnknownNotation(this, this.innerReader.NodeType.ToString() + "[" + this.innerReader.Name + "]");
			}

			public void Dispose()
			{
				if (this.leaveOpen == false)
					this.innerReader.Close();
			}

			private class XmlNotation
			{
				public const string ObjectElementName = "Object";
				public const string ArrayElementName = "Array";
				public const string ValueElementName = "Value";

				public const string XmlSchemaInstanceUrl = "http://www.w3.org/2001/XMLSchema-instance";
				public const string NullEntityTrue = "true";
			}
		}
		#endregion
		#endregion

#pragma warning disable 0660, 0661
		[GeneratedCode("Charon", "2017.4.3.0")]
		public abstract partial class Document
		{
#pragma warning restore 0660, 0661
			protected bool isReadOnly;

			public static bool operator ==(Document value1, Document value2)
			{
				if (ReferenceEquals(value1, value2)) return true;
				if (ReferenceEquals(value1, null) || ReferenceEquals(value2,null)) return false;

				return Object.Equals(value1, value2);
			}
			public static bool operator !=(Document value1, Document value2)
			{
				if (ReferenceEquals(value1, value2)) return false;
				if (ReferenceEquals(value1, null) || ReferenceEquals(value2,null)) return true;

				return Object.Equals(value1, value2) == false;
			}


			protected internal virtual void SetReadOnly()
			{
				this.isReadOnly = true;
			}

			protected void ThrowIfReadOnly()
			{
				if (this.isReadOnly)
					throw new InvalidOperationException("This Document is read-only and can't be changed.");
			}

			protected static bool AreEquals<T>(T value1, T value2)
			{
				if (value1 == null) return value2 == null;

				return value1.Equals(value2);
			}
			protected static bool AreEquals<T>(ReadOnlyList<T> value1, ReadOnlyList<T> value2)
			{
				if (ReferenceEquals(value1, value2))
					return true;
				else if (value1 == null || value2 == null)
					return false;

				if (value1.Equals(value2))
					return true;

				return Enumerable.SequenceEqual(value1, value2);
			}

			protected static int GetHashCodeFor<T>(T value)
			{
				if (value == null) return 0;
				return value.GetHashCode();
			}
			protected static int GetHashCodeFor<T>(ReadOnlyList<T> value)
			{
				if (value == null)
					return 0;

				if (value.Count == 0)
					return value.GetHashCode();

				var hashCode = 0;
				foreach (var item in value)
					hashCode = unchecked(hashCode + item.GetHashCode());
				return hashCode;
			}
		}

		
		[GeneratedCode("Charon", "2017.4.3.0")]
		public sealed partial class Reference<T> where T : Document
		{
			// Uncomment it to delay reference resolution
			private const bool LazyReferences = false;

			[NonSerialized]
			private T value;
			[NonSerialized]
			private Func<string, object, Document> valueResolver;
			
			public object Id { get; set; }

			public T Value
			{
				get
				{
					if (this.value != null)
						return value;

					if (this.valueResolver != null)
						return this.value = (T)this.valueResolver(typeof(T).Name, this.Id);
					else
						throw new InvalidOperationException(string.Format("Broken {0} reference with id {1}. Consider calling Resolve() before using Value.", typeof(T).Name, this.Id));
				}
			}

			public static implicit operator T(Reference<T> reference)
			{
				return reference.Value;
			}

			internal void Resolve(Func<string, object, Document> resolver)
			{
				if (resolver == null) throw new ArgumentNullException("resolver");

	#pragma warning disable 0162 // C# Unreachable code detected
				this.value = null;
				// ReSharper disable once ConditionIsAlwaysTrueOrFalse
				if (LazyReferences)
					this.valueResolver = resolver;
				else
					this.value = (T)resolver(typeof(T).Name, this.Id);
	#pragma warning restore 0162
			}

			public override bool Equals(object value)
			{
				var other = value as Reference<T>;
				if (other == null)
					return false;

				return Object.Equals(this.Id, other.Id);
			}

			public override int GetHashCode()
			{
				var hashCode = (this.Id != null ? this.Id.GetHashCode() : 0);
				return hashCode;
			}

			public override string ToString()
			{
				return string.Format("id: {0}, entity: {1}", this.Id, typeof(T).Name);
			}
		}

		[GeneratedCode("Charon", "2017.4.3.0")]
		public sealed partial class LocalizedString : IDictionary<string, string>
		{
			private const string NOTES_KEY = "notes";

			private readonly Dictionary<string, string> valueByLang = new Dictionary<string, string>();
			private string currentValue;
			private string currentLanguage;
			private bool isReadOnly;

			public string Value { get { return this.currentValue ?? this.valueByLang.Values.FirstOrDefault(); } }
			public string CurrentLanguage { get { return this.currentLanguage; } }
			public Dictionary<string, string>.KeyCollection SupportedLanguages { get { return this.valueByLang.Keys; } }

			public void SetLanguage(string language)
			{
				if (language == null) throw new ArgumentNullException("language");

				if (this.valueByLang.TryGetValue(language, out this.currentValue) == false)
				{
					System.Diagnostics.Debug.WriteLine(string.Format("Localized string '{0}' doesn't contains text for '{1}' language.", this.valueByLang.Values.FirstOrDefault(), language));
					this.currentValue = string.Empty;
				}

				this.currentLanguage = language;
			}
			public void SetReadOnly()
			{
				this.isReadOnly = true;
			}

			public static implicit operator string(LocalizedString str)
			{
				if (str == null) return null;
				return str.Value;
			}

			public override bool Equals(object value)
			{
				var other = value as LocalizedString;
				if (other == null)
					return false;

				return Enumerable.SequenceEqual(this.valueByLang, other.valueByLang);
			}

			public override int GetHashCode()
			{
				var hashCode = 0;
				foreach(var kv in this.valueByLang)
					hashCode += (kv.Key ?? "").GetHashCode() + (kv.Value ?? "").GetHashCode();
				return hashCode;
			}

			ICollection<string> IDictionary<string, string>.Keys { get { return this.valueByLang.Keys; } }
			ICollection<string> IDictionary<string, string>.Values { get { return this.valueByLang.Values; } }
			int ICollection<KeyValuePair<string, string>>.Count { get { return this.valueByLang.Count; } }
			bool ICollection<KeyValuePair<string, string>>.IsReadOnly { get { return this.isReadOnly; } }
			string IDictionary<string, string>.this[string key]
			{
				get { return this.valueByLang[key]; }
				set
				{
					this.ThrowIfReadOnly();
					if (key == NOTES_KEY) return; this.valueByLang[key] = value;
				}
			}

			void IDictionary<string, string>.Add(string key, string value)
			{
				this.ThrowIfReadOnly();
				if (key == NOTES_KEY) return; // skip comment

				this.valueByLang.Add(key, value);
			}
			bool IDictionary<string, string>.ContainsKey(string key)
			{
				return this.valueByLang.ContainsKey(key);
			}
			bool IDictionary<string, string>.Remove(string key)
			{
				this.ThrowIfReadOnly();

				return this.valueByLang.Remove(key);
			}
			bool IDictionary<string, string>.TryGetValue(string key, out string value)
			{
				return this.valueByLang.TryGetValue(key, out value);
			}

			void ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string> item)
			{
				this.ThrowIfReadOnly();
				if (item.Key == NOTES_KEY) return; // skip comment

				(this.valueByLang as ICollection<KeyValuePair<string, string>>).Add(item);
			}
			void ICollection<KeyValuePair<string, string>>.Clear()
			{
				this.ThrowIfReadOnly();

				this.valueByLang.Clear();
			}
			bool ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string> item)
			{
				this.ThrowIfReadOnly();

				return (this.valueByLang as ICollection<KeyValuePair<string, string>>).Contains(item);
			}
			void ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[] array, int arrayIndex)
			{
				(this.valueByLang as ICollection<KeyValuePair<string, string>>).CopyTo(array, arrayIndex);
			}
			bool ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string> item)
			{
				this.ThrowIfReadOnly();

				return (this.valueByLang as ICollection<KeyValuePair<string, string>>).Remove(item);
			}
			IEnumerator<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>>.GetEnumerator()
			{
				return (this.valueByLang as ICollection<KeyValuePair<string, string>>).GetEnumerator();
			}

			System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return (this.valueByLang as System.Collections.IEnumerable).GetEnumerator();
			}

			private void ThrowIfReadOnly()
			{
				if (this.isReadOnly)
					throw new InvalidOperationException("This LocalizedString is read-only and can't be changed.");
			}

			public static bool operator ==(LocalizedString value1, LocalizedString value2)
			{
				return Object.Equals(value1, value2);
			}
			public static bool operator !=(LocalizedString value1, LocalizedString value2)
			{
				return Object.Equals(value1, value2) == false;
			}

			public override string ToString()
			{
				return this.Value;
			}
		}

	}

	[GeneratedCode("Charon", "2017.4.3.0")]
	internal static class RpgGameDataExtensions
	{
		public static ReadOnlyDictionary<KeyT, ValueT> ToDictionarySkippingNullKeys<KeyT, ValueT>(this ReadOnlyList<ValueT> list, Func<ValueT, KeyT> keySelector)
			where ValueT : RpgGameData.Document
		{
			if (list == null) throw new ArgumentNullException("list");
			if (keySelector == null) throw new ArgumentNullException("keySelector");

			if (list.Count == 0)
				return ReadOnlyDictionary<KeyT, ValueT>.Empty;

			var dictionary = new Dictionary<KeyT, ValueT>(list.Count);
			if (typeof(KeyT).IsValueType)
			{
				for (var i = 0; i < list.Count; i++)
				{
					var value = list[i];
					var key = keySelector(value);
					dictionary[key] = value;
				}
			}
			else
			{
				for (var i = 0; i < list.Count; i++)
				{
					var value = list[i];
					var key = keySelector(value);
					if (ReferenceEquals(key, default(KeyT))) continue;
					dictionary[key] = value;
				}
			}
			return new ReadOnlyDictionary<KeyT, ValueT>(dictionary);
		}
		public static ReadOnlyDictionary<KeyT?, ValueT> ToDictionarySkippingNullKeys<KeyT, ValueT>(this ReadOnlyList<ValueT> list, Func<ValueT, KeyT?> keySelector)
			where KeyT : struct
			where ValueT : RpgGameData.Document
		{
			if (list == null) throw new ArgumentNullException("list");
			if (keySelector == null) throw new ArgumentNullException("keySelector");

			if (list.Count == 0)
				return ReadOnlyDictionary<KeyT?, ValueT>.Empty;

			var dictionary = new Dictionary<KeyT?, ValueT>(list.Count);
			for (var i = 0; i < list.Count; i++)
			{
				var value = list[i];
				var key = keySelector(value);
				if (key.HasValue == false) continue;
				dictionary[key] = value;
			}
			return new ReadOnlyDictionary<KeyT?, ValueT>(dictionary);
		}

		public static ReadOnlyList<T> Dereference<T>(this ReadOnlyList<RpgGameData.Reference<T>> collection) where T : RpgGameData.Document
		{
			if (collection.Count == 0) return ReadOnlyList<T>.Empty;

			var list = new List<T>(collection.Count);
			for(var i = 0; i < collection.Count; i++)
				list.Add(collection[i].Value);

			return new ReadOnlyList<T>(list);
		}

		public static T Dereference<T>(this RpgGameData.Reference<T> reference) where T : RpgGameData.Document
		{
			if (reference == null) return default(T);

			return reference.Value;
		}

		public static ReadOnlyList<T> EmptyIfNull<T>(this ReadOnlyList<T> list)
		{
			if (list == null || list.Count == 0)
				return ReadOnlyList<T>.Empty;
			return list;
		}
	}

	[GeneratedCode("Charon", "2017.4.3.0")]
	public class ReadOnlyList<T> : IEnumerable<T>
	{
		public static readonly ReadOnlyList<T> Empty = new ReadOnlyList<T>();

		private static readonly List<T> EmptyList = new List<T>();

		private readonly List<T> list;

		private List<T> InnerList { get { return this.list ?? EmptyList; } }

		public int Count { get { return this.InnerList.Count; } }
		public T this[int index] { get { return this.InnerList[index]; } }

		public ReadOnlyList()
		{
			this.list = null;
		}

		public ReadOnlyList(List<T> list)
		{
			this.list = list;
		}

		public bool Contains(T item) { return this.InnerList.Contains(item); }
		public void ForEach(Action<T> action) { this.InnerList.ForEach(action); }
		public T Find(Predicate<T> match) { return this.InnerList.Find(match); }
		public bool Exists(Predicate<T> match) { return this.InnerList.Exists(match); }
		public int FindIndex(Predicate<T> match) { return this.InnerList.FindIndex(match); }
		public int FindIndex(int startIndex, Predicate<T> match) { return this.InnerList.FindIndex(startIndex, match); }
		public int FindIndex(int startIndex, int count, Predicate<T> match) { return this.InnerList.FindIndex(startIndex, count, match); }
		public T FindLast(Predicate<T> match) { return this.InnerList.FindLast(match); }
		public int FindLastIndex(Predicate<T> match) { return this.InnerList.FindLastIndex(match); }
		public int FindLastIndex(int startIndex, Predicate<T> match) { return this.InnerList.FindLastIndex(startIndex, match); }
		public int FindLastIndex(int startIndex, int count, Predicate<T> match) { return this.InnerList.FindLastIndex(startIndex, count, match); }
		public int IndexOf(T item) { return this.InnerList.IndexOf(item); }
		public int IndexOf(T item, int index) { return this.InnerList.IndexOf(item, index); }
		public int IndexOf(T item, int index, int count) { return this.InnerList.IndexOf(item, index, count); }
		public int LastIndexOf(T item) { return this.InnerList.LastIndexOf(item); }
		public int LastIndexOf(T item, int index) { return this.InnerList.LastIndexOf(item, index); }
		public int LastIndexOf(T item, int index, int count) { return this.InnerList.LastIndexOf(item, index, count); }
		public bool TrueForAll(Predicate<T> match) { return this.InnerList.TrueForAll(match); }
		public List<T> GetRange(int index, int count) { return this.InnerList.GetRange(index, count); }
		public List<T> FindAll(Predicate<T> match) { return this.InnerList.FindAll(match); }
		public T[] ToArray() { return this.InnerList.ToArray(); }
		public List<T> ToList() { return new List<T>(this.InnerList); }
		public List<TOutput> ConvertAll<TOutput>(Converter<T, TOutput> converter) { return this.InnerList.ConvertAll(converter); }

		public List<T>.Enumerator GetEnumerator()
		{
			return this.InnerList.GetEnumerator();
		}
		IEnumerator IEnumerable.GetEnumerator()
		{
			// ReSharper disable once HeapView.BoxingAllocation
			return this.InnerList.GetEnumerator();
		}
		IEnumerator<T> IEnumerable<T>.GetEnumerator()
		{
			// ReSharper disable once HeapView.BoxingAllocation
			return this.InnerList.GetEnumerator();
		}

		public override bool Equals(object obj)
		{
			if (obj is ReadOnlyList<T>)
				return Object.Equals(this.list, ((ReadOnlyList<T>)obj).list);
			else
				return Object.Equals(this.list, obj);
		}
		public override int GetHashCode()
		{
			return this.InnerList.GetHashCode();
		}

		public static bool operator ==(ReadOnlyList<T> value1, ReadOnlyList<T> value2)
		{
			if (ReferenceEquals(value1, value2)) return true;
			if (ReferenceEquals(value1, null) || ReferenceEquals(value2,null)) return false;

			return value1.Equals(value2);
		}
		public static bool operator !=(ReadOnlyList<T> value1, ReadOnlyList<T> value2)
		{
			if (ReferenceEquals(value1, value2)) return false;
			if (ReferenceEquals(value1, null) || ReferenceEquals(value2,null)) return true;

			return value1.Equals(value2) == false;
		}

		public override string ToString()
		{
			return this.InnerList.ToString();
		}
	}

	[GeneratedCode("Charon", "2017.4.3.0")]
	public class ReadOnlyDictionary<KeyT, ValueT> : IEnumerable<KeyValuePair<KeyT, ValueT>>
	{
		public static readonly ReadOnlyDictionary<KeyT, ValueT> Empty = new ReadOnlyDictionary<KeyT, ValueT>();

		private static readonly Dictionary<KeyT, ValueT> EmptyDictionary = new Dictionary<KeyT, ValueT>();

		private readonly Dictionary<KeyT, ValueT> dictionary;

		private Dictionary<KeyT, ValueT> InnerDictionary { get { return this.dictionary ?? EmptyDictionary; } }
		public int Count { get { return this.InnerDictionary.Count; } }
		public ValueT this[KeyT key] { get { return this.dictionary[key]; } }
		public Dictionary<KeyT, ValueT>.KeyCollection Keys { get { return this.InnerDictionary.Keys; } }
		public Dictionary<KeyT, ValueT>.ValueCollection Values { get { return this.InnerDictionary.Values; } }
		public IEqualityComparer<KeyT> Comparer { get { return this.InnerDictionary.Comparer; } }

		public ReadOnlyDictionary()
		{
			this.dictionary = null;
		}

		public ReadOnlyDictionary(Dictionary<KeyT, ValueT> dictionary)
		{
			this.dictionary = dictionary;
		}
		public void CopyTo(KeyValuePair<KeyT, ValueT>[] array, int arrayIndex)
		{
			((ICollection<KeyValuePair<KeyT, ValueT>>)this.InnerDictionary).CopyTo(array, arrayIndex);
		}
		public bool ContainsKey(KeyT key)
		{
			return this.InnerDictionary.ContainsKey(key);
		}
		public bool ContainsValue(ValueT value)
		{
			return this.InnerDictionary.ContainsValue(value);
		}
		public Dictionary<KeyT, ValueT> ToDictionary()
		{
			return new Dictionary<KeyT, ValueT>(this.InnerDictionary);
		}
		public bool TryGetValue(KeyT key, out ValueT value)
		{
			return this.InnerDictionary.TryGetValue(key, out value);
		}

		IEnumerator<KeyValuePair<KeyT, ValueT>> IEnumerable<KeyValuePair<KeyT, ValueT>>.GetEnumerator()
		{
			// ReSharper disable once HeapView.BoxingAllocation
			return this.InnerDictionary.GetEnumerator();
		}
		public Dictionary<KeyT, ValueT>.Enumerator GetEnumerator()
		{
			return this.InnerDictionary.GetEnumerator();
		}
		IEnumerator IEnumerable.GetEnumerator()
		{
			// ReSharper disable once HeapView.BoxingAllocation
			return this.InnerDictionary.GetEnumerator();
		}

		public override bool Equals(object obj)
		{
			if (obj is ReadOnlyDictionary<KeyT, ValueT>)
				return Object.Equals(this.dictionary, ((ReadOnlyDictionary<KeyT, ValueT>)obj).dictionary);
			else if (obj is Dictionary<KeyT, ValueT>)
				return Object.Equals(this.dictionary, obj);
			else
				return false;
		}
		public override int GetHashCode()
		{
			return this.InnerDictionary.GetHashCode();
		}

		public static bool operator ==(ReadOnlyDictionary<KeyT, ValueT> value1, ReadOnlyDictionary<KeyT, ValueT> value2)
		{
			if (ReferenceEquals(value1, value2)) return true;
			if (ReferenceEquals(value1, null) || ReferenceEquals(value2,null)) return false;

			return value1.Equals(value2);
		}
		public static bool operator !=(ReadOnlyDictionary<KeyT, ValueT> value1, ReadOnlyDictionary<KeyT, ValueT> value2)
		{
			if (ReferenceEquals(value1, value2)) return false;
			if (ReferenceEquals(value1, null) || ReferenceEquals(value2,null)) return true;

			return value1.Equals(value2) == false;
		}

		public override string ToString()
		{
			return this.InnerDictionary.ToString();
		}
	}
}
