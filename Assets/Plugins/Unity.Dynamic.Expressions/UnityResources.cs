/*
	Copyright (c) 2015 Denis Zykov

	This is part of Charon Game Data Editor Unity Plugin.

	Charon Game Data Editor Unity Plugin is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses.
*/
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Unity.Dynamic.Expressions.Properties {

#if UNITY_5 || UNITY_4
    public class Resources
	{
        public static string EXCEPTION_BOUNDEXPR_ARGSDOESNTMATCHPARAMS { get { return "Count of passed arguments doesn't match parameters count."; } }
        public static string EXCEPTION_BOUNDEXPR_BODYRESULTDOESNTMATCHRESULTTYPE { get { return "Body's result type doesn't match expression's result type."; } }
        public static string EXCEPTION_BOUNDEXPR_CANTCONVERTARG { get { return "Can't convert argument '{0}' ('{2}') to required type '{1}'."; } }
        public static string EXCEPTION_BOUNDEXPR_WRONGNUMPARAMS { get { return "Wrong number of parameters. Make sure parameter count matches expression's signature."; } }
        public static string EXCEPTION_BOUNDEXPR_WRONGPARAMETERTYPE { get { return "One of parameters has invalid type. Make sure parameter types matches expression's signature."; } }
        public static string EXCEPTION_BUILD_MISSINGATTRONNODE { get { return "Missing or wrong '{0}' attribute on one of expression nodes."; } }
        public static string EXCEPTION_BUILD_UNABLETOBINDCALL { get { return "Unable to bind call '{0}' with arguments '{1}' to object of type '{2}'."; } }
        public static string EXCEPTION_BUILD_UNABLETOBINDDELEG { get { return "Unable to bind delegate '{0}' with arguments '{1}'."; } }
        public static string EXCEPTION_BUILD_UNABLETOBINDINDEXER { get { return "Unable to bind indexer with arguments '{0}' to object of type '{1}'."; } }
        public static string EXCEPTION_BUILD_UNABLETOCREATEEXPRWITHPARAMS { get { return "Unable to create '{0}' expression with these'{1}' parameters."; } }
        public static string EXCEPTION_BUILD_UNABLETOINVOKENONDELEG { get { return "Unable to invoke non-delegate type '{0}' with arguments '{1}'."; } }
        public static string EXCEPTION_BUILD_UNABLETORESOLVEMEMBERONTYPE { get { return "Unable to find public property or field '{0}' on '{1}'."; } }
        public static string EXCEPTION_BUILD_UNABLETORESOLVENAME { get { return "Unable to resolve '{0}'. There is no formal parameter with this name."; } }
        public static string EXCEPTION_BUILD_UNABLETORESOLVETYPE { get { return "Unable to resolve type '{0}'. Known types are: '{1}'."; } }
        public static string EXCEPTION_BUILD_UNABLETORESOLVETYPEMULTIPLE { get { return "Unable to resolve type '{0}'. Can't choose from: '{1}'."; } }
        public static string EXCEPTION_BUILD_UNKNOWNEXPRTYPE { get { return "Unknown expression type '{0}'."; } }
        public static string EXCEPTION_COMPIL_NOBINARYOPONTYPE { get { return "No binary operation '{0}' is defined on type '{1}'."; } }
        public static string EXCEPTION_COMPIL_NOUNARYOPONTYPE { get { return "No unary operation '{0}' is defined on type '{1}'."; } }
        public static string EXCEPTION_COMPIL_UNKNOWNBINARYEXPRTYPE { get { return "Unknown binary expression type '{0}'."; } }
        public static string EXCEPTION_COMPIL_UNKNOWNEXPRTYPE { get { return "Unknown expression type {0}."; } }
        public static string EXCEPTION_COMPIL_UNKNOWNUNARYEXPRTYPE { get { return "Unknown unary expression type '{0}'."; } }
        public static string EXCEPTION_LIST_LISTISEMPTY { get { return "List is empty."; } }
        public static string EXCEPTION_PARSER_BINARYOPREQOPERAND { get { return "A binary operation requires two parameters."; } }
        public static string EXCEPTION_PARSER_COLONISEXPRECTED { get { return "A colon ':' symbol is expected in conditional '?' expression."; } }
        public static string EXCEPTION_PARSER_EXPRESSIONISEMPTY { get { return "Expression is empty"; } }
        public static string EXCEPTION_PARSER_INVALIDCHILDCOUNTOFNODE { get { return "An invalid children count '{1}' of node '{0}' while {2} is expected."; } }
        public static string EXCEPTION_PARSER_INVALIDCHILDTYPESOFNODE { get { return "An invalid type of children nodes '{1}' of node '{0}' while '{2}' is expected."; } }
        public static string EXCEPTION_PARSER_OPREQUIRESOPERAND { get { return "A '{0}' operator requires an operand."; } }
        public static string EXCEPTION_PARSER_OPREQUIRESSECONDOPERAND { get { return "A '{0}' operator requires a second operand."; } }
        public static string EXCEPTION_PARSER_TERNARYOPREQOPERAND { get { return "A ternary operation requires three parameters."; } }
        public static string EXCEPTION_PARSER_UNARYOPREQOPERAND { get { return "An unary operation requires one parameter."; } }
        public static string EXCEPTION_PARSER_UNEXPECTEDTOKEN { get { return "Unexpected token '{0}' in current context."; } }
        public static string EXCEPTION_PARSER_UNEXPECTEDTOKENWHILEBUILDINGTREE { get { return "Unexpected parser node met '{0}' while building expression tree."; } }
        public static string EXCEPTION_PARSER_UNEXPECTEDTOKENWHILEOTHEREXPECTED { get { return "A one of these '{0}' tokens are expected."; } }
        public static string EXCEPTION_STRINGUTILS_UNEXPECTEDESCAPESEQ { get { return "Unknown escape sequence '{0}'."; } }
        public static string EXCEPTION_TOKENIZER_UNEXPECTEDSYMBOL { get { return "Unexpected symbol '{0}'."; } }
        public static string EXCEPTION_UNBOUNDEXPR_DUPLICATEPARAMNAME { get { return "Duplicate parameter name '{0}'."; } }
        public static string EXCEPTION_UNBOUNDEXPR_TYPESDOESNTMATCHNAMES { get { return "Length of types array doesn't match length of names array."; } }
    }
#endif
}

